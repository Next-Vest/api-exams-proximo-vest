openapi: 3.0.3
info:
  title: Vestibulares API
  version: "1.0.0"
  description: >
    API para gestão de vestibulares (ENEM, Unicamp, Fuvest, etc.), com questões
    objetivas (MCQ) e discursivas, estímulos, rubricas, e utilitários de importação/validação.

servers:
  - url: https://api.proximovest.com.br/api
    description: Produção

security:
  - ApiKeyAuth: []

tags:
  - name: Exam Board
  - name: Exam Edition
  - name: Exam Phase
  - name: Subject
  - name: Skill
  - name: Stimulus
  - name: Question
  - name: Rubric
  - name: Expected Answer (opcional)
  - name: Utilities

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key

  schemas:
    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code: { type: string }
            message: { type: string }
          required: [message]

    OptionKey:
      type: string
      enum: [A, B, C, D, E]

    ExamBoard:
      type: object
      properties:
        id: { type: integer }
        slug: { type: string }
        name: { type: string }
      required: [id, slug, name]

    ExamEdition:
      type: object
      properties:
        id: { type: integer }
        examBoardId: { type: integer }
        year: { type: integer }
        editionLabel: { type: string }
        notes: { type: string, nullable: true }

    ExamPhase:
      type: object
      properties:
        id: { type: integer }
        examEditionId: { type: integer }
        phaseNumber: { type: integer }
        dayNumber: { type: integer, nullable: true }
        subjectBlock: { type: string, nullable: true }
        questionCountExpected: { type: integer, nullable: true }
        defaultOptionCount: { type: integer, nullable: true }
        isDiscursive: { type: boolean }

    Subject:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        slug: { type: string }

    Skill:
      type: object
      properties:
        id: { type: integer }
        code: { type: string, nullable: true }
        label: { type: string }

    StimulusAsset:
      type: object
      properties:
        id: { type: integer }
        storageKey: { type: string }
        caption: { type: string, nullable: true }
        pageHint: { type: integer, nullable: true }

    StimulusInput:
      type: object
      properties:
        contentHtml: { type: string }
        contentText: { type: string }
        sourceRef: { type: string }
        assets:
          type: array
          items:
            type: object
            properties:
              storageKey: { type: string }
              caption: { type: string }
              pageHint: { type: integer }

    McqOption:
      type: object
      properties:
        label: { $ref: "#/components/schemas/OptionKey" }
        textHtml: { type: string }
        textPlain: { type: string }

    McqBlock:
      type: object
      properties:
        optionCount: { type: integer, enum: [4,5] }
        shuffleOptions: { type: boolean }
        correctOptionKey: { $ref: "#/components/schemas/OptionKey" }
        options:
          type: array
          minItems: 4
          maxItems: 5
          items: { $ref: "#/components/schemas/McqOption" }

    FrExpectedAnswer:
      type: object
      properties:
        id: { type: integer }
        label: { type: string }
        answerHtml: { type: string }
        maxScore: { type: number }

    FrRubric:
      type: object
      properties:
        id: { type: integer }
        criterion: { type: string }
        levelsJson:
          type: object
          additionalProperties:
            type: string
      required: [criterion, levelsJson]

    FrBlock:
      type: object
      properties:
        maxScore: { type: number }
        answerGuidanceHtml: { type: string }
        expectedAnswers:
          type: array
          items: { $ref: "#/components/schemas/FrExpectedAnswer" }
        rubrics:
          type: array
          items: { $ref: "#/components/schemas/FrRubric" }

    QuestionCreate:
      type: object
      properties:
        examPhaseId: { type: integer }
        numberLabel: { type: string }
        isDiscursive: { type: boolean }
        subjects:
          type: array
          items: { type: string, description: "subject slug" }
        skills:
          type: array
          items: { type: string, description: "skill code" }
        stimulus: { $ref: "#/components/schemas/StimulusInput" }
        mcq: { $ref: "#/components/schemas/McqBlock" }
        fr:
          type: object
          properties:
            maxScore: { type: number }
            answerGuidanceHtml: { type: string }
            expectedAnswers:
              type: array
              items:
                type: object
                properties:
                  label: { type: string }
                  answerHtml: { type: string }
                  maxScore: { type: number }
            rubrics:
              type: array
              items:
                type: object
                properties:
                  criterion: { type: string }
                  levelsJson:
                    type: object
                    additionalProperties: { type: string }
        sourcePageStart: { type: integer }
        sourcePageEnd: { type: integer }
      required: [examPhaseId, numberLabel, isDiscursive]

    QuestionListResponse:
      type: object
      properties:
        total: { type: integer }
        page: { type: integer }
        pageSize: { type: integer }
        items:
          type: array
          items:
            type: object
            description: Question com includes condicionais

    BatchRequest:
      type: object
      properties:
        items:
          type: array
          items: { $ref: "#/components/schemas/QuestionCreate" }
        onConflict:
          type: string
          enum: [UPSERT, SKIP, ERROR]
          default: UPSERT

    BatchResponse:
      type: object
      properties:
        summary:
          type: object
          properties:
            ok: { type: integer }
            skipped: { type: integer }
            errors: { type: integer }
        errors:
          type: array
          items:
            type: object
            properties:
              index: { type: integer }
              message: { type: string }

    PhaseValidateRequest:
      type: object
      properties:
        examPhaseId: { type: integer }
        includeDetails: { type: boolean, default: true }
      required: [examPhaseId]

    PhaseValidateResponse:
      type: object
      properties:
        phase:
          type: object
          properties:
            id: { type: integer }
            isDiscursive: { type: boolean }
            questionCountExpected: { type: integer, nullable: true }
            defaultOptionCount: { type: integer, nullable: true }
        totals:
          type: object
          properties:
            expected: { type: integer, nullable: true }
            found: { type: integer }
            delta: { type: integer, nullable: true }
        ok: { type: boolean }
        labels:
          type: array
          items: { type: string }
        duplicates:
          type: array
          items: { type: string }
        missingNumbers:
          type: array
          items: { type: string }
        diagnostics:
          type: object
          properties:
            modeMismatch:
              type: array
              items:
                type: object
                properties:
                  id: { type: integer }
                  numberLabel: { type: string }
                  expected: { type: string, enum: [discursive, mcq] }
                  got: { type: string, enum: [discursive, mcq] }
            optionCountMismatches:
              type: array
              items:
                type: object
                properties:
                  id: { type: integer }
                  numberLabel: { type: string }
                  phaseDefault: { type: integer, nullable: true }
                  questionOptionCount: { type: integer, nullable: true }
            optionsLengthMismatches:
              type: array
              items:
                type: object
                properties:
                  id: { type: integer }
                  numberLabel: { type: string }
                  optionCount: { type: integer, nullable: true }
                  optionsLength: { type: integer, nullable: true }

paths:
  /exam-board/create:
    post:
      tags: [Exam Board]
      summary: Criar board
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [slug, name]
              properties:
                slug: { type: string }
                name: { type: string }
      responses:
        "201": { description: Created, content: { application/json: { schema: { $ref: "#/components/schemas/ExamBoard" } } } }
        "400": { description: Bad request, content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } } }

  /exam-board/list:
    get:
      tags: [Exam Board]
      summary: Listar boards
      parameters:
        - in: query
          name: filter
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { type: array, items: { $ref: "#/components/schemas/ExamBoard" } }

  /exam-board/{id}:
    get:
      tags: [Exam Board]
      summary: Ler board por id
      parameters: [{ name: id, in: path, required: true, schema: { type: integer } }]
      responses:
        "200": { description: OK, content: { application/json: { schema: { $ref: "#/components/schemas/ExamBoard" } } } }
        "404": { description: Not found }
    patch:
      tags: [Exam Board]
      summary: Atualizar board
      parameters: [{ name: id, in: path, required: true, schema: { type: integer } }]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                slug: { type: string }
                name: { type: string }
      responses:
        "200": { description: OK }
    delete:
      tags: [Exam Board]
      summary: Remover board
      parameters: [{ name: id, in: path, required: true, schema: { type: integer } }]
      responses:
        "200": { description: OK }

  /exam-edition/create:
    post:
      tags: [Exam Edition]
      summary: Criar edição
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [examBoardId, year, editionLabel]
              properties:
                examBoardId: { type: integer }
                year: { type: integer }
                editionLabel: { type: string }
                notes: { type: string, nullable: true }
      responses:
        "201": { description: Created, content: { application/json: { schema: { $ref: "#/components/schemas/ExamEdition" } } } }

  /exam-edition/list:
    get:
      tags: [Exam Edition]
      summary: Listar edições
      parameters:
        - in: query
          name: examBoardId
          schema: { type: integer }
        - in: query
          name: year
          schema: { type: integer }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { type: array, items: { $ref: "#/components/schemas/ExamEdition" } }

  /exam-edition/{id}:
    get:
      tags: [Exam Edition]
      summary: Ler edição
      parameters: [{ name: id, in: path, required: true, schema: { type: integer } }]
      responses:
        "200": { description: OK }
        "404": { description: Not found }
    patch:
      tags: [Exam Edition]
      summary: Atualizar edição
      parameters: [{ name: id, in: path, required: true, schema: { type: integer } }]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                editionLabel: { type: string }
                notes: { type: string, nullable: true }
      responses:
        "200": { description: OK }
    delete:
      tags: [Exam Edition]
      summary: Remover edição
      parameters: [{ name: id, in: path, required: true, schema: { type: integer } }]
      responses:
        "200": { description: OK }

  /exam-phase/create:
    post:
      tags: [Exam Phase]
      summary: Criar fase
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [examEditionId, phaseNumber, isDiscursive]
              properties:
                examEditionId: { type: integer }
                phaseNumber: { type: integer }
                dayNumber: { type: integer, nullable: true }
                subjectBlock: { type: string, nullable: true }
                questionCountExpected: { type: integer, nullable: true }
                defaultOptionCount: { type: integer, nullable: true }
                isDiscursive: { type: boolean }
      responses:
        "201": { description: Created, content: { application/json: { schema: { $ref: "#/components/schemas/ExamPhase" } } } }

  /exam-phase/list:
    get:
      tags: [Exam Phase]
      summary: Listar fases
      parameters:
        - in: query
          name: examEditionId
          schema: { type: integer }
        - in: query
          name: phaseNumber
          schema: { type: integer }
        - in: query
          name: dayNumber
          schema: { type: integer }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { type: array, items: { $ref: "#/components/schemas/ExamPhase" } }

  /exam-phase/{id}:
    get:
      tags: [Exam Phase]
      summary: Ler fase
      parameters: [{ name: id, in: path, required: true, schema: { type: integer } }]
      responses:
        "200": { description: OK }
        "404": { description: Not found }
    patch:
      tags: [Exam Phase]
      summary: Atualizar fase
      parameters: [{ name: id, in: path, required: true, schema: { type: integer } }]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                subjectBlock: { type: string, nullable: true }
                questionCountExpected: { type: integer, nullable: true }
                defaultOptionCount: { type: integer, nullable: true }
                isDiscursive: { type: boolean }
      responses:
        "200": { description: OK }
    delete:
      tags: [Exam Phase]
      summary: Remover fase
      parameters: [{ name: id, in: path, required: true, schema: { type: integer } }]
      responses:
        "200": { description: OK }

  /exam-phase/validate:
    post:
      tags: [Utilities]
      summary: Validar fase (full)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/PhaseValidateRequest" }
            example: { examPhaseId: 12, includeDetails: true }
      responses:
        "200":
          description: OK
          content: { application/json: { schema: { $ref: "#/components/schemas/PhaseValidateResponse" } } }
        "404": { description: Not found, content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } } }

  /subject/create:
    post:
      tags: [Subject]
      summary: Criar disciplina
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, slug]
              properties:
                name: { type: string }
                slug: { type: string }
      responses:
        "201": { description: Created, content: { application/json: { schema: { $ref: "#/components/schemas/Subject" } } } }

  /subject/list:
    get:
      tags: [Subject]
      summary: Listar disciplinas
      parameters:
        - in: query
          name: filter
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { type: array, items: { $ref: "#/components/schemas/Subject" } }

  /subject/{id}:
    get:
      tags: [Subject]
      summary: Ler disciplina
      parameters: [{ name: id, in: path, required: true, schema: { type: integer } }]
      responses:
        "200": { description: OK }
        "404": { description: Not found }
    patch:
      tags: [Subject]
      summary: Atualizar disciplina
      parameters: [{ name: id, in: path, required: true, schema: { type: integer } }]
      requestBody:
        content:
          application/json:
            schema: { type: object, properties: { name: { type: string }, slug: { type: string } } }
      responses:
        "200": { description: OK }
    delete:
      tags: [Subject]
      summary: Remover disciplina
      parameters: [{ name: id, in: path, required: true, schema: { type: integer } }]
      responses:
        "200": { description: OK }

  /skill/create:
    post:
      tags: [Skill]
      summary: Criar habilidade
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [label]
              properties:
                code: { type: string, nullable: true }
                label: { type: string }
      responses:
        "201": { description: Created, content: { application/json: { schema: { $ref: "#/components/schemas/Skill" } } } }

  /skill/list:
    get:
      tags: [Skill]
      summary: Listar habilidades
      parameters:
        - in: query
          name: filter
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { type: array, items: { $ref: "#/components/schemas/Skill" } }

  /skill/{id}:
    get:
      tags: [Skill]
      summary: Ler habilidade
      parameters: [{ name: id, in: path, required: true, schema: { type: integer } }]
      responses:
        "200": { description: OK }
        "404": { description: Not found }
    patch:
      tags: [Skill]
      summary: Atualizar habilidade
      parameters: [{ name: id, in: path, required: true, schema: { type: integer } }]
      requestBody:
        content:
          application/json:
            schema: { type: object, properties: { code: { type: string, nullable: true }, label: { type: string } } }
      responses:
        "200": { description: OK }
    delete:
      tags: [Skill]
      summary: Remover habilidade
      parameters: [{ name: id, in: path, required: true, schema: { type: integer } }]
      responses:
        "200": { description: OK }

  /stimulus/create:
    post:
      tags: [Stimulus]
      summary: Criar estímulo isolado (opcional)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/StimulusInput" }
      responses:
        "201": { description: Created }

  /stimulus/list:
    get:
      tags: [Stimulus]
      summary: Listar estímulos
      parameters:
        - in: query
          name: filter
          schema: { type: string }
      responses:
        "200": { description: OK }

  /stimulus/{id}:
    get:
      tags: [Stimulus]
      summary: Ler estímulo
      parameters: [{ name: id, in: path, required: true, schema: { type: integer } }]
      responses:
        "200": { description: OK }
        "404": { description: Not found }
    patch:
      tags: [Stimulus]
      summary: Atualizar estímulo
      parameters: [{ name: id, in: path, required: true, schema: { type: integer } }]
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/StimulusInput" }
      responses:
        "200": { description: OK }
    delete:
      tags: [Stimulus]
      summary: Remover estímulo
      parameters: [{ name: id, in: path, required: true, schema: { type: integer } }]
      responses:
        "200": { description: OK }

  /question/create:
    post:
      tags: [Question]
      summary: Criar questão (MCQ ou Discursiva)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/QuestionCreate" }
      responses:
        "201": { description: Created }

  /question/list:
    get:
      tags: [Question]
      summary: Listar/filtrar questões
      description: >
        Suporta múltiplos `include` repetidos (`?include=stimulus&include=skills`) e/ou lista
        separada por vírgulas (`?include=stimulus,skills`). Quando ambos forem usados, os valores
        são combinados.
      parameters:
        - in: query
          name: examPhaseId
          schema: { type: integer }
        - in: query
          name: subject
          schema: { type: string, description: "slug da disciplina" }
        - in: query
          name: isDiscursive
          schema: { type: boolean }
        - in: query
          name: include
          schema:
            type: array
            items:
              type: string
              enum: [stimulus, subjects, skills, mcq, fr, expectedAnswers, rubrics, options]
          style: form
          explode: true
          description: "Aceita parâmetros repetidos e/ou valores separados por vírgula."
        - in: query
          name: orderBy
          schema:
            type: string
            enum: [id, numberLabel, createdAt]
            default: numberLabel
        - in: query
          name: order
          schema:
            type: string
            enum: [asc, desc]
            default: asc
        - in: query
          name: page
          schema: { type: integer, default: 1, minimum: 1 }
        - in: query
          name: pageSize
          schema: { type: integer, default: 50, minimum: 1, maximum: 200 }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/QuestionListResponse" }

  /question/{id}:
    get:
      tags: [Question]
      summary: Ler questão
      parameters: [{ name: id, in: path, required: true, schema: { type: integer } }]
      responses:
        "200": { description: OK }
        "404": { description: Not found }
    patch:
      tags: [Question]
      summary: Atualizar questão
      parameters: [{ name: id, in: path, required: true, schema: { type: integer } }]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                numberLabel: { type: string }
                isDiscursive: { type: boolean }
                sourcePageStart: { type: integer }
                sourcePageEnd: { type: integer }
                mcq: { $ref: "#/components/schemas/McqBlock" }
                fr:
                  type: object
                  properties:
                    maxScore: { type: number }
                    answerGuidanceHtml: { type: string }
      responses:
        "200": { description: OK }
    delete:
      tags: [Question]
      summary: Remover questão
      parameters: [{ name: id, in: path, required: true, schema: { type: integer } }]
      responses:
        "200": { description: OK }

  /question/batch:
    post:
      tags: [Question]
      summary: Ingestão em massa
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/BatchRequest" }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/BatchResponse" }

  /question/export:
    post:
      tags: [Question]
      summary: Exportar questões de uma fase
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object, required: [examPhaseId], properties: { examPhaseId: { type: integer } } }
      responses:
        "200": { description: OK }

  /question/import:
    post:
      tags: [Question]
      summary: Importar questões (formato do batch)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/BatchRequest" }
      responses:
        "200": { description: OK }

  /rubric/create:
    post:
      tags: [Rubric]
      summary: Criar rubrica para questão discursiva
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [questionId, criterion, levelsJson]
              properties:
                questionId: { type: integer }
                criterion: { type: string }
                levelsJson:
                  type: object
                  additionalProperties: { type: string }
      responses:
        "201": { description: Created }

  /rubric/list:
    get:
      tags: [Rubric]
      summary: Listar rubricas de uma questão
      parameters:
        - in: query
          name: questionId
          required: true
          schema: { type: integer }
      responses:
        "200": { description: OK }

  /rubric/{id}:
    patch:
      tags: [Rubric]
      summary: Atualizar rubrica
      parameters: [{ name: id, in: path, required: true, schema: { type: integer } }]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                criterion: { type: string }
                levelsJson: { type: object, additionalProperties: { type: string } }
      responses:
        "200": { description: OK }
    delete:
      tags: [Rubric]
      summary: Remover rubrica
      parameters: [{ name: id, in: path, required: true, schema: { type: integer } }]
      responses:
        "200": { description: OK }

  /expected-answer/create:
    post:
      tags: [Expected Answer (opcional)]
      summary: Criar subitem de resposta esperada (discursiva)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [questionId]
              properties:
                questionId: { type: integer, description: "ID da questão discursiva (FrItem.questionId)" }
                label: { type: string }
                answerHtml: { type: string }
                maxScore: { type: number }
      responses:
        "201": { description: Created }

  /expected-answer/list:
    get:
      tags: [Expected Answer (opcional)]
      summary: Listar subitens de resposta esperada
      parameters:
        - in: query
          name: questionId
          required: true
          schema: { type: integer }
      responses:
        "200": { description: OK }

  /expected-answer/{id}:
    patch:
      tags: [Expected Answer (opcional)]
      summary: Atualizar subitem de resposta esperada
      parameters: [{ name: id, in: path, required: true, schema: { type: integer } }]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                label: { type: string }
                answerHtml: { type: string }
                maxScore: { type: number }
      responses:
        "200": { description: OK }
    delete:
      tags: [Expected Answer (opcional)]
      summary: Remover subitem de resposta esperada
      parameters: [{ name: id, in: path, required: true, schema: { type: integer } }]
      responses:
        "200": { description: OK }
