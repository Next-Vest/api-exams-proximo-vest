
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model ExamBoard
 * 
 */
export type ExamBoard = $Result.DefaultSelection<Prisma.$ExamBoardPayload>
/**
 * Model ExamEdition
 * 
 */
export type ExamEdition = $Result.DefaultSelection<Prisma.$ExamEditionPayload>
/**
 * Model ExamPhase
 * 
 */
export type ExamPhase = $Result.DefaultSelection<Prisma.$ExamPhasePayload>
/**
 * Model Subject
 * 
 */
export type Subject = $Result.DefaultSelection<Prisma.$SubjectPayload>
/**
 * Model Skill
 * 
 */
export type Skill = $Result.DefaultSelection<Prisma.$SkillPayload>
/**
 * Model Stimulus
 * 
 */
export type Stimulus = $Result.DefaultSelection<Prisma.$StimulusPayload>
/**
 * Model StimulusAsset
 * 
 */
export type StimulusAsset = $Result.DefaultSelection<Prisma.$StimulusAssetPayload>
/**
 * Model Question
 * 
 */
export type Question = $Result.DefaultSelection<Prisma.$QuestionPayload>
/**
 * Model QuestionSubject
 * 
 */
export type QuestionSubject = $Result.DefaultSelection<Prisma.$QuestionSubjectPayload>
/**
 * Model QuestionSkill
 * 
 */
export type QuestionSkill = $Result.DefaultSelection<Prisma.$QuestionSkillPayload>
/**
 * Model McqItem
 * 
 */
export type McqItem = $Result.DefaultSelection<Prisma.$McqItemPayload>
/**
 * Model McqOption
 * 
 */
export type McqOption = $Result.DefaultSelection<Prisma.$McqOptionPayload>
/**
 * Model FrItem
 * 
 */
export type FrItem = $Result.DefaultSelection<Prisma.$FrItemPayload>
/**
 * Model FrAnswerExpected
 * 
 */
export type FrAnswerExpected = $Result.DefaultSelection<Prisma.$FrAnswerExpectedPayload>
/**
 * Model FrRubric
 * 
 */
export type FrRubric = $Result.DefaultSelection<Prisma.$FrRubricPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Verification
 * 
 */
export type Verification = $Result.DefaultSelection<Prisma.$VerificationPayload>
/**
 * Model Role
 * 
 */
export type Role = $Result.DefaultSelection<Prisma.$RolePayload>
/**
 * Model Permission
 * 
 */
export type Permission = $Result.DefaultSelection<Prisma.$PermissionPayload>
/**
 * Model RolePermission
 * 
 */
export type RolePermission = $Result.DefaultSelection<Prisma.$RolePermissionPayload>
/**
 * Model UserRole
 * 
 */
export type UserRole = $Result.DefaultSelection<Prisma.$UserRolePayload>
/**
 * Model UserPermission
 * 
 */
export type UserPermission = $Result.DefaultSelection<Prisma.$UserPermissionPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const OptionKey: {
  A: 'A',
  B: 'B',
  C: 'C',
  D: 'D',
  E: 'E'
};

export type OptionKey = (typeof OptionKey)[keyof typeof OptionKey]


export const QuestionStatus: {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED',
  ARCHIVED: 'ARCHIVED'
};

export type QuestionStatus = (typeof QuestionStatus)[keyof typeof QuestionStatus]


export const Difficulty: {
  VERY_EASY: 'VERY_EASY',
  EASY: 'EASY',
  MEDIUM: 'MEDIUM',
  HARD: 'HARD',
  VERY_HARD: 'VERY_HARD'
};

export type Difficulty = (typeof Difficulty)[keyof typeof Difficulty]

}

export type OptionKey = $Enums.OptionKey

export const OptionKey: typeof $Enums.OptionKey

export type QuestionStatus = $Enums.QuestionStatus

export const QuestionStatus: typeof $Enums.QuestionStatus

export type Difficulty = $Enums.Difficulty

export const Difficulty: typeof $Enums.Difficulty

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more ExamBoards
 * const examBoards = await prisma.examBoard.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more ExamBoards
   * const examBoards = await prisma.examBoard.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.examBoard`: Exposes CRUD operations for the **ExamBoard** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ExamBoards
    * const examBoards = await prisma.examBoard.findMany()
    * ```
    */
  get examBoard(): Prisma.ExamBoardDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.examEdition`: Exposes CRUD operations for the **ExamEdition** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ExamEditions
    * const examEditions = await prisma.examEdition.findMany()
    * ```
    */
  get examEdition(): Prisma.ExamEditionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.examPhase`: Exposes CRUD operations for the **ExamPhase** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ExamPhases
    * const examPhases = await prisma.examPhase.findMany()
    * ```
    */
  get examPhase(): Prisma.ExamPhaseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.subject`: Exposes CRUD operations for the **Subject** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subjects
    * const subjects = await prisma.subject.findMany()
    * ```
    */
  get subject(): Prisma.SubjectDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.skill`: Exposes CRUD operations for the **Skill** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Skills
    * const skills = await prisma.skill.findMany()
    * ```
    */
  get skill(): Prisma.SkillDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.stimulus`: Exposes CRUD operations for the **Stimulus** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stimuli
    * const stimuli = await prisma.stimulus.findMany()
    * ```
    */
  get stimulus(): Prisma.StimulusDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.stimulusAsset`: Exposes CRUD operations for the **StimulusAsset** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StimulusAssets
    * const stimulusAssets = await prisma.stimulusAsset.findMany()
    * ```
    */
  get stimulusAsset(): Prisma.StimulusAssetDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.question`: Exposes CRUD operations for the **Question** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Questions
    * const questions = await prisma.question.findMany()
    * ```
    */
  get question(): Prisma.QuestionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.questionSubject`: Exposes CRUD operations for the **QuestionSubject** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more QuestionSubjects
    * const questionSubjects = await prisma.questionSubject.findMany()
    * ```
    */
  get questionSubject(): Prisma.QuestionSubjectDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.questionSkill`: Exposes CRUD operations for the **QuestionSkill** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more QuestionSkills
    * const questionSkills = await prisma.questionSkill.findMany()
    * ```
    */
  get questionSkill(): Prisma.QuestionSkillDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.mcqItem`: Exposes CRUD operations for the **McqItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more McqItems
    * const mcqItems = await prisma.mcqItem.findMany()
    * ```
    */
  get mcqItem(): Prisma.McqItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.mcqOption`: Exposes CRUD operations for the **McqOption** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more McqOptions
    * const mcqOptions = await prisma.mcqOption.findMany()
    * ```
    */
  get mcqOption(): Prisma.McqOptionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.frItem`: Exposes CRUD operations for the **FrItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FrItems
    * const frItems = await prisma.frItem.findMany()
    * ```
    */
  get frItem(): Prisma.FrItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.frAnswerExpected`: Exposes CRUD operations for the **FrAnswerExpected** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FrAnswerExpecteds
    * const frAnswerExpecteds = await prisma.frAnswerExpected.findMany()
    * ```
    */
  get frAnswerExpected(): Prisma.FrAnswerExpectedDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.frRubric`: Exposes CRUD operations for the **FrRubric** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FrRubrics
    * const frRubrics = await prisma.frRubric.findMany()
    * ```
    */
  get frRubric(): Prisma.FrRubricDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.verification`: Exposes CRUD operations for the **Verification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Verifications
    * const verifications = await prisma.verification.findMany()
    * ```
    */
  get verification(): Prisma.VerificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.role`: Exposes CRUD operations for the **Role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.RoleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.permission`: Exposes CRUD operations for the **Permission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Permissions
    * const permissions = await prisma.permission.findMany()
    * ```
    */
  get permission(): Prisma.PermissionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.rolePermission`: Exposes CRUD operations for the **RolePermission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RolePermissions
    * const rolePermissions = await prisma.rolePermission.findMany()
    * ```
    */
  get rolePermission(): Prisma.RolePermissionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userRole`: Exposes CRUD operations for the **UserRole** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserRoles
    * const userRoles = await prisma.userRole.findMany()
    * ```
    */
  get userRole(): Prisma.UserRoleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userPermission`: Exposes CRUD operations for the **UserPermission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserPermissions
    * const userPermissions = await prisma.userPermission.findMany()
    * ```
    */
  get userPermission(): Prisma.UserPermissionDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.18.0
   * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import Bytes = runtime.Bytes
  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    ExamBoard: 'ExamBoard',
    ExamEdition: 'ExamEdition',
    ExamPhase: 'ExamPhase',
    Subject: 'Subject',
    Skill: 'Skill',
    Stimulus: 'Stimulus',
    StimulusAsset: 'StimulusAsset',
    Question: 'Question',
    QuestionSubject: 'QuestionSubject',
    QuestionSkill: 'QuestionSkill',
    McqItem: 'McqItem',
    McqOption: 'McqOption',
    FrItem: 'FrItem',
    FrAnswerExpected: 'FrAnswerExpected',
    FrRubric: 'FrRubric',
    User: 'User',
    Session: 'Session',
    Account: 'Account',
    Verification: 'Verification',
    Role: 'Role',
    Permission: 'Permission',
    RolePermission: 'RolePermission',
    UserRole: 'UserRole',
    UserPermission: 'UserPermission'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "examBoard" | "examEdition" | "examPhase" | "subject" | "skill" | "stimulus" | "stimulusAsset" | "question" | "questionSubject" | "questionSkill" | "mcqItem" | "mcqOption" | "frItem" | "frAnswerExpected" | "frRubric" | "user" | "session" | "account" | "verification" | "role" | "permission" | "rolePermission" | "userRole" | "userPermission"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      ExamBoard: {
        payload: Prisma.$ExamBoardPayload<ExtArgs>
        fields: Prisma.ExamBoardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExamBoardFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamBoardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExamBoardFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamBoardPayload>
          }
          findFirst: {
            args: Prisma.ExamBoardFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamBoardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExamBoardFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamBoardPayload>
          }
          findMany: {
            args: Prisma.ExamBoardFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamBoardPayload>[]
          }
          create: {
            args: Prisma.ExamBoardCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamBoardPayload>
          }
          createMany: {
            args: Prisma.ExamBoardCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ExamBoardCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamBoardPayload>[]
          }
          delete: {
            args: Prisma.ExamBoardDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamBoardPayload>
          }
          update: {
            args: Prisma.ExamBoardUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamBoardPayload>
          }
          deleteMany: {
            args: Prisma.ExamBoardDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExamBoardUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ExamBoardUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamBoardPayload>[]
          }
          upsert: {
            args: Prisma.ExamBoardUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamBoardPayload>
          }
          aggregate: {
            args: Prisma.ExamBoardAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExamBoard>
          }
          groupBy: {
            args: Prisma.ExamBoardGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExamBoardGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExamBoardCountArgs<ExtArgs>
            result: $Utils.Optional<ExamBoardCountAggregateOutputType> | number
          }
        }
      }
      ExamEdition: {
        payload: Prisma.$ExamEditionPayload<ExtArgs>
        fields: Prisma.ExamEditionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExamEditionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamEditionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExamEditionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamEditionPayload>
          }
          findFirst: {
            args: Prisma.ExamEditionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamEditionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExamEditionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamEditionPayload>
          }
          findMany: {
            args: Prisma.ExamEditionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamEditionPayload>[]
          }
          create: {
            args: Prisma.ExamEditionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamEditionPayload>
          }
          createMany: {
            args: Prisma.ExamEditionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ExamEditionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamEditionPayload>[]
          }
          delete: {
            args: Prisma.ExamEditionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamEditionPayload>
          }
          update: {
            args: Prisma.ExamEditionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamEditionPayload>
          }
          deleteMany: {
            args: Prisma.ExamEditionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExamEditionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ExamEditionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamEditionPayload>[]
          }
          upsert: {
            args: Prisma.ExamEditionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamEditionPayload>
          }
          aggregate: {
            args: Prisma.ExamEditionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExamEdition>
          }
          groupBy: {
            args: Prisma.ExamEditionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExamEditionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExamEditionCountArgs<ExtArgs>
            result: $Utils.Optional<ExamEditionCountAggregateOutputType> | number
          }
        }
      }
      ExamPhase: {
        payload: Prisma.$ExamPhasePayload<ExtArgs>
        fields: Prisma.ExamPhaseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExamPhaseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamPhasePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExamPhaseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamPhasePayload>
          }
          findFirst: {
            args: Prisma.ExamPhaseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamPhasePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExamPhaseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamPhasePayload>
          }
          findMany: {
            args: Prisma.ExamPhaseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamPhasePayload>[]
          }
          create: {
            args: Prisma.ExamPhaseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamPhasePayload>
          }
          createMany: {
            args: Prisma.ExamPhaseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ExamPhaseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamPhasePayload>[]
          }
          delete: {
            args: Prisma.ExamPhaseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamPhasePayload>
          }
          update: {
            args: Prisma.ExamPhaseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamPhasePayload>
          }
          deleteMany: {
            args: Prisma.ExamPhaseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExamPhaseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ExamPhaseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamPhasePayload>[]
          }
          upsert: {
            args: Prisma.ExamPhaseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExamPhasePayload>
          }
          aggregate: {
            args: Prisma.ExamPhaseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExamPhase>
          }
          groupBy: {
            args: Prisma.ExamPhaseGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExamPhaseGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExamPhaseCountArgs<ExtArgs>
            result: $Utils.Optional<ExamPhaseCountAggregateOutputType> | number
          }
        }
      }
      Subject: {
        payload: Prisma.$SubjectPayload<ExtArgs>
        fields: Prisma.SubjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          findFirst: {
            args: Prisma.SubjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          findMany: {
            args: Prisma.SubjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>[]
          }
          create: {
            args: Prisma.SubjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          createMany: {
            args: Prisma.SubjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubjectCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>[]
          }
          delete: {
            args: Prisma.SubjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          update: {
            args: Prisma.SubjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          deleteMany: {
            args: Prisma.SubjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SubjectUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>[]
          }
          upsert: {
            args: Prisma.SubjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          aggregate: {
            args: Prisma.SubjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubject>
          }
          groupBy: {
            args: Prisma.SubjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubjectCountArgs<ExtArgs>
            result: $Utils.Optional<SubjectCountAggregateOutputType> | number
          }
        }
      }
      Skill: {
        payload: Prisma.$SkillPayload<ExtArgs>
        fields: Prisma.SkillFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SkillFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SkillFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          findFirst: {
            args: Prisma.SkillFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SkillFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          findMany: {
            args: Prisma.SkillFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>[]
          }
          create: {
            args: Prisma.SkillCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          createMany: {
            args: Prisma.SkillCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SkillCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>[]
          }
          delete: {
            args: Prisma.SkillDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          update: {
            args: Prisma.SkillUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          deleteMany: {
            args: Prisma.SkillDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SkillUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SkillUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>[]
          }
          upsert: {
            args: Prisma.SkillUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          aggregate: {
            args: Prisma.SkillAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSkill>
          }
          groupBy: {
            args: Prisma.SkillGroupByArgs<ExtArgs>
            result: $Utils.Optional<SkillGroupByOutputType>[]
          }
          count: {
            args: Prisma.SkillCountArgs<ExtArgs>
            result: $Utils.Optional<SkillCountAggregateOutputType> | number
          }
        }
      }
      Stimulus: {
        payload: Prisma.$StimulusPayload<ExtArgs>
        fields: Prisma.StimulusFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StimulusFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StimulusPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StimulusFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StimulusPayload>
          }
          findFirst: {
            args: Prisma.StimulusFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StimulusPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StimulusFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StimulusPayload>
          }
          findMany: {
            args: Prisma.StimulusFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StimulusPayload>[]
          }
          create: {
            args: Prisma.StimulusCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StimulusPayload>
          }
          createMany: {
            args: Prisma.StimulusCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StimulusCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StimulusPayload>[]
          }
          delete: {
            args: Prisma.StimulusDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StimulusPayload>
          }
          update: {
            args: Prisma.StimulusUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StimulusPayload>
          }
          deleteMany: {
            args: Prisma.StimulusDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StimulusUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StimulusUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StimulusPayload>[]
          }
          upsert: {
            args: Prisma.StimulusUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StimulusPayload>
          }
          aggregate: {
            args: Prisma.StimulusAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStimulus>
          }
          groupBy: {
            args: Prisma.StimulusGroupByArgs<ExtArgs>
            result: $Utils.Optional<StimulusGroupByOutputType>[]
          }
          count: {
            args: Prisma.StimulusCountArgs<ExtArgs>
            result: $Utils.Optional<StimulusCountAggregateOutputType> | number
          }
        }
      }
      StimulusAsset: {
        payload: Prisma.$StimulusAssetPayload<ExtArgs>
        fields: Prisma.StimulusAssetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StimulusAssetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StimulusAssetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StimulusAssetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StimulusAssetPayload>
          }
          findFirst: {
            args: Prisma.StimulusAssetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StimulusAssetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StimulusAssetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StimulusAssetPayload>
          }
          findMany: {
            args: Prisma.StimulusAssetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StimulusAssetPayload>[]
          }
          create: {
            args: Prisma.StimulusAssetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StimulusAssetPayload>
          }
          createMany: {
            args: Prisma.StimulusAssetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StimulusAssetCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StimulusAssetPayload>[]
          }
          delete: {
            args: Prisma.StimulusAssetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StimulusAssetPayload>
          }
          update: {
            args: Prisma.StimulusAssetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StimulusAssetPayload>
          }
          deleteMany: {
            args: Prisma.StimulusAssetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StimulusAssetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StimulusAssetUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StimulusAssetPayload>[]
          }
          upsert: {
            args: Prisma.StimulusAssetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StimulusAssetPayload>
          }
          aggregate: {
            args: Prisma.StimulusAssetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStimulusAsset>
          }
          groupBy: {
            args: Prisma.StimulusAssetGroupByArgs<ExtArgs>
            result: $Utils.Optional<StimulusAssetGroupByOutputType>[]
          }
          count: {
            args: Prisma.StimulusAssetCountArgs<ExtArgs>
            result: $Utils.Optional<StimulusAssetCountAggregateOutputType> | number
          }
        }
      }
      Question: {
        payload: Prisma.$QuestionPayload<ExtArgs>
        fields: Prisma.QuestionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          findFirst: {
            args: Prisma.QuestionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          findMany: {
            args: Prisma.QuestionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>[]
          }
          create: {
            args: Prisma.QuestionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          createMany: {
            args: Prisma.QuestionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuestionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>[]
          }
          delete: {
            args: Prisma.QuestionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          update: {
            args: Prisma.QuestionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          deleteMany: {
            args: Prisma.QuestionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QuestionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>[]
          }
          upsert: {
            args: Prisma.QuestionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          aggregate: {
            args: Prisma.QuestionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestion>
          }
          groupBy: {
            args: Prisma.QuestionGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionCountAggregateOutputType> | number
          }
        }
      }
      QuestionSubject: {
        payload: Prisma.$QuestionSubjectPayload<ExtArgs>
        fields: Prisma.QuestionSubjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionSubjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSubjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionSubjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSubjectPayload>
          }
          findFirst: {
            args: Prisma.QuestionSubjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSubjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionSubjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSubjectPayload>
          }
          findMany: {
            args: Prisma.QuestionSubjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSubjectPayload>[]
          }
          create: {
            args: Prisma.QuestionSubjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSubjectPayload>
          }
          createMany: {
            args: Prisma.QuestionSubjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuestionSubjectCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSubjectPayload>[]
          }
          delete: {
            args: Prisma.QuestionSubjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSubjectPayload>
          }
          update: {
            args: Prisma.QuestionSubjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSubjectPayload>
          }
          deleteMany: {
            args: Prisma.QuestionSubjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionSubjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QuestionSubjectUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSubjectPayload>[]
          }
          upsert: {
            args: Prisma.QuestionSubjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSubjectPayload>
          }
          aggregate: {
            args: Prisma.QuestionSubjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestionSubject>
          }
          groupBy: {
            args: Prisma.QuestionSubjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionSubjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionSubjectCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionSubjectCountAggregateOutputType> | number
          }
        }
      }
      QuestionSkill: {
        payload: Prisma.$QuestionSkillPayload<ExtArgs>
        fields: Prisma.QuestionSkillFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionSkillFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSkillPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionSkillFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSkillPayload>
          }
          findFirst: {
            args: Prisma.QuestionSkillFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSkillPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionSkillFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSkillPayload>
          }
          findMany: {
            args: Prisma.QuestionSkillFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSkillPayload>[]
          }
          create: {
            args: Prisma.QuestionSkillCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSkillPayload>
          }
          createMany: {
            args: Prisma.QuestionSkillCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuestionSkillCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSkillPayload>[]
          }
          delete: {
            args: Prisma.QuestionSkillDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSkillPayload>
          }
          update: {
            args: Prisma.QuestionSkillUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSkillPayload>
          }
          deleteMany: {
            args: Prisma.QuestionSkillDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionSkillUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QuestionSkillUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSkillPayload>[]
          }
          upsert: {
            args: Prisma.QuestionSkillUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSkillPayload>
          }
          aggregate: {
            args: Prisma.QuestionSkillAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestionSkill>
          }
          groupBy: {
            args: Prisma.QuestionSkillGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionSkillGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionSkillCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionSkillCountAggregateOutputType> | number
          }
        }
      }
      McqItem: {
        payload: Prisma.$McqItemPayload<ExtArgs>
        fields: Prisma.McqItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.McqItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$McqItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.McqItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$McqItemPayload>
          }
          findFirst: {
            args: Prisma.McqItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$McqItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.McqItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$McqItemPayload>
          }
          findMany: {
            args: Prisma.McqItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$McqItemPayload>[]
          }
          create: {
            args: Prisma.McqItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$McqItemPayload>
          }
          createMany: {
            args: Prisma.McqItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.McqItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$McqItemPayload>[]
          }
          delete: {
            args: Prisma.McqItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$McqItemPayload>
          }
          update: {
            args: Prisma.McqItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$McqItemPayload>
          }
          deleteMany: {
            args: Prisma.McqItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.McqItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.McqItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$McqItemPayload>[]
          }
          upsert: {
            args: Prisma.McqItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$McqItemPayload>
          }
          aggregate: {
            args: Prisma.McqItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMcqItem>
          }
          groupBy: {
            args: Prisma.McqItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<McqItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.McqItemCountArgs<ExtArgs>
            result: $Utils.Optional<McqItemCountAggregateOutputType> | number
          }
        }
      }
      McqOption: {
        payload: Prisma.$McqOptionPayload<ExtArgs>
        fields: Prisma.McqOptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.McqOptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$McqOptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.McqOptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$McqOptionPayload>
          }
          findFirst: {
            args: Prisma.McqOptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$McqOptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.McqOptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$McqOptionPayload>
          }
          findMany: {
            args: Prisma.McqOptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$McqOptionPayload>[]
          }
          create: {
            args: Prisma.McqOptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$McqOptionPayload>
          }
          createMany: {
            args: Prisma.McqOptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.McqOptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$McqOptionPayload>[]
          }
          delete: {
            args: Prisma.McqOptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$McqOptionPayload>
          }
          update: {
            args: Prisma.McqOptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$McqOptionPayload>
          }
          deleteMany: {
            args: Prisma.McqOptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.McqOptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.McqOptionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$McqOptionPayload>[]
          }
          upsert: {
            args: Prisma.McqOptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$McqOptionPayload>
          }
          aggregate: {
            args: Prisma.McqOptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMcqOption>
          }
          groupBy: {
            args: Prisma.McqOptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<McqOptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.McqOptionCountArgs<ExtArgs>
            result: $Utils.Optional<McqOptionCountAggregateOutputType> | number
          }
        }
      }
      FrItem: {
        payload: Prisma.$FrItemPayload<ExtArgs>
        fields: Prisma.FrItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FrItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FrItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrItemPayload>
          }
          findFirst: {
            args: Prisma.FrItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FrItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrItemPayload>
          }
          findMany: {
            args: Prisma.FrItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrItemPayload>[]
          }
          create: {
            args: Prisma.FrItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrItemPayload>
          }
          createMany: {
            args: Prisma.FrItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FrItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrItemPayload>[]
          }
          delete: {
            args: Prisma.FrItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrItemPayload>
          }
          update: {
            args: Prisma.FrItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrItemPayload>
          }
          deleteMany: {
            args: Prisma.FrItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FrItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FrItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrItemPayload>[]
          }
          upsert: {
            args: Prisma.FrItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrItemPayload>
          }
          aggregate: {
            args: Prisma.FrItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFrItem>
          }
          groupBy: {
            args: Prisma.FrItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<FrItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.FrItemCountArgs<ExtArgs>
            result: $Utils.Optional<FrItemCountAggregateOutputType> | number
          }
        }
      }
      FrAnswerExpected: {
        payload: Prisma.$FrAnswerExpectedPayload<ExtArgs>
        fields: Prisma.FrAnswerExpectedFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FrAnswerExpectedFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrAnswerExpectedPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FrAnswerExpectedFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrAnswerExpectedPayload>
          }
          findFirst: {
            args: Prisma.FrAnswerExpectedFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrAnswerExpectedPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FrAnswerExpectedFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrAnswerExpectedPayload>
          }
          findMany: {
            args: Prisma.FrAnswerExpectedFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrAnswerExpectedPayload>[]
          }
          create: {
            args: Prisma.FrAnswerExpectedCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrAnswerExpectedPayload>
          }
          createMany: {
            args: Prisma.FrAnswerExpectedCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FrAnswerExpectedCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrAnswerExpectedPayload>[]
          }
          delete: {
            args: Prisma.FrAnswerExpectedDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrAnswerExpectedPayload>
          }
          update: {
            args: Prisma.FrAnswerExpectedUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrAnswerExpectedPayload>
          }
          deleteMany: {
            args: Prisma.FrAnswerExpectedDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FrAnswerExpectedUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FrAnswerExpectedUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrAnswerExpectedPayload>[]
          }
          upsert: {
            args: Prisma.FrAnswerExpectedUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrAnswerExpectedPayload>
          }
          aggregate: {
            args: Prisma.FrAnswerExpectedAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFrAnswerExpected>
          }
          groupBy: {
            args: Prisma.FrAnswerExpectedGroupByArgs<ExtArgs>
            result: $Utils.Optional<FrAnswerExpectedGroupByOutputType>[]
          }
          count: {
            args: Prisma.FrAnswerExpectedCountArgs<ExtArgs>
            result: $Utils.Optional<FrAnswerExpectedCountAggregateOutputType> | number
          }
        }
      }
      FrRubric: {
        payload: Prisma.$FrRubricPayload<ExtArgs>
        fields: Prisma.FrRubricFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FrRubricFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrRubricPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FrRubricFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrRubricPayload>
          }
          findFirst: {
            args: Prisma.FrRubricFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrRubricPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FrRubricFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrRubricPayload>
          }
          findMany: {
            args: Prisma.FrRubricFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrRubricPayload>[]
          }
          create: {
            args: Prisma.FrRubricCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrRubricPayload>
          }
          createMany: {
            args: Prisma.FrRubricCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FrRubricCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrRubricPayload>[]
          }
          delete: {
            args: Prisma.FrRubricDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrRubricPayload>
          }
          update: {
            args: Prisma.FrRubricUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrRubricPayload>
          }
          deleteMany: {
            args: Prisma.FrRubricDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FrRubricUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FrRubricUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrRubricPayload>[]
          }
          upsert: {
            args: Prisma.FrRubricUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FrRubricPayload>
          }
          aggregate: {
            args: Prisma.FrRubricAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFrRubric>
          }
          groupBy: {
            args: Prisma.FrRubricGroupByArgs<ExtArgs>
            result: $Utils.Optional<FrRubricGroupByOutputType>[]
          }
          count: {
            args: Prisma.FrRubricCountArgs<ExtArgs>
            result: $Utils.Optional<FrRubricCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AccountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Verification: {
        payload: Prisma.$VerificationPayload<ExtArgs>
        fields: Prisma.VerificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VerificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          findFirst: {
            args: Prisma.VerificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          findMany: {
            args: Prisma.VerificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>[]
          }
          create: {
            args: Prisma.VerificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          createMany: {
            args: Prisma.VerificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VerificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>[]
          }
          delete: {
            args: Prisma.VerificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          update: {
            args: Prisma.VerificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          deleteMany: {
            args: Prisma.VerificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VerificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>[]
          }
          upsert: {
            args: Prisma.VerificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          aggregate: {
            args: Prisma.VerificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVerification>
          }
          groupBy: {
            args: Prisma.VerificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<VerificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationCountArgs<ExtArgs>
            result: $Utils.Optional<VerificationCountAggregateOutputType> | number
          }
        }
      }
      Role: {
        payload: Prisma.$RolePayload<ExtArgs>
        fields: Prisma.RoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findFirst: {
            args: Prisma.RoleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findMany: {
            args: Prisma.RoleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          create: {
            args: Prisma.RoleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          createMany: {
            args: Prisma.RoleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RoleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          delete: {
            args: Prisma.RoleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          update: {
            args: Prisma.RoleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          deleteMany: {
            args: Prisma.RoleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RoleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          upsert: {
            args: Prisma.RoleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          aggregate: {
            args: Prisma.RoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRole>
          }
          groupBy: {
            args: Prisma.RoleGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoleCountArgs<ExtArgs>
            result: $Utils.Optional<RoleCountAggregateOutputType> | number
          }
        }
      }
      Permission: {
        payload: Prisma.$PermissionPayload<ExtArgs>
        fields: Prisma.PermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PermissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PermissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          findFirst: {
            args: Prisma.PermissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PermissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          findMany: {
            args: Prisma.PermissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>[]
          }
          create: {
            args: Prisma.PermissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          createMany: {
            args: Prisma.PermissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PermissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>[]
          }
          delete: {
            args: Prisma.PermissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          update: {
            args: Prisma.PermissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          deleteMany: {
            args: Prisma.PermissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PermissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PermissionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>[]
          }
          upsert: {
            args: Prisma.PermissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          aggregate: {
            args: Prisma.PermissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePermission>
          }
          groupBy: {
            args: Prisma.PermissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PermissionCountArgs<ExtArgs>
            result: $Utils.Optional<PermissionCountAggregateOutputType> | number
          }
        }
      }
      RolePermission: {
        payload: Prisma.$RolePermissionPayload<ExtArgs>
        fields: Prisma.RolePermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RolePermissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RolePermissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          findFirst: {
            args: Prisma.RolePermissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RolePermissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          findMany: {
            args: Prisma.RolePermissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>[]
          }
          create: {
            args: Prisma.RolePermissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          createMany: {
            args: Prisma.RolePermissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RolePermissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>[]
          }
          delete: {
            args: Prisma.RolePermissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          update: {
            args: Prisma.RolePermissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          deleteMany: {
            args: Prisma.RolePermissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RolePermissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RolePermissionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>[]
          }
          upsert: {
            args: Prisma.RolePermissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          aggregate: {
            args: Prisma.RolePermissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRolePermission>
          }
          groupBy: {
            args: Prisma.RolePermissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<RolePermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.RolePermissionCountArgs<ExtArgs>
            result: $Utils.Optional<RolePermissionCountAggregateOutputType> | number
          }
        }
      }
      UserRole: {
        payload: Prisma.$UserRolePayload<ExtArgs>
        fields: Prisma.UserRoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserRoleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserRoleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          findFirst: {
            args: Prisma.UserRoleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserRoleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          findMany: {
            args: Prisma.UserRoleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>[]
          }
          create: {
            args: Prisma.UserRoleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          createMany: {
            args: Prisma.UserRoleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserRoleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>[]
          }
          delete: {
            args: Prisma.UserRoleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          update: {
            args: Prisma.UserRoleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          deleteMany: {
            args: Prisma.UserRoleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserRoleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserRoleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>[]
          }
          upsert: {
            args: Prisma.UserRoleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          aggregate: {
            args: Prisma.UserRoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserRole>
          }
          groupBy: {
            args: Prisma.UserRoleGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserRoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserRoleCountArgs<ExtArgs>
            result: $Utils.Optional<UserRoleCountAggregateOutputType> | number
          }
        }
      }
      UserPermission: {
        payload: Prisma.$UserPermissionPayload<ExtArgs>
        fields: Prisma.UserPermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserPermissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserPermissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          findFirst: {
            args: Prisma.UserPermissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserPermissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          findMany: {
            args: Prisma.UserPermissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>[]
          }
          create: {
            args: Prisma.UserPermissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          createMany: {
            args: Prisma.UserPermissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserPermissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>[]
          }
          delete: {
            args: Prisma.UserPermissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          update: {
            args: Prisma.UserPermissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          deleteMany: {
            args: Prisma.UserPermissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserPermissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserPermissionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>[]
          }
          upsert: {
            args: Prisma.UserPermissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          aggregate: {
            args: Prisma.UserPermissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserPermission>
          }
          groupBy: {
            args: Prisma.UserPermissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserPermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserPermissionCountArgs<ExtArgs>
            result: $Utils.Optional<UserPermissionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    examBoard?: ExamBoardOmit
    examEdition?: ExamEditionOmit
    examPhase?: ExamPhaseOmit
    subject?: SubjectOmit
    skill?: SkillOmit
    stimulus?: StimulusOmit
    stimulusAsset?: StimulusAssetOmit
    question?: QuestionOmit
    questionSubject?: QuestionSubjectOmit
    questionSkill?: QuestionSkillOmit
    mcqItem?: McqItemOmit
    mcqOption?: McqOptionOmit
    frItem?: FrItemOmit
    frAnswerExpected?: FrAnswerExpectedOmit
    frRubric?: FrRubricOmit
    user?: UserOmit
    session?: SessionOmit
    account?: AccountOmit
    verification?: VerificationOmit
    role?: RoleOmit
    permission?: PermissionOmit
    rolePermission?: RolePermissionOmit
    userRole?: UserRoleOmit
    userPermission?: UserPermissionOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ExamBoardCountOutputType
   */

  export type ExamBoardCountOutputType = {
    editions: number
  }

  export type ExamBoardCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    editions?: boolean | ExamBoardCountOutputTypeCountEditionsArgs
  }

  // Custom InputTypes
  /**
   * ExamBoardCountOutputType without action
   */
  export type ExamBoardCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamBoardCountOutputType
     */
    select?: ExamBoardCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ExamBoardCountOutputType without action
   */
  export type ExamBoardCountOutputTypeCountEditionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExamEditionWhereInput
  }


  /**
   * Count Type ExamEditionCountOutputType
   */

  export type ExamEditionCountOutputType = {
    phases: number
  }

  export type ExamEditionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    phases?: boolean | ExamEditionCountOutputTypeCountPhasesArgs
  }

  // Custom InputTypes
  /**
   * ExamEditionCountOutputType without action
   */
  export type ExamEditionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamEditionCountOutputType
     */
    select?: ExamEditionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ExamEditionCountOutputType without action
   */
  export type ExamEditionCountOutputTypeCountPhasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExamPhaseWhereInput
  }


  /**
   * Count Type ExamPhaseCountOutputType
   */

  export type ExamPhaseCountOutputType = {
    questions: number
  }

  export type ExamPhaseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questions?: boolean | ExamPhaseCountOutputTypeCountQuestionsArgs
  }

  // Custom InputTypes
  /**
   * ExamPhaseCountOutputType without action
   */
  export type ExamPhaseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamPhaseCountOutputType
     */
    select?: ExamPhaseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ExamPhaseCountOutputType without action
   */
  export type ExamPhaseCountOutputTypeCountQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionWhereInput
  }


  /**
   * Count Type SubjectCountOutputType
   */

  export type SubjectCountOutputType = {
    questions: number
  }

  export type SubjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questions?: boolean | SubjectCountOutputTypeCountQuestionsArgs
  }

  // Custom InputTypes
  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectCountOutputType
     */
    select?: SubjectCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeCountQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionSubjectWhereInput
  }


  /**
   * Count Type SkillCountOutputType
   */

  export type SkillCountOutputType = {
    questions: number
  }

  export type SkillCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questions?: boolean | SkillCountOutputTypeCountQuestionsArgs
  }

  // Custom InputTypes
  /**
   * SkillCountOutputType without action
   */
  export type SkillCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillCountOutputType
     */
    select?: SkillCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SkillCountOutputType without action
   */
  export type SkillCountOutputTypeCountQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionSkillWhereInput
  }


  /**
   * Count Type StimulusCountOutputType
   */

  export type StimulusCountOutputType = {
    assets: number
    questions: number
  }

  export type StimulusCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assets?: boolean | StimulusCountOutputTypeCountAssetsArgs
    questions?: boolean | StimulusCountOutputTypeCountQuestionsArgs
  }

  // Custom InputTypes
  /**
   * StimulusCountOutputType without action
   */
  export type StimulusCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StimulusCountOutputType
     */
    select?: StimulusCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StimulusCountOutputType without action
   */
  export type StimulusCountOutputTypeCountAssetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StimulusAssetWhereInput
  }

  /**
   * StimulusCountOutputType without action
   */
  export type StimulusCountOutputTypeCountQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionWhereInput
  }


  /**
   * Count Type QuestionCountOutputType
   */

  export type QuestionCountOutputType = {
    subjects: number
    skills: number
  }

  export type QuestionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subjects?: boolean | QuestionCountOutputTypeCountSubjectsArgs
    skills?: boolean | QuestionCountOutputTypeCountSkillsArgs
  }

  // Custom InputTypes
  /**
   * QuestionCountOutputType without action
   */
  export type QuestionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionCountOutputType
     */
    select?: QuestionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * QuestionCountOutputType without action
   */
  export type QuestionCountOutputTypeCountSubjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionSubjectWhereInput
  }

  /**
   * QuestionCountOutputType without action
   */
  export type QuestionCountOutputTypeCountSkillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionSkillWhereInput
  }


  /**
   * Count Type McqItemCountOutputType
   */

  export type McqItemCountOutputType = {
    options: number
  }

  export type McqItemCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    options?: boolean | McqItemCountOutputTypeCountOptionsArgs
  }

  // Custom InputTypes
  /**
   * McqItemCountOutputType without action
   */
  export type McqItemCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the McqItemCountOutputType
     */
    select?: McqItemCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * McqItemCountOutputType without action
   */
  export type McqItemCountOutputTypeCountOptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: McqOptionWhereInput
  }


  /**
   * Count Type FrItemCountOutputType
   */

  export type FrItemCountOutputType = {
    rubrics: number
    expectedAnswers: number
  }

  export type FrItemCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rubrics?: boolean | FrItemCountOutputTypeCountRubricsArgs
    expectedAnswers?: boolean | FrItemCountOutputTypeCountExpectedAnswersArgs
  }

  // Custom InputTypes
  /**
   * FrItemCountOutputType without action
   */
  export type FrItemCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrItemCountOutputType
     */
    select?: FrItemCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FrItemCountOutputType without action
   */
  export type FrItemCountOutputTypeCountRubricsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FrRubricWhereInput
  }

  /**
   * FrItemCountOutputType without action
   */
  export type FrItemCountOutputTypeCountExpectedAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FrAnswerExpectedWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    sessions: number
    accounts: number
    roles: number
    directPerms: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
    roles?: boolean | UserCountOutputTypeCountRolesArgs
    directPerms?: boolean | UserCountOutputTypeCountDirectPermsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRoleWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDirectPermsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPermissionWhereInput
  }


  /**
   * Count Type RoleCountOutputType
   */

  export type RoleCountOutputType = {
    users: number
    perms: number
  }

  export type RoleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | RoleCountOutputTypeCountUsersArgs
    perms?: boolean | RoleCountOutputTypeCountPermsArgs
  }

  // Custom InputTypes
  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleCountOutputType
     */
    select?: RoleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRoleWhereInput
  }

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountPermsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RolePermissionWhereInput
  }


  /**
   * Count Type PermissionCountOutputType
   */

  export type PermissionCountOutputType = {
    roles: number
    users: number
  }

  export type PermissionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roles?: boolean | PermissionCountOutputTypeCountRolesArgs
    users?: boolean | PermissionCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * PermissionCountOutputType without action
   */
  export type PermissionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionCountOutputType
     */
    select?: PermissionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PermissionCountOutputType without action
   */
  export type PermissionCountOutputTypeCountRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RolePermissionWhereInput
  }

  /**
   * PermissionCountOutputType without action
   */
  export type PermissionCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPermissionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model ExamBoard
   */

  export type AggregateExamBoard = {
    _count: ExamBoardCountAggregateOutputType | null
    _avg: ExamBoardAvgAggregateOutputType | null
    _sum: ExamBoardSumAggregateOutputType | null
    _min: ExamBoardMinAggregateOutputType | null
    _max: ExamBoardMaxAggregateOutputType | null
  }

  export type ExamBoardAvgAggregateOutputType = {
    id: number | null
  }

  export type ExamBoardSumAggregateOutputType = {
    id: number | null
  }

  export type ExamBoardMinAggregateOutputType = {
    id: number | null
    slug: string | null
    name: string | null
  }

  export type ExamBoardMaxAggregateOutputType = {
    id: number | null
    slug: string | null
    name: string | null
  }

  export type ExamBoardCountAggregateOutputType = {
    id: number
    slug: number
    name: number
    _all: number
  }


  export type ExamBoardAvgAggregateInputType = {
    id?: true
  }

  export type ExamBoardSumAggregateInputType = {
    id?: true
  }

  export type ExamBoardMinAggregateInputType = {
    id?: true
    slug?: true
    name?: true
  }

  export type ExamBoardMaxAggregateInputType = {
    id?: true
    slug?: true
    name?: true
  }

  export type ExamBoardCountAggregateInputType = {
    id?: true
    slug?: true
    name?: true
    _all?: true
  }

  export type ExamBoardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExamBoard to aggregate.
     */
    where?: ExamBoardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExamBoards to fetch.
     */
    orderBy?: ExamBoardOrderByWithRelationInput | ExamBoardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExamBoardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExamBoards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExamBoards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ExamBoards
    **/
    _count?: true | ExamBoardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExamBoardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExamBoardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExamBoardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExamBoardMaxAggregateInputType
  }

  export type GetExamBoardAggregateType<T extends ExamBoardAggregateArgs> = {
        [P in keyof T & keyof AggregateExamBoard]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExamBoard[P]>
      : GetScalarType<T[P], AggregateExamBoard[P]>
  }




  export type ExamBoardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExamBoardWhereInput
    orderBy?: ExamBoardOrderByWithAggregationInput | ExamBoardOrderByWithAggregationInput[]
    by: ExamBoardScalarFieldEnum[] | ExamBoardScalarFieldEnum
    having?: ExamBoardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExamBoardCountAggregateInputType | true
    _avg?: ExamBoardAvgAggregateInputType
    _sum?: ExamBoardSumAggregateInputType
    _min?: ExamBoardMinAggregateInputType
    _max?: ExamBoardMaxAggregateInputType
  }

  export type ExamBoardGroupByOutputType = {
    id: number
    slug: string
    name: string
    _count: ExamBoardCountAggregateOutputType | null
    _avg: ExamBoardAvgAggregateOutputType | null
    _sum: ExamBoardSumAggregateOutputType | null
    _min: ExamBoardMinAggregateOutputType | null
    _max: ExamBoardMaxAggregateOutputType | null
  }

  type GetExamBoardGroupByPayload<T extends ExamBoardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExamBoardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExamBoardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExamBoardGroupByOutputType[P]>
            : GetScalarType<T[P], ExamBoardGroupByOutputType[P]>
        }
      >
    >


  export type ExamBoardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    slug?: boolean
    name?: boolean
    editions?: boolean | ExamBoard$editionsArgs<ExtArgs>
    _count?: boolean | ExamBoardCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["examBoard"]>

  export type ExamBoardSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    slug?: boolean
    name?: boolean
  }, ExtArgs["result"]["examBoard"]>

  export type ExamBoardSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    slug?: boolean
    name?: boolean
  }, ExtArgs["result"]["examBoard"]>

  export type ExamBoardSelectScalar = {
    id?: boolean
    slug?: boolean
    name?: boolean
  }

  export type ExamBoardOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "slug" | "name", ExtArgs["result"]["examBoard"]>
  export type ExamBoardInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    editions?: boolean | ExamBoard$editionsArgs<ExtArgs>
    _count?: boolean | ExamBoardCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ExamBoardIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ExamBoardIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ExamBoardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ExamBoard"
    objects: {
      editions: Prisma.$ExamEditionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      slug: string
      name: string
    }, ExtArgs["result"]["examBoard"]>
    composites: {}
  }

  type ExamBoardGetPayload<S extends boolean | null | undefined | ExamBoardDefaultArgs> = $Result.GetResult<Prisma.$ExamBoardPayload, S>

  type ExamBoardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ExamBoardFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ExamBoardCountAggregateInputType | true
    }

  export interface ExamBoardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ExamBoard'], meta: { name: 'ExamBoard' } }
    /**
     * Find zero or one ExamBoard that matches the filter.
     * @param {ExamBoardFindUniqueArgs} args - Arguments to find a ExamBoard
     * @example
     * // Get one ExamBoard
     * const examBoard = await prisma.examBoard.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExamBoardFindUniqueArgs>(args: SelectSubset<T, ExamBoardFindUniqueArgs<ExtArgs>>): Prisma__ExamBoardClient<$Result.GetResult<Prisma.$ExamBoardPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ExamBoard that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ExamBoardFindUniqueOrThrowArgs} args - Arguments to find a ExamBoard
     * @example
     * // Get one ExamBoard
     * const examBoard = await prisma.examBoard.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExamBoardFindUniqueOrThrowArgs>(args: SelectSubset<T, ExamBoardFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExamBoardClient<$Result.GetResult<Prisma.$ExamBoardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ExamBoard that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamBoardFindFirstArgs} args - Arguments to find a ExamBoard
     * @example
     * // Get one ExamBoard
     * const examBoard = await prisma.examBoard.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExamBoardFindFirstArgs>(args?: SelectSubset<T, ExamBoardFindFirstArgs<ExtArgs>>): Prisma__ExamBoardClient<$Result.GetResult<Prisma.$ExamBoardPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ExamBoard that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamBoardFindFirstOrThrowArgs} args - Arguments to find a ExamBoard
     * @example
     * // Get one ExamBoard
     * const examBoard = await prisma.examBoard.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExamBoardFindFirstOrThrowArgs>(args?: SelectSubset<T, ExamBoardFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExamBoardClient<$Result.GetResult<Prisma.$ExamBoardPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ExamBoards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamBoardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ExamBoards
     * const examBoards = await prisma.examBoard.findMany()
     * 
     * // Get first 10 ExamBoards
     * const examBoards = await prisma.examBoard.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const examBoardWithIdOnly = await prisma.examBoard.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExamBoardFindManyArgs>(args?: SelectSubset<T, ExamBoardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamBoardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ExamBoard.
     * @param {ExamBoardCreateArgs} args - Arguments to create a ExamBoard.
     * @example
     * // Create one ExamBoard
     * const ExamBoard = await prisma.examBoard.create({
     *   data: {
     *     // ... data to create a ExamBoard
     *   }
     * })
     * 
     */
    create<T extends ExamBoardCreateArgs>(args: SelectSubset<T, ExamBoardCreateArgs<ExtArgs>>): Prisma__ExamBoardClient<$Result.GetResult<Prisma.$ExamBoardPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ExamBoards.
     * @param {ExamBoardCreateManyArgs} args - Arguments to create many ExamBoards.
     * @example
     * // Create many ExamBoards
     * const examBoard = await prisma.examBoard.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExamBoardCreateManyArgs>(args?: SelectSubset<T, ExamBoardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ExamBoards and returns the data saved in the database.
     * @param {ExamBoardCreateManyAndReturnArgs} args - Arguments to create many ExamBoards.
     * @example
     * // Create many ExamBoards
     * const examBoard = await prisma.examBoard.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ExamBoards and only return the `id`
     * const examBoardWithIdOnly = await prisma.examBoard.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ExamBoardCreateManyAndReturnArgs>(args?: SelectSubset<T, ExamBoardCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamBoardPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ExamBoard.
     * @param {ExamBoardDeleteArgs} args - Arguments to delete one ExamBoard.
     * @example
     * // Delete one ExamBoard
     * const ExamBoard = await prisma.examBoard.delete({
     *   where: {
     *     // ... filter to delete one ExamBoard
     *   }
     * })
     * 
     */
    delete<T extends ExamBoardDeleteArgs>(args: SelectSubset<T, ExamBoardDeleteArgs<ExtArgs>>): Prisma__ExamBoardClient<$Result.GetResult<Prisma.$ExamBoardPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ExamBoard.
     * @param {ExamBoardUpdateArgs} args - Arguments to update one ExamBoard.
     * @example
     * // Update one ExamBoard
     * const examBoard = await prisma.examBoard.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExamBoardUpdateArgs>(args: SelectSubset<T, ExamBoardUpdateArgs<ExtArgs>>): Prisma__ExamBoardClient<$Result.GetResult<Prisma.$ExamBoardPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ExamBoards.
     * @param {ExamBoardDeleteManyArgs} args - Arguments to filter ExamBoards to delete.
     * @example
     * // Delete a few ExamBoards
     * const { count } = await prisma.examBoard.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExamBoardDeleteManyArgs>(args?: SelectSubset<T, ExamBoardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExamBoards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamBoardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ExamBoards
     * const examBoard = await prisma.examBoard.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExamBoardUpdateManyArgs>(args: SelectSubset<T, ExamBoardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExamBoards and returns the data updated in the database.
     * @param {ExamBoardUpdateManyAndReturnArgs} args - Arguments to update many ExamBoards.
     * @example
     * // Update many ExamBoards
     * const examBoard = await prisma.examBoard.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ExamBoards and only return the `id`
     * const examBoardWithIdOnly = await prisma.examBoard.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ExamBoardUpdateManyAndReturnArgs>(args: SelectSubset<T, ExamBoardUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamBoardPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ExamBoard.
     * @param {ExamBoardUpsertArgs} args - Arguments to update or create a ExamBoard.
     * @example
     * // Update or create a ExamBoard
     * const examBoard = await prisma.examBoard.upsert({
     *   create: {
     *     // ... data to create a ExamBoard
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ExamBoard we want to update
     *   }
     * })
     */
    upsert<T extends ExamBoardUpsertArgs>(args: SelectSubset<T, ExamBoardUpsertArgs<ExtArgs>>): Prisma__ExamBoardClient<$Result.GetResult<Prisma.$ExamBoardPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ExamBoards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamBoardCountArgs} args - Arguments to filter ExamBoards to count.
     * @example
     * // Count the number of ExamBoards
     * const count = await prisma.examBoard.count({
     *   where: {
     *     // ... the filter for the ExamBoards we want to count
     *   }
     * })
    **/
    count<T extends ExamBoardCountArgs>(
      args?: Subset<T, ExamBoardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExamBoardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ExamBoard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamBoardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExamBoardAggregateArgs>(args: Subset<T, ExamBoardAggregateArgs>): Prisma.PrismaPromise<GetExamBoardAggregateType<T>>

    /**
     * Group by ExamBoard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamBoardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExamBoardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExamBoardGroupByArgs['orderBy'] }
        : { orderBy?: ExamBoardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExamBoardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExamBoardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ExamBoard model
   */
  readonly fields: ExamBoardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ExamBoard.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExamBoardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    editions<T extends ExamBoard$editionsArgs<ExtArgs> = {}>(args?: Subset<T, ExamBoard$editionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamEditionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ExamBoard model
   */
  interface ExamBoardFieldRefs {
    readonly id: FieldRef<"ExamBoard", 'Int'>
    readonly slug: FieldRef<"ExamBoard", 'String'>
    readonly name: FieldRef<"ExamBoard", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ExamBoard findUnique
   */
  export type ExamBoardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamBoard
     */
    select?: ExamBoardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamBoard
     */
    omit?: ExamBoardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamBoardInclude<ExtArgs> | null
    /**
     * Filter, which ExamBoard to fetch.
     */
    where: ExamBoardWhereUniqueInput
  }

  /**
   * ExamBoard findUniqueOrThrow
   */
  export type ExamBoardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamBoard
     */
    select?: ExamBoardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamBoard
     */
    omit?: ExamBoardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamBoardInclude<ExtArgs> | null
    /**
     * Filter, which ExamBoard to fetch.
     */
    where: ExamBoardWhereUniqueInput
  }

  /**
   * ExamBoard findFirst
   */
  export type ExamBoardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamBoard
     */
    select?: ExamBoardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamBoard
     */
    omit?: ExamBoardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamBoardInclude<ExtArgs> | null
    /**
     * Filter, which ExamBoard to fetch.
     */
    where?: ExamBoardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExamBoards to fetch.
     */
    orderBy?: ExamBoardOrderByWithRelationInput | ExamBoardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExamBoards.
     */
    cursor?: ExamBoardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExamBoards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExamBoards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExamBoards.
     */
    distinct?: ExamBoardScalarFieldEnum | ExamBoardScalarFieldEnum[]
  }

  /**
   * ExamBoard findFirstOrThrow
   */
  export type ExamBoardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamBoard
     */
    select?: ExamBoardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamBoard
     */
    omit?: ExamBoardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamBoardInclude<ExtArgs> | null
    /**
     * Filter, which ExamBoard to fetch.
     */
    where?: ExamBoardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExamBoards to fetch.
     */
    orderBy?: ExamBoardOrderByWithRelationInput | ExamBoardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExamBoards.
     */
    cursor?: ExamBoardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExamBoards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExamBoards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExamBoards.
     */
    distinct?: ExamBoardScalarFieldEnum | ExamBoardScalarFieldEnum[]
  }

  /**
   * ExamBoard findMany
   */
  export type ExamBoardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamBoard
     */
    select?: ExamBoardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamBoard
     */
    omit?: ExamBoardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamBoardInclude<ExtArgs> | null
    /**
     * Filter, which ExamBoards to fetch.
     */
    where?: ExamBoardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExamBoards to fetch.
     */
    orderBy?: ExamBoardOrderByWithRelationInput | ExamBoardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ExamBoards.
     */
    cursor?: ExamBoardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExamBoards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExamBoards.
     */
    skip?: number
    distinct?: ExamBoardScalarFieldEnum | ExamBoardScalarFieldEnum[]
  }

  /**
   * ExamBoard create
   */
  export type ExamBoardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamBoard
     */
    select?: ExamBoardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamBoard
     */
    omit?: ExamBoardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamBoardInclude<ExtArgs> | null
    /**
     * The data needed to create a ExamBoard.
     */
    data: XOR<ExamBoardCreateInput, ExamBoardUncheckedCreateInput>
  }

  /**
   * ExamBoard createMany
   */
  export type ExamBoardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ExamBoards.
     */
    data: ExamBoardCreateManyInput | ExamBoardCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ExamBoard createManyAndReturn
   */
  export type ExamBoardCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamBoard
     */
    select?: ExamBoardSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ExamBoard
     */
    omit?: ExamBoardOmit<ExtArgs> | null
    /**
     * The data used to create many ExamBoards.
     */
    data: ExamBoardCreateManyInput | ExamBoardCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ExamBoard update
   */
  export type ExamBoardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamBoard
     */
    select?: ExamBoardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamBoard
     */
    omit?: ExamBoardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamBoardInclude<ExtArgs> | null
    /**
     * The data needed to update a ExamBoard.
     */
    data: XOR<ExamBoardUpdateInput, ExamBoardUncheckedUpdateInput>
    /**
     * Choose, which ExamBoard to update.
     */
    where: ExamBoardWhereUniqueInput
  }

  /**
   * ExamBoard updateMany
   */
  export type ExamBoardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ExamBoards.
     */
    data: XOR<ExamBoardUpdateManyMutationInput, ExamBoardUncheckedUpdateManyInput>
    /**
     * Filter which ExamBoards to update
     */
    where?: ExamBoardWhereInput
    /**
     * Limit how many ExamBoards to update.
     */
    limit?: number
  }

  /**
   * ExamBoard updateManyAndReturn
   */
  export type ExamBoardUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamBoard
     */
    select?: ExamBoardSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ExamBoard
     */
    omit?: ExamBoardOmit<ExtArgs> | null
    /**
     * The data used to update ExamBoards.
     */
    data: XOR<ExamBoardUpdateManyMutationInput, ExamBoardUncheckedUpdateManyInput>
    /**
     * Filter which ExamBoards to update
     */
    where?: ExamBoardWhereInput
    /**
     * Limit how many ExamBoards to update.
     */
    limit?: number
  }

  /**
   * ExamBoard upsert
   */
  export type ExamBoardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamBoard
     */
    select?: ExamBoardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamBoard
     */
    omit?: ExamBoardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamBoardInclude<ExtArgs> | null
    /**
     * The filter to search for the ExamBoard to update in case it exists.
     */
    where: ExamBoardWhereUniqueInput
    /**
     * In case the ExamBoard found by the `where` argument doesn't exist, create a new ExamBoard with this data.
     */
    create: XOR<ExamBoardCreateInput, ExamBoardUncheckedCreateInput>
    /**
     * In case the ExamBoard was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExamBoardUpdateInput, ExamBoardUncheckedUpdateInput>
  }

  /**
   * ExamBoard delete
   */
  export type ExamBoardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamBoard
     */
    select?: ExamBoardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamBoard
     */
    omit?: ExamBoardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamBoardInclude<ExtArgs> | null
    /**
     * Filter which ExamBoard to delete.
     */
    where: ExamBoardWhereUniqueInput
  }

  /**
   * ExamBoard deleteMany
   */
  export type ExamBoardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExamBoards to delete
     */
    where?: ExamBoardWhereInput
    /**
     * Limit how many ExamBoards to delete.
     */
    limit?: number
  }

  /**
   * ExamBoard.editions
   */
  export type ExamBoard$editionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamEdition
     */
    select?: ExamEditionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamEdition
     */
    omit?: ExamEditionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamEditionInclude<ExtArgs> | null
    where?: ExamEditionWhereInput
    orderBy?: ExamEditionOrderByWithRelationInput | ExamEditionOrderByWithRelationInput[]
    cursor?: ExamEditionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExamEditionScalarFieldEnum | ExamEditionScalarFieldEnum[]
  }

  /**
   * ExamBoard without action
   */
  export type ExamBoardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamBoard
     */
    select?: ExamBoardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamBoard
     */
    omit?: ExamBoardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamBoardInclude<ExtArgs> | null
  }


  /**
   * Model ExamEdition
   */

  export type AggregateExamEdition = {
    _count: ExamEditionCountAggregateOutputType | null
    _avg: ExamEditionAvgAggregateOutputType | null
    _sum: ExamEditionSumAggregateOutputType | null
    _min: ExamEditionMinAggregateOutputType | null
    _max: ExamEditionMaxAggregateOutputType | null
  }

  export type ExamEditionAvgAggregateOutputType = {
    id: number | null
    examBoardId: number | null
    year: number | null
  }

  export type ExamEditionSumAggregateOutputType = {
    id: number | null
    examBoardId: number | null
    year: number | null
  }

  export type ExamEditionMinAggregateOutputType = {
    id: number | null
    examBoardId: number | null
    year: number | null
    editionLabel: string | null
    notes: string | null
  }

  export type ExamEditionMaxAggregateOutputType = {
    id: number | null
    examBoardId: number | null
    year: number | null
    editionLabel: string | null
    notes: string | null
  }

  export type ExamEditionCountAggregateOutputType = {
    id: number
    examBoardId: number
    year: number
    editionLabel: number
    notes: number
    _all: number
  }


  export type ExamEditionAvgAggregateInputType = {
    id?: true
    examBoardId?: true
    year?: true
  }

  export type ExamEditionSumAggregateInputType = {
    id?: true
    examBoardId?: true
    year?: true
  }

  export type ExamEditionMinAggregateInputType = {
    id?: true
    examBoardId?: true
    year?: true
    editionLabel?: true
    notes?: true
  }

  export type ExamEditionMaxAggregateInputType = {
    id?: true
    examBoardId?: true
    year?: true
    editionLabel?: true
    notes?: true
  }

  export type ExamEditionCountAggregateInputType = {
    id?: true
    examBoardId?: true
    year?: true
    editionLabel?: true
    notes?: true
    _all?: true
  }

  export type ExamEditionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExamEdition to aggregate.
     */
    where?: ExamEditionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExamEditions to fetch.
     */
    orderBy?: ExamEditionOrderByWithRelationInput | ExamEditionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExamEditionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExamEditions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExamEditions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ExamEditions
    **/
    _count?: true | ExamEditionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExamEditionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExamEditionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExamEditionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExamEditionMaxAggregateInputType
  }

  export type GetExamEditionAggregateType<T extends ExamEditionAggregateArgs> = {
        [P in keyof T & keyof AggregateExamEdition]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExamEdition[P]>
      : GetScalarType<T[P], AggregateExamEdition[P]>
  }




  export type ExamEditionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExamEditionWhereInput
    orderBy?: ExamEditionOrderByWithAggregationInput | ExamEditionOrderByWithAggregationInput[]
    by: ExamEditionScalarFieldEnum[] | ExamEditionScalarFieldEnum
    having?: ExamEditionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExamEditionCountAggregateInputType | true
    _avg?: ExamEditionAvgAggregateInputType
    _sum?: ExamEditionSumAggregateInputType
    _min?: ExamEditionMinAggregateInputType
    _max?: ExamEditionMaxAggregateInputType
  }

  export type ExamEditionGroupByOutputType = {
    id: number
    examBoardId: number
    year: number
    editionLabel: string
    notes: string | null
    _count: ExamEditionCountAggregateOutputType | null
    _avg: ExamEditionAvgAggregateOutputType | null
    _sum: ExamEditionSumAggregateOutputType | null
    _min: ExamEditionMinAggregateOutputType | null
    _max: ExamEditionMaxAggregateOutputType | null
  }

  type GetExamEditionGroupByPayload<T extends ExamEditionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExamEditionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExamEditionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExamEditionGroupByOutputType[P]>
            : GetScalarType<T[P], ExamEditionGroupByOutputType[P]>
        }
      >
    >


  export type ExamEditionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    examBoardId?: boolean
    year?: boolean
    editionLabel?: boolean
    notes?: boolean
    board?: boolean | ExamBoardDefaultArgs<ExtArgs>
    phases?: boolean | ExamEdition$phasesArgs<ExtArgs>
    _count?: boolean | ExamEditionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["examEdition"]>

  export type ExamEditionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    examBoardId?: boolean
    year?: boolean
    editionLabel?: boolean
    notes?: boolean
    board?: boolean | ExamBoardDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["examEdition"]>

  export type ExamEditionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    examBoardId?: boolean
    year?: boolean
    editionLabel?: boolean
    notes?: boolean
    board?: boolean | ExamBoardDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["examEdition"]>

  export type ExamEditionSelectScalar = {
    id?: boolean
    examBoardId?: boolean
    year?: boolean
    editionLabel?: boolean
    notes?: boolean
  }

  export type ExamEditionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "examBoardId" | "year" | "editionLabel" | "notes", ExtArgs["result"]["examEdition"]>
  export type ExamEditionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    board?: boolean | ExamBoardDefaultArgs<ExtArgs>
    phases?: boolean | ExamEdition$phasesArgs<ExtArgs>
    _count?: boolean | ExamEditionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ExamEditionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    board?: boolean | ExamBoardDefaultArgs<ExtArgs>
  }
  export type ExamEditionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    board?: boolean | ExamBoardDefaultArgs<ExtArgs>
  }

  export type $ExamEditionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ExamEdition"
    objects: {
      board: Prisma.$ExamBoardPayload<ExtArgs>
      phases: Prisma.$ExamPhasePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      examBoardId: number
      year: number
      editionLabel: string
      notes: string | null
    }, ExtArgs["result"]["examEdition"]>
    composites: {}
  }

  type ExamEditionGetPayload<S extends boolean | null | undefined | ExamEditionDefaultArgs> = $Result.GetResult<Prisma.$ExamEditionPayload, S>

  type ExamEditionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ExamEditionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ExamEditionCountAggregateInputType | true
    }

  export interface ExamEditionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ExamEdition'], meta: { name: 'ExamEdition' } }
    /**
     * Find zero or one ExamEdition that matches the filter.
     * @param {ExamEditionFindUniqueArgs} args - Arguments to find a ExamEdition
     * @example
     * // Get one ExamEdition
     * const examEdition = await prisma.examEdition.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExamEditionFindUniqueArgs>(args: SelectSubset<T, ExamEditionFindUniqueArgs<ExtArgs>>): Prisma__ExamEditionClient<$Result.GetResult<Prisma.$ExamEditionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ExamEdition that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ExamEditionFindUniqueOrThrowArgs} args - Arguments to find a ExamEdition
     * @example
     * // Get one ExamEdition
     * const examEdition = await prisma.examEdition.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExamEditionFindUniqueOrThrowArgs>(args: SelectSubset<T, ExamEditionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExamEditionClient<$Result.GetResult<Prisma.$ExamEditionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ExamEdition that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamEditionFindFirstArgs} args - Arguments to find a ExamEdition
     * @example
     * // Get one ExamEdition
     * const examEdition = await prisma.examEdition.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExamEditionFindFirstArgs>(args?: SelectSubset<T, ExamEditionFindFirstArgs<ExtArgs>>): Prisma__ExamEditionClient<$Result.GetResult<Prisma.$ExamEditionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ExamEdition that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamEditionFindFirstOrThrowArgs} args - Arguments to find a ExamEdition
     * @example
     * // Get one ExamEdition
     * const examEdition = await prisma.examEdition.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExamEditionFindFirstOrThrowArgs>(args?: SelectSubset<T, ExamEditionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExamEditionClient<$Result.GetResult<Prisma.$ExamEditionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ExamEditions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamEditionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ExamEditions
     * const examEditions = await prisma.examEdition.findMany()
     * 
     * // Get first 10 ExamEditions
     * const examEditions = await prisma.examEdition.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const examEditionWithIdOnly = await prisma.examEdition.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExamEditionFindManyArgs>(args?: SelectSubset<T, ExamEditionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamEditionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ExamEdition.
     * @param {ExamEditionCreateArgs} args - Arguments to create a ExamEdition.
     * @example
     * // Create one ExamEdition
     * const ExamEdition = await prisma.examEdition.create({
     *   data: {
     *     // ... data to create a ExamEdition
     *   }
     * })
     * 
     */
    create<T extends ExamEditionCreateArgs>(args: SelectSubset<T, ExamEditionCreateArgs<ExtArgs>>): Prisma__ExamEditionClient<$Result.GetResult<Prisma.$ExamEditionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ExamEditions.
     * @param {ExamEditionCreateManyArgs} args - Arguments to create many ExamEditions.
     * @example
     * // Create many ExamEditions
     * const examEdition = await prisma.examEdition.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExamEditionCreateManyArgs>(args?: SelectSubset<T, ExamEditionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ExamEditions and returns the data saved in the database.
     * @param {ExamEditionCreateManyAndReturnArgs} args - Arguments to create many ExamEditions.
     * @example
     * // Create many ExamEditions
     * const examEdition = await prisma.examEdition.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ExamEditions and only return the `id`
     * const examEditionWithIdOnly = await prisma.examEdition.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ExamEditionCreateManyAndReturnArgs>(args?: SelectSubset<T, ExamEditionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamEditionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ExamEdition.
     * @param {ExamEditionDeleteArgs} args - Arguments to delete one ExamEdition.
     * @example
     * // Delete one ExamEdition
     * const ExamEdition = await prisma.examEdition.delete({
     *   where: {
     *     // ... filter to delete one ExamEdition
     *   }
     * })
     * 
     */
    delete<T extends ExamEditionDeleteArgs>(args: SelectSubset<T, ExamEditionDeleteArgs<ExtArgs>>): Prisma__ExamEditionClient<$Result.GetResult<Prisma.$ExamEditionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ExamEdition.
     * @param {ExamEditionUpdateArgs} args - Arguments to update one ExamEdition.
     * @example
     * // Update one ExamEdition
     * const examEdition = await prisma.examEdition.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExamEditionUpdateArgs>(args: SelectSubset<T, ExamEditionUpdateArgs<ExtArgs>>): Prisma__ExamEditionClient<$Result.GetResult<Prisma.$ExamEditionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ExamEditions.
     * @param {ExamEditionDeleteManyArgs} args - Arguments to filter ExamEditions to delete.
     * @example
     * // Delete a few ExamEditions
     * const { count } = await prisma.examEdition.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExamEditionDeleteManyArgs>(args?: SelectSubset<T, ExamEditionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExamEditions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamEditionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ExamEditions
     * const examEdition = await prisma.examEdition.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExamEditionUpdateManyArgs>(args: SelectSubset<T, ExamEditionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExamEditions and returns the data updated in the database.
     * @param {ExamEditionUpdateManyAndReturnArgs} args - Arguments to update many ExamEditions.
     * @example
     * // Update many ExamEditions
     * const examEdition = await prisma.examEdition.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ExamEditions and only return the `id`
     * const examEditionWithIdOnly = await prisma.examEdition.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ExamEditionUpdateManyAndReturnArgs>(args: SelectSubset<T, ExamEditionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamEditionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ExamEdition.
     * @param {ExamEditionUpsertArgs} args - Arguments to update or create a ExamEdition.
     * @example
     * // Update or create a ExamEdition
     * const examEdition = await prisma.examEdition.upsert({
     *   create: {
     *     // ... data to create a ExamEdition
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ExamEdition we want to update
     *   }
     * })
     */
    upsert<T extends ExamEditionUpsertArgs>(args: SelectSubset<T, ExamEditionUpsertArgs<ExtArgs>>): Prisma__ExamEditionClient<$Result.GetResult<Prisma.$ExamEditionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ExamEditions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamEditionCountArgs} args - Arguments to filter ExamEditions to count.
     * @example
     * // Count the number of ExamEditions
     * const count = await prisma.examEdition.count({
     *   where: {
     *     // ... the filter for the ExamEditions we want to count
     *   }
     * })
    **/
    count<T extends ExamEditionCountArgs>(
      args?: Subset<T, ExamEditionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExamEditionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ExamEdition.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamEditionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExamEditionAggregateArgs>(args: Subset<T, ExamEditionAggregateArgs>): Prisma.PrismaPromise<GetExamEditionAggregateType<T>>

    /**
     * Group by ExamEdition.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamEditionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExamEditionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExamEditionGroupByArgs['orderBy'] }
        : { orderBy?: ExamEditionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExamEditionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExamEditionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ExamEdition model
   */
  readonly fields: ExamEditionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ExamEdition.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExamEditionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    board<T extends ExamBoardDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ExamBoardDefaultArgs<ExtArgs>>): Prisma__ExamBoardClient<$Result.GetResult<Prisma.$ExamBoardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    phases<T extends ExamEdition$phasesArgs<ExtArgs> = {}>(args?: Subset<T, ExamEdition$phasesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamPhasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ExamEdition model
   */
  interface ExamEditionFieldRefs {
    readonly id: FieldRef<"ExamEdition", 'Int'>
    readonly examBoardId: FieldRef<"ExamEdition", 'Int'>
    readonly year: FieldRef<"ExamEdition", 'Int'>
    readonly editionLabel: FieldRef<"ExamEdition", 'String'>
    readonly notes: FieldRef<"ExamEdition", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ExamEdition findUnique
   */
  export type ExamEditionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamEdition
     */
    select?: ExamEditionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamEdition
     */
    omit?: ExamEditionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamEditionInclude<ExtArgs> | null
    /**
     * Filter, which ExamEdition to fetch.
     */
    where: ExamEditionWhereUniqueInput
  }

  /**
   * ExamEdition findUniqueOrThrow
   */
  export type ExamEditionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamEdition
     */
    select?: ExamEditionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamEdition
     */
    omit?: ExamEditionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamEditionInclude<ExtArgs> | null
    /**
     * Filter, which ExamEdition to fetch.
     */
    where: ExamEditionWhereUniqueInput
  }

  /**
   * ExamEdition findFirst
   */
  export type ExamEditionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamEdition
     */
    select?: ExamEditionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamEdition
     */
    omit?: ExamEditionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamEditionInclude<ExtArgs> | null
    /**
     * Filter, which ExamEdition to fetch.
     */
    where?: ExamEditionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExamEditions to fetch.
     */
    orderBy?: ExamEditionOrderByWithRelationInput | ExamEditionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExamEditions.
     */
    cursor?: ExamEditionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExamEditions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExamEditions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExamEditions.
     */
    distinct?: ExamEditionScalarFieldEnum | ExamEditionScalarFieldEnum[]
  }

  /**
   * ExamEdition findFirstOrThrow
   */
  export type ExamEditionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamEdition
     */
    select?: ExamEditionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamEdition
     */
    omit?: ExamEditionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamEditionInclude<ExtArgs> | null
    /**
     * Filter, which ExamEdition to fetch.
     */
    where?: ExamEditionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExamEditions to fetch.
     */
    orderBy?: ExamEditionOrderByWithRelationInput | ExamEditionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExamEditions.
     */
    cursor?: ExamEditionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExamEditions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExamEditions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExamEditions.
     */
    distinct?: ExamEditionScalarFieldEnum | ExamEditionScalarFieldEnum[]
  }

  /**
   * ExamEdition findMany
   */
  export type ExamEditionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamEdition
     */
    select?: ExamEditionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamEdition
     */
    omit?: ExamEditionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamEditionInclude<ExtArgs> | null
    /**
     * Filter, which ExamEditions to fetch.
     */
    where?: ExamEditionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExamEditions to fetch.
     */
    orderBy?: ExamEditionOrderByWithRelationInput | ExamEditionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ExamEditions.
     */
    cursor?: ExamEditionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExamEditions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExamEditions.
     */
    skip?: number
    distinct?: ExamEditionScalarFieldEnum | ExamEditionScalarFieldEnum[]
  }

  /**
   * ExamEdition create
   */
  export type ExamEditionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamEdition
     */
    select?: ExamEditionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamEdition
     */
    omit?: ExamEditionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamEditionInclude<ExtArgs> | null
    /**
     * The data needed to create a ExamEdition.
     */
    data: XOR<ExamEditionCreateInput, ExamEditionUncheckedCreateInput>
  }

  /**
   * ExamEdition createMany
   */
  export type ExamEditionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ExamEditions.
     */
    data: ExamEditionCreateManyInput | ExamEditionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ExamEdition createManyAndReturn
   */
  export type ExamEditionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamEdition
     */
    select?: ExamEditionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ExamEdition
     */
    omit?: ExamEditionOmit<ExtArgs> | null
    /**
     * The data used to create many ExamEditions.
     */
    data: ExamEditionCreateManyInput | ExamEditionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamEditionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ExamEdition update
   */
  export type ExamEditionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamEdition
     */
    select?: ExamEditionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamEdition
     */
    omit?: ExamEditionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamEditionInclude<ExtArgs> | null
    /**
     * The data needed to update a ExamEdition.
     */
    data: XOR<ExamEditionUpdateInput, ExamEditionUncheckedUpdateInput>
    /**
     * Choose, which ExamEdition to update.
     */
    where: ExamEditionWhereUniqueInput
  }

  /**
   * ExamEdition updateMany
   */
  export type ExamEditionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ExamEditions.
     */
    data: XOR<ExamEditionUpdateManyMutationInput, ExamEditionUncheckedUpdateManyInput>
    /**
     * Filter which ExamEditions to update
     */
    where?: ExamEditionWhereInput
    /**
     * Limit how many ExamEditions to update.
     */
    limit?: number
  }

  /**
   * ExamEdition updateManyAndReturn
   */
  export type ExamEditionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamEdition
     */
    select?: ExamEditionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ExamEdition
     */
    omit?: ExamEditionOmit<ExtArgs> | null
    /**
     * The data used to update ExamEditions.
     */
    data: XOR<ExamEditionUpdateManyMutationInput, ExamEditionUncheckedUpdateManyInput>
    /**
     * Filter which ExamEditions to update
     */
    where?: ExamEditionWhereInput
    /**
     * Limit how many ExamEditions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamEditionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ExamEdition upsert
   */
  export type ExamEditionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamEdition
     */
    select?: ExamEditionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamEdition
     */
    omit?: ExamEditionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamEditionInclude<ExtArgs> | null
    /**
     * The filter to search for the ExamEdition to update in case it exists.
     */
    where: ExamEditionWhereUniqueInput
    /**
     * In case the ExamEdition found by the `where` argument doesn't exist, create a new ExamEdition with this data.
     */
    create: XOR<ExamEditionCreateInput, ExamEditionUncheckedCreateInput>
    /**
     * In case the ExamEdition was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExamEditionUpdateInput, ExamEditionUncheckedUpdateInput>
  }

  /**
   * ExamEdition delete
   */
  export type ExamEditionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamEdition
     */
    select?: ExamEditionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamEdition
     */
    omit?: ExamEditionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamEditionInclude<ExtArgs> | null
    /**
     * Filter which ExamEdition to delete.
     */
    where: ExamEditionWhereUniqueInput
  }

  /**
   * ExamEdition deleteMany
   */
  export type ExamEditionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExamEditions to delete
     */
    where?: ExamEditionWhereInput
    /**
     * Limit how many ExamEditions to delete.
     */
    limit?: number
  }

  /**
   * ExamEdition.phases
   */
  export type ExamEdition$phasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamPhase
     */
    select?: ExamPhaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamPhase
     */
    omit?: ExamPhaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamPhaseInclude<ExtArgs> | null
    where?: ExamPhaseWhereInput
    orderBy?: ExamPhaseOrderByWithRelationInput | ExamPhaseOrderByWithRelationInput[]
    cursor?: ExamPhaseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExamPhaseScalarFieldEnum | ExamPhaseScalarFieldEnum[]
  }

  /**
   * ExamEdition without action
   */
  export type ExamEditionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamEdition
     */
    select?: ExamEditionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamEdition
     */
    omit?: ExamEditionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamEditionInclude<ExtArgs> | null
  }


  /**
   * Model ExamPhase
   */

  export type AggregateExamPhase = {
    _count: ExamPhaseCountAggregateOutputType | null
    _avg: ExamPhaseAvgAggregateOutputType | null
    _sum: ExamPhaseSumAggregateOutputType | null
    _min: ExamPhaseMinAggregateOutputType | null
    _max: ExamPhaseMaxAggregateOutputType | null
  }

  export type ExamPhaseAvgAggregateOutputType = {
    id: number | null
    examEditionId: number | null
    phaseNumber: number | null
    dayNumber: number | null
    questionCountExpected: number | null
    defaultOptionCount: number | null
  }

  export type ExamPhaseSumAggregateOutputType = {
    id: number | null
    examEditionId: number | null
    phaseNumber: number | null
    dayNumber: number | null
    questionCountExpected: number | null
    defaultOptionCount: number | null
  }

  export type ExamPhaseMinAggregateOutputType = {
    id: number | null
    examEditionId: number | null
    phaseNumber: number | null
    dayNumber: number | null
    subjectBlock: string | null
    questionCountExpected: number | null
    defaultOptionCount: number | null
    isDiscursive: boolean | null
  }

  export type ExamPhaseMaxAggregateOutputType = {
    id: number | null
    examEditionId: number | null
    phaseNumber: number | null
    dayNumber: number | null
    subjectBlock: string | null
    questionCountExpected: number | null
    defaultOptionCount: number | null
    isDiscursive: boolean | null
  }

  export type ExamPhaseCountAggregateOutputType = {
    id: number
    examEditionId: number
    phaseNumber: number
    dayNumber: number
    subjectBlock: number
    questionCountExpected: number
    defaultOptionCount: number
    isDiscursive: number
    _all: number
  }


  export type ExamPhaseAvgAggregateInputType = {
    id?: true
    examEditionId?: true
    phaseNumber?: true
    dayNumber?: true
    questionCountExpected?: true
    defaultOptionCount?: true
  }

  export type ExamPhaseSumAggregateInputType = {
    id?: true
    examEditionId?: true
    phaseNumber?: true
    dayNumber?: true
    questionCountExpected?: true
    defaultOptionCount?: true
  }

  export type ExamPhaseMinAggregateInputType = {
    id?: true
    examEditionId?: true
    phaseNumber?: true
    dayNumber?: true
    subjectBlock?: true
    questionCountExpected?: true
    defaultOptionCount?: true
    isDiscursive?: true
  }

  export type ExamPhaseMaxAggregateInputType = {
    id?: true
    examEditionId?: true
    phaseNumber?: true
    dayNumber?: true
    subjectBlock?: true
    questionCountExpected?: true
    defaultOptionCount?: true
    isDiscursive?: true
  }

  export type ExamPhaseCountAggregateInputType = {
    id?: true
    examEditionId?: true
    phaseNumber?: true
    dayNumber?: true
    subjectBlock?: true
    questionCountExpected?: true
    defaultOptionCount?: true
    isDiscursive?: true
    _all?: true
  }

  export type ExamPhaseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExamPhase to aggregate.
     */
    where?: ExamPhaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExamPhases to fetch.
     */
    orderBy?: ExamPhaseOrderByWithRelationInput | ExamPhaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExamPhaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExamPhases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExamPhases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ExamPhases
    **/
    _count?: true | ExamPhaseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExamPhaseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExamPhaseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExamPhaseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExamPhaseMaxAggregateInputType
  }

  export type GetExamPhaseAggregateType<T extends ExamPhaseAggregateArgs> = {
        [P in keyof T & keyof AggregateExamPhase]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExamPhase[P]>
      : GetScalarType<T[P], AggregateExamPhase[P]>
  }




  export type ExamPhaseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExamPhaseWhereInput
    orderBy?: ExamPhaseOrderByWithAggregationInput | ExamPhaseOrderByWithAggregationInput[]
    by: ExamPhaseScalarFieldEnum[] | ExamPhaseScalarFieldEnum
    having?: ExamPhaseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExamPhaseCountAggregateInputType | true
    _avg?: ExamPhaseAvgAggregateInputType
    _sum?: ExamPhaseSumAggregateInputType
    _min?: ExamPhaseMinAggregateInputType
    _max?: ExamPhaseMaxAggregateInputType
  }

  export type ExamPhaseGroupByOutputType = {
    id: number
    examEditionId: number
    phaseNumber: number
    dayNumber: number | null
    subjectBlock: string | null
    questionCountExpected: number | null
    defaultOptionCount: number | null
    isDiscursive: boolean
    _count: ExamPhaseCountAggregateOutputType | null
    _avg: ExamPhaseAvgAggregateOutputType | null
    _sum: ExamPhaseSumAggregateOutputType | null
    _min: ExamPhaseMinAggregateOutputType | null
    _max: ExamPhaseMaxAggregateOutputType | null
  }

  type GetExamPhaseGroupByPayload<T extends ExamPhaseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExamPhaseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExamPhaseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExamPhaseGroupByOutputType[P]>
            : GetScalarType<T[P], ExamPhaseGroupByOutputType[P]>
        }
      >
    >


  export type ExamPhaseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    examEditionId?: boolean
    phaseNumber?: boolean
    dayNumber?: boolean
    subjectBlock?: boolean
    questionCountExpected?: boolean
    defaultOptionCount?: boolean
    isDiscursive?: boolean
    edition?: boolean | ExamEditionDefaultArgs<ExtArgs>
    questions?: boolean | ExamPhase$questionsArgs<ExtArgs>
    _count?: boolean | ExamPhaseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["examPhase"]>

  export type ExamPhaseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    examEditionId?: boolean
    phaseNumber?: boolean
    dayNumber?: boolean
    subjectBlock?: boolean
    questionCountExpected?: boolean
    defaultOptionCount?: boolean
    isDiscursive?: boolean
    edition?: boolean | ExamEditionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["examPhase"]>

  export type ExamPhaseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    examEditionId?: boolean
    phaseNumber?: boolean
    dayNumber?: boolean
    subjectBlock?: boolean
    questionCountExpected?: boolean
    defaultOptionCount?: boolean
    isDiscursive?: boolean
    edition?: boolean | ExamEditionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["examPhase"]>

  export type ExamPhaseSelectScalar = {
    id?: boolean
    examEditionId?: boolean
    phaseNumber?: boolean
    dayNumber?: boolean
    subjectBlock?: boolean
    questionCountExpected?: boolean
    defaultOptionCount?: boolean
    isDiscursive?: boolean
  }

  export type ExamPhaseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "examEditionId" | "phaseNumber" | "dayNumber" | "subjectBlock" | "questionCountExpected" | "defaultOptionCount" | "isDiscursive", ExtArgs["result"]["examPhase"]>
  export type ExamPhaseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    edition?: boolean | ExamEditionDefaultArgs<ExtArgs>
    questions?: boolean | ExamPhase$questionsArgs<ExtArgs>
    _count?: boolean | ExamPhaseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ExamPhaseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    edition?: boolean | ExamEditionDefaultArgs<ExtArgs>
  }
  export type ExamPhaseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    edition?: boolean | ExamEditionDefaultArgs<ExtArgs>
  }

  export type $ExamPhasePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ExamPhase"
    objects: {
      edition: Prisma.$ExamEditionPayload<ExtArgs>
      questions: Prisma.$QuestionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      examEditionId: number
      phaseNumber: number
      dayNumber: number | null
      subjectBlock: string | null
      questionCountExpected: number | null
      defaultOptionCount: number | null
      isDiscursive: boolean
    }, ExtArgs["result"]["examPhase"]>
    composites: {}
  }

  type ExamPhaseGetPayload<S extends boolean | null | undefined | ExamPhaseDefaultArgs> = $Result.GetResult<Prisma.$ExamPhasePayload, S>

  type ExamPhaseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ExamPhaseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ExamPhaseCountAggregateInputType | true
    }

  export interface ExamPhaseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ExamPhase'], meta: { name: 'ExamPhase' } }
    /**
     * Find zero or one ExamPhase that matches the filter.
     * @param {ExamPhaseFindUniqueArgs} args - Arguments to find a ExamPhase
     * @example
     * // Get one ExamPhase
     * const examPhase = await prisma.examPhase.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExamPhaseFindUniqueArgs>(args: SelectSubset<T, ExamPhaseFindUniqueArgs<ExtArgs>>): Prisma__ExamPhaseClient<$Result.GetResult<Prisma.$ExamPhasePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ExamPhase that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ExamPhaseFindUniqueOrThrowArgs} args - Arguments to find a ExamPhase
     * @example
     * // Get one ExamPhase
     * const examPhase = await prisma.examPhase.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExamPhaseFindUniqueOrThrowArgs>(args: SelectSubset<T, ExamPhaseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExamPhaseClient<$Result.GetResult<Prisma.$ExamPhasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ExamPhase that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamPhaseFindFirstArgs} args - Arguments to find a ExamPhase
     * @example
     * // Get one ExamPhase
     * const examPhase = await prisma.examPhase.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExamPhaseFindFirstArgs>(args?: SelectSubset<T, ExamPhaseFindFirstArgs<ExtArgs>>): Prisma__ExamPhaseClient<$Result.GetResult<Prisma.$ExamPhasePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ExamPhase that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamPhaseFindFirstOrThrowArgs} args - Arguments to find a ExamPhase
     * @example
     * // Get one ExamPhase
     * const examPhase = await prisma.examPhase.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExamPhaseFindFirstOrThrowArgs>(args?: SelectSubset<T, ExamPhaseFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExamPhaseClient<$Result.GetResult<Prisma.$ExamPhasePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ExamPhases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamPhaseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ExamPhases
     * const examPhases = await prisma.examPhase.findMany()
     * 
     * // Get first 10 ExamPhases
     * const examPhases = await prisma.examPhase.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const examPhaseWithIdOnly = await prisma.examPhase.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExamPhaseFindManyArgs>(args?: SelectSubset<T, ExamPhaseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamPhasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ExamPhase.
     * @param {ExamPhaseCreateArgs} args - Arguments to create a ExamPhase.
     * @example
     * // Create one ExamPhase
     * const ExamPhase = await prisma.examPhase.create({
     *   data: {
     *     // ... data to create a ExamPhase
     *   }
     * })
     * 
     */
    create<T extends ExamPhaseCreateArgs>(args: SelectSubset<T, ExamPhaseCreateArgs<ExtArgs>>): Prisma__ExamPhaseClient<$Result.GetResult<Prisma.$ExamPhasePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ExamPhases.
     * @param {ExamPhaseCreateManyArgs} args - Arguments to create many ExamPhases.
     * @example
     * // Create many ExamPhases
     * const examPhase = await prisma.examPhase.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExamPhaseCreateManyArgs>(args?: SelectSubset<T, ExamPhaseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ExamPhases and returns the data saved in the database.
     * @param {ExamPhaseCreateManyAndReturnArgs} args - Arguments to create many ExamPhases.
     * @example
     * // Create many ExamPhases
     * const examPhase = await prisma.examPhase.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ExamPhases and only return the `id`
     * const examPhaseWithIdOnly = await prisma.examPhase.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ExamPhaseCreateManyAndReturnArgs>(args?: SelectSubset<T, ExamPhaseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamPhasePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ExamPhase.
     * @param {ExamPhaseDeleteArgs} args - Arguments to delete one ExamPhase.
     * @example
     * // Delete one ExamPhase
     * const ExamPhase = await prisma.examPhase.delete({
     *   where: {
     *     // ... filter to delete one ExamPhase
     *   }
     * })
     * 
     */
    delete<T extends ExamPhaseDeleteArgs>(args: SelectSubset<T, ExamPhaseDeleteArgs<ExtArgs>>): Prisma__ExamPhaseClient<$Result.GetResult<Prisma.$ExamPhasePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ExamPhase.
     * @param {ExamPhaseUpdateArgs} args - Arguments to update one ExamPhase.
     * @example
     * // Update one ExamPhase
     * const examPhase = await prisma.examPhase.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExamPhaseUpdateArgs>(args: SelectSubset<T, ExamPhaseUpdateArgs<ExtArgs>>): Prisma__ExamPhaseClient<$Result.GetResult<Prisma.$ExamPhasePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ExamPhases.
     * @param {ExamPhaseDeleteManyArgs} args - Arguments to filter ExamPhases to delete.
     * @example
     * // Delete a few ExamPhases
     * const { count } = await prisma.examPhase.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExamPhaseDeleteManyArgs>(args?: SelectSubset<T, ExamPhaseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExamPhases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamPhaseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ExamPhases
     * const examPhase = await prisma.examPhase.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExamPhaseUpdateManyArgs>(args: SelectSubset<T, ExamPhaseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExamPhases and returns the data updated in the database.
     * @param {ExamPhaseUpdateManyAndReturnArgs} args - Arguments to update many ExamPhases.
     * @example
     * // Update many ExamPhases
     * const examPhase = await prisma.examPhase.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ExamPhases and only return the `id`
     * const examPhaseWithIdOnly = await prisma.examPhase.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ExamPhaseUpdateManyAndReturnArgs>(args: SelectSubset<T, ExamPhaseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamPhasePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ExamPhase.
     * @param {ExamPhaseUpsertArgs} args - Arguments to update or create a ExamPhase.
     * @example
     * // Update or create a ExamPhase
     * const examPhase = await prisma.examPhase.upsert({
     *   create: {
     *     // ... data to create a ExamPhase
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ExamPhase we want to update
     *   }
     * })
     */
    upsert<T extends ExamPhaseUpsertArgs>(args: SelectSubset<T, ExamPhaseUpsertArgs<ExtArgs>>): Prisma__ExamPhaseClient<$Result.GetResult<Prisma.$ExamPhasePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ExamPhases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamPhaseCountArgs} args - Arguments to filter ExamPhases to count.
     * @example
     * // Count the number of ExamPhases
     * const count = await prisma.examPhase.count({
     *   where: {
     *     // ... the filter for the ExamPhases we want to count
     *   }
     * })
    **/
    count<T extends ExamPhaseCountArgs>(
      args?: Subset<T, ExamPhaseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExamPhaseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ExamPhase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamPhaseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExamPhaseAggregateArgs>(args: Subset<T, ExamPhaseAggregateArgs>): Prisma.PrismaPromise<GetExamPhaseAggregateType<T>>

    /**
     * Group by ExamPhase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamPhaseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExamPhaseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExamPhaseGroupByArgs['orderBy'] }
        : { orderBy?: ExamPhaseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExamPhaseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExamPhaseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ExamPhase model
   */
  readonly fields: ExamPhaseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ExamPhase.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExamPhaseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    edition<T extends ExamEditionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ExamEditionDefaultArgs<ExtArgs>>): Prisma__ExamEditionClient<$Result.GetResult<Prisma.$ExamEditionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    questions<T extends ExamPhase$questionsArgs<ExtArgs> = {}>(args?: Subset<T, ExamPhase$questionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ExamPhase model
   */
  interface ExamPhaseFieldRefs {
    readonly id: FieldRef<"ExamPhase", 'Int'>
    readonly examEditionId: FieldRef<"ExamPhase", 'Int'>
    readonly phaseNumber: FieldRef<"ExamPhase", 'Int'>
    readonly dayNumber: FieldRef<"ExamPhase", 'Int'>
    readonly subjectBlock: FieldRef<"ExamPhase", 'String'>
    readonly questionCountExpected: FieldRef<"ExamPhase", 'Int'>
    readonly defaultOptionCount: FieldRef<"ExamPhase", 'Int'>
    readonly isDiscursive: FieldRef<"ExamPhase", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * ExamPhase findUnique
   */
  export type ExamPhaseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamPhase
     */
    select?: ExamPhaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamPhase
     */
    omit?: ExamPhaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamPhaseInclude<ExtArgs> | null
    /**
     * Filter, which ExamPhase to fetch.
     */
    where: ExamPhaseWhereUniqueInput
  }

  /**
   * ExamPhase findUniqueOrThrow
   */
  export type ExamPhaseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamPhase
     */
    select?: ExamPhaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamPhase
     */
    omit?: ExamPhaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamPhaseInclude<ExtArgs> | null
    /**
     * Filter, which ExamPhase to fetch.
     */
    where: ExamPhaseWhereUniqueInput
  }

  /**
   * ExamPhase findFirst
   */
  export type ExamPhaseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamPhase
     */
    select?: ExamPhaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamPhase
     */
    omit?: ExamPhaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamPhaseInclude<ExtArgs> | null
    /**
     * Filter, which ExamPhase to fetch.
     */
    where?: ExamPhaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExamPhases to fetch.
     */
    orderBy?: ExamPhaseOrderByWithRelationInput | ExamPhaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExamPhases.
     */
    cursor?: ExamPhaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExamPhases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExamPhases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExamPhases.
     */
    distinct?: ExamPhaseScalarFieldEnum | ExamPhaseScalarFieldEnum[]
  }

  /**
   * ExamPhase findFirstOrThrow
   */
  export type ExamPhaseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamPhase
     */
    select?: ExamPhaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamPhase
     */
    omit?: ExamPhaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamPhaseInclude<ExtArgs> | null
    /**
     * Filter, which ExamPhase to fetch.
     */
    where?: ExamPhaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExamPhases to fetch.
     */
    orderBy?: ExamPhaseOrderByWithRelationInput | ExamPhaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExamPhases.
     */
    cursor?: ExamPhaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExamPhases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExamPhases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExamPhases.
     */
    distinct?: ExamPhaseScalarFieldEnum | ExamPhaseScalarFieldEnum[]
  }

  /**
   * ExamPhase findMany
   */
  export type ExamPhaseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamPhase
     */
    select?: ExamPhaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamPhase
     */
    omit?: ExamPhaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamPhaseInclude<ExtArgs> | null
    /**
     * Filter, which ExamPhases to fetch.
     */
    where?: ExamPhaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExamPhases to fetch.
     */
    orderBy?: ExamPhaseOrderByWithRelationInput | ExamPhaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ExamPhases.
     */
    cursor?: ExamPhaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExamPhases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExamPhases.
     */
    skip?: number
    distinct?: ExamPhaseScalarFieldEnum | ExamPhaseScalarFieldEnum[]
  }

  /**
   * ExamPhase create
   */
  export type ExamPhaseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamPhase
     */
    select?: ExamPhaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamPhase
     */
    omit?: ExamPhaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamPhaseInclude<ExtArgs> | null
    /**
     * The data needed to create a ExamPhase.
     */
    data: XOR<ExamPhaseCreateInput, ExamPhaseUncheckedCreateInput>
  }

  /**
   * ExamPhase createMany
   */
  export type ExamPhaseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ExamPhases.
     */
    data: ExamPhaseCreateManyInput | ExamPhaseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ExamPhase createManyAndReturn
   */
  export type ExamPhaseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamPhase
     */
    select?: ExamPhaseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ExamPhase
     */
    omit?: ExamPhaseOmit<ExtArgs> | null
    /**
     * The data used to create many ExamPhases.
     */
    data: ExamPhaseCreateManyInput | ExamPhaseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamPhaseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ExamPhase update
   */
  export type ExamPhaseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamPhase
     */
    select?: ExamPhaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamPhase
     */
    omit?: ExamPhaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamPhaseInclude<ExtArgs> | null
    /**
     * The data needed to update a ExamPhase.
     */
    data: XOR<ExamPhaseUpdateInput, ExamPhaseUncheckedUpdateInput>
    /**
     * Choose, which ExamPhase to update.
     */
    where: ExamPhaseWhereUniqueInput
  }

  /**
   * ExamPhase updateMany
   */
  export type ExamPhaseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ExamPhases.
     */
    data: XOR<ExamPhaseUpdateManyMutationInput, ExamPhaseUncheckedUpdateManyInput>
    /**
     * Filter which ExamPhases to update
     */
    where?: ExamPhaseWhereInput
    /**
     * Limit how many ExamPhases to update.
     */
    limit?: number
  }

  /**
   * ExamPhase updateManyAndReturn
   */
  export type ExamPhaseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamPhase
     */
    select?: ExamPhaseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ExamPhase
     */
    omit?: ExamPhaseOmit<ExtArgs> | null
    /**
     * The data used to update ExamPhases.
     */
    data: XOR<ExamPhaseUpdateManyMutationInput, ExamPhaseUncheckedUpdateManyInput>
    /**
     * Filter which ExamPhases to update
     */
    where?: ExamPhaseWhereInput
    /**
     * Limit how many ExamPhases to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamPhaseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ExamPhase upsert
   */
  export type ExamPhaseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamPhase
     */
    select?: ExamPhaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamPhase
     */
    omit?: ExamPhaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamPhaseInclude<ExtArgs> | null
    /**
     * The filter to search for the ExamPhase to update in case it exists.
     */
    where: ExamPhaseWhereUniqueInput
    /**
     * In case the ExamPhase found by the `where` argument doesn't exist, create a new ExamPhase with this data.
     */
    create: XOR<ExamPhaseCreateInput, ExamPhaseUncheckedCreateInput>
    /**
     * In case the ExamPhase was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExamPhaseUpdateInput, ExamPhaseUncheckedUpdateInput>
  }

  /**
   * ExamPhase delete
   */
  export type ExamPhaseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamPhase
     */
    select?: ExamPhaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamPhase
     */
    omit?: ExamPhaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamPhaseInclude<ExtArgs> | null
    /**
     * Filter which ExamPhase to delete.
     */
    where: ExamPhaseWhereUniqueInput
  }

  /**
   * ExamPhase deleteMany
   */
  export type ExamPhaseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExamPhases to delete
     */
    where?: ExamPhaseWhereInput
    /**
     * Limit how many ExamPhases to delete.
     */
    limit?: number
  }

  /**
   * ExamPhase.questions
   */
  export type ExamPhase$questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    where?: QuestionWhereInput
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    cursor?: QuestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * ExamPhase without action
   */
  export type ExamPhaseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamPhase
     */
    select?: ExamPhaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExamPhase
     */
    omit?: ExamPhaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExamPhaseInclude<ExtArgs> | null
  }


  /**
   * Model Subject
   */

  export type AggregateSubject = {
    _count: SubjectCountAggregateOutputType | null
    _avg: SubjectAvgAggregateOutputType | null
    _sum: SubjectSumAggregateOutputType | null
    _min: SubjectMinAggregateOutputType | null
    _max: SubjectMaxAggregateOutputType | null
  }

  export type SubjectAvgAggregateOutputType = {
    id: number | null
  }

  export type SubjectSumAggregateOutputType = {
    id: number | null
  }

  export type SubjectMinAggregateOutputType = {
    id: number | null
    name: string | null
    slug: string | null
  }

  export type SubjectMaxAggregateOutputType = {
    id: number | null
    name: string | null
    slug: string | null
  }

  export type SubjectCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    _all: number
  }


  export type SubjectAvgAggregateInputType = {
    id?: true
  }

  export type SubjectSumAggregateInputType = {
    id?: true
  }

  export type SubjectMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
  }

  export type SubjectMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
  }

  export type SubjectCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    _all?: true
  }

  export type SubjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subject to aggregate.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Subjects
    **/
    _count?: true | SubjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubjectMaxAggregateInputType
  }

  export type GetSubjectAggregateType<T extends SubjectAggregateArgs> = {
        [P in keyof T & keyof AggregateSubject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubject[P]>
      : GetScalarType<T[P], AggregateSubject[P]>
  }




  export type SubjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubjectWhereInput
    orderBy?: SubjectOrderByWithAggregationInput | SubjectOrderByWithAggregationInput[]
    by: SubjectScalarFieldEnum[] | SubjectScalarFieldEnum
    having?: SubjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubjectCountAggregateInputType | true
    _avg?: SubjectAvgAggregateInputType
    _sum?: SubjectSumAggregateInputType
    _min?: SubjectMinAggregateInputType
    _max?: SubjectMaxAggregateInputType
  }

  export type SubjectGroupByOutputType = {
    id: number
    name: string
    slug: string
    _count: SubjectCountAggregateOutputType | null
    _avg: SubjectAvgAggregateOutputType | null
    _sum: SubjectSumAggregateOutputType | null
    _min: SubjectMinAggregateOutputType | null
    _max: SubjectMaxAggregateOutputType | null
  }

  type GetSubjectGroupByPayload<T extends SubjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubjectGroupByOutputType[P]>
            : GetScalarType<T[P], SubjectGroupByOutputType[P]>
        }
      >
    >


  export type SubjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    questions?: boolean | Subject$questionsArgs<ExtArgs>
    _count?: boolean | SubjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subject"]>

  export type SubjectSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
  }, ExtArgs["result"]["subject"]>

  export type SubjectSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
  }, ExtArgs["result"]["subject"]>

  export type SubjectSelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
  }

  export type SubjectOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "slug", ExtArgs["result"]["subject"]>
  export type SubjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questions?: boolean | Subject$questionsArgs<ExtArgs>
    _count?: boolean | SubjectCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SubjectIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type SubjectIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SubjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Subject"
    objects: {
      questions: Prisma.$QuestionSubjectPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      slug: string
    }, ExtArgs["result"]["subject"]>
    composites: {}
  }

  type SubjectGetPayload<S extends boolean | null | undefined | SubjectDefaultArgs> = $Result.GetResult<Prisma.$SubjectPayload, S>

  type SubjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubjectFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubjectCountAggregateInputType | true
    }

  export interface SubjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Subject'], meta: { name: 'Subject' } }
    /**
     * Find zero or one Subject that matches the filter.
     * @param {SubjectFindUniqueArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubjectFindUniqueArgs>(args: SelectSubset<T, SubjectFindUniqueArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Subject that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubjectFindUniqueOrThrowArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubjectFindUniqueOrThrowArgs>(args: SelectSubset<T, SubjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Subject that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindFirstArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubjectFindFirstArgs>(args?: SelectSubset<T, SubjectFindFirstArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Subject that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindFirstOrThrowArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubjectFindFirstOrThrowArgs>(args?: SelectSubset<T, SubjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Subjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subjects
     * const subjects = await prisma.subject.findMany()
     * 
     * // Get first 10 Subjects
     * const subjects = await prisma.subject.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subjectWithIdOnly = await prisma.subject.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubjectFindManyArgs>(args?: SelectSubset<T, SubjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Subject.
     * @param {SubjectCreateArgs} args - Arguments to create a Subject.
     * @example
     * // Create one Subject
     * const Subject = await prisma.subject.create({
     *   data: {
     *     // ... data to create a Subject
     *   }
     * })
     * 
     */
    create<T extends SubjectCreateArgs>(args: SelectSubset<T, SubjectCreateArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Subjects.
     * @param {SubjectCreateManyArgs} args - Arguments to create many Subjects.
     * @example
     * // Create many Subjects
     * const subject = await prisma.subject.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubjectCreateManyArgs>(args?: SelectSubset<T, SubjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Subjects and returns the data saved in the database.
     * @param {SubjectCreateManyAndReturnArgs} args - Arguments to create many Subjects.
     * @example
     * // Create many Subjects
     * const subject = await prisma.subject.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Subjects and only return the `id`
     * const subjectWithIdOnly = await prisma.subject.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubjectCreateManyAndReturnArgs>(args?: SelectSubset<T, SubjectCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Subject.
     * @param {SubjectDeleteArgs} args - Arguments to delete one Subject.
     * @example
     * // Delete one Subject
     * const Subject = await prisma.subject.delete({
     *   where: {
     *     // ... filter to delete one Subject
     *   }
     * })
     * 
     */
    delete<T extends SubjectDeleteArgs>(args: SelectSubset<T, SubjectDeleteArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Subject.
     * @param {SubjectUpdateArgs} args - Arguments to update one Subject.
     * @example
     * // Update one Subject
     * const subject = await prisma.subject.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubjectUpdateArgs>(args: SelectSubset<T, SubjectUpdateArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Subjects.
     * @param {SubjectDeleteManyArgs} args - Arguments to filter Subjects to delete.
     * @example
     * // Delete a few Subjects
     * const { count } = await prisma.subject.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubjectDeleteManyArgs>(args?: SelectSubset<T, SubjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subjects
     * const subject = await prisma.subject.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubjectUpdateManyArgs>(args: SelectSubset<T, SubjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subjects and returns the data updated in the database.
     * @param {SubjectUpdateManyAndReturnArgs} args - Arguments to update many Subjects.
     * @example
     * // Update many Subjects
     * const subject = await prisma.subject.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Subjects and only return the `id`
     * const subjectWithIdOnly = await prisma.subject.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SubjectUpdateManyAndReturnArgs>(args: SelectSubset<T, SubjectUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Subject.
     * @param {SubjectUpsertArgs} args - Arguments to update or create a Subject.
     * @example
     * // Update or create a Subject
     * const subject = await prisma.subject.upsert({
     *   create: {
     *     // ... data to create a Subject
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subject we want to update
     *   }
     * })
     */
    upsert<T extends SubjectUpsertArgs>(args: SelectSubset<T, SubjectUpsertArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectCountArgs} args - Arguments to filter Subjects to count.
     * @example
     * // Count the number of Subjects
     * const count = await prisma.subject.count({
     *   where: {
     *     // ... the filter for the Subjects we want to count
     *   }
     * })
    **/
    count<T extends SubjectCountArgs>(
      args?: Subset<T, SubjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubjectAggregateArgs>(args: Subset<T, SubjectAggregateArgs>): Prisma.PrismaPromise<GetSubjectAggregateType<T>>

    /**
     * Group by Subject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubjectGroupByArgs['orderBy'] }
        : { orderBy?: SubjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Subject model
   */
  readonly fields: SubjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Subject.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    questions<T extends Subject$questionsArgs<ExtArgs> = {}>(args?: Subset<T, Subject$questionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionSubjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Subject model
   */
  interface SubjectFieldRefs {
    readonly id: FieldRef<"Subject", 'Int'>
    readonly name: FieldRef<"Subject", 'String'>
    readonly slug: FieldRef<"Subject", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Subject findUnique
   */
  export type SubjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject findUniqueOrThrow
   */
  export type SubjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject findFirst
   */
  export type SubjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subjects.
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subjects.
     */
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }

  /**
   * Subject findFirstOrThrow
   */
  export type SubjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subjects.
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subjects.
     */
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }

  /**
   * Subject findMany
   */
  export type SubjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subjects to fetch.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Subjects.
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }

  /**
   * Subject create
   */
  export type SubjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Subject.
     */
    data: XOR<SubjectCreateInput, SubjectUncheckedCreateInput>
  }

  /**
   * Subject createMany
   */
  export type SubjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Subjects.
     */
    data: SubjectCreateManyInput | SubjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Subject createManyAndReturn
   */
  export type SubjectCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * The data used to create many Subjects.
     */
    data: SubjectCreateManyInput | SubjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Subject update
   */
  export type SubjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Subject.
     */
    data: XOR<SubjectUpdateInput, SubjectUncheckedUpdateInput>
    /**
     * Choose, which Subject to update.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject updateMany
   */
  export type SubjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Subjects.
     */
    data: XOR<SubjectUpdateManyMutationInput, SubjectUncheckedUpdateManyInput>
    /**
     * Filter which Subjects to update
     */
    where?: SubjectWhereInput
    /**
     * Limit how many Subjects to update.
     */
    limit?: number
  }

  /**
   * Subject updateManyAndReturn
   */
  export type SubjectUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * The data used to update Subjects.
     */
    data: XOR<SubjectUpdateManyMutationInput, SubjectUncheckedUpdateManyInput>
    /**
     * Filter which Subjects to update
     */
    where?: SubjectWhereInput
    /**
     * Limit how many Subjects to update.
     */
    limit?: number
  }

  /**
   * Subject upsert
   */
  export type SubjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Subject to update in case it exists.
     */
    where: SubjectWhereUniqueInput
    /**
     * In case the Subject found by the `where` argument doesn't exist, create a new Subject with this data.
     */
    create: XOR<SubjectCreateInput, SubjectUncheckedCreateInput>
    /**
     * In case the Subject was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubjectUpdateInput, SubjectUncheckedUpdateInput>
  }

  /**
   * Subject delete
   */
  export type SubjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter which Subject to delete.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject deleteMany
   */
  export type SubjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subjects to delete
     */
    where?: SubjectWhereInput
    /**
     * Limit how many Subjects to delete.
     */
    limit?: number
  }

  /**
   * Subject.questions
   */
  export type Subject$questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSubject
     */
    select?: QuestionSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSubject
     */
    omit?: QuestionSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSubjectInclude<ExtArgs> | null
    where?: QuestionSubjectWhereInput
    orderBy?: QuestionSubjectOrderByWithRelationInput | QuestionSubjectOrderByWithRelationInput[]
    cursor?: QuestionSubjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionSubjectScalarFieldEnum | QuestionSubjectScalarFieldEnum[]
  }

  /**
   * Subject without action
   */
  export type SubjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
  }


  /**
   * Model Skill
   */

  export type AggregateSkill = {
    _count: SkillCountAggregateOutputType | null
    _avg: SkillAvgAggregateOutputType | null
    _sum: SkillSumAggregateOutputType | null
    _min: SkillMinAggregateOutputType | null
    _max: SkillMaxAggregateOutputType | null
  }

  export type SkillAvgAggregateOutputType = {
    id: number | null
  }

  export type SkillSumAggregateOutputType = {
    id: number | null
  }

  export type SkillMinAggregateOutputType = {
    id: number | null
    code: string | null
    label: string | null
  }

  export type SkillMaxAggregateOutputType = {
    id: number | null
    code: string | null
    label: string | null
  }

  export type SkillCountAggregateOutputType = {
    id: number
    code: number
    label: number
    _all: number
  }


  export type SkillAvgAggregateInputType = {
    id?: true
  }

  export type SkillSumAggregateInputType = {
    id?: true
  }

  export type SkillMinAggregateInputType = {
    id?: true
    code?: true
    label?: true
  }

  export type SkillMaxAggregateInputType = {
    id?: true
    code?: true
    label?: true
  }

  export type SkillCountAggregateInputType = {
    id?: true
    code?: true
    label?: true
    _all?: true
  }

  export type SkillAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Skill to aggregate.
     */
    where?: SkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     */
    orderBy?: SkillOrderByWithRelationInput | SkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Skills
    **/
    _count?: true | SkillCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SkillAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SkillSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SkillMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SkillMaxAggregateInputType
  }

  export type GetSkillAggregateType<T extends SkillAggregateArgs> = {
        [P in keyof T & keyof AggregateSkill]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSkill[P]>
      : GetScalarType<T[P], AggregateSkill[P]>
  }




  export type SkillGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkillWhereInput
    orderBy?: SkillOrderByWithAggregationInput | SkillOrderByWithAggregationInput[]
    by: SkillScalarFieldEnum[] | SkillScalarFieldEnum
    having?: SkillScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SkillCountAggregateInputType | true
    _avg?: SkillAvgAggregateInputType
    _sum?: SkillSumAggregateInputType
    _min?: SkillMinAggregateInputType
    _max?: SkillMaxAggregateInputType
  }

  export type SkillGroupByOutputType = {
    id: number
    code: string | null
    label: string
    _count: SkillCountAggregateOutputType | null
    _avg: SkillAvgAggregateOutputType | null
    _sum: SkillSumAggregateOutputType | null
    _min: SkillMinAggregateOutputType | null
    _max: SkillMaxAggregateOutputType | null
  }

  type GetSkillGroupByPayload<T extends SkillGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SkillGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SkillGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SkillGroupByOutputType[P]>
            : GetScalarType<T[P], SkillGroupByOutputType[P]>
        }
      >
    >


  export type SkillSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    label?: boolean
    questions?: boolean | Skill$questionsArgs<ExtArgs>
    _count?: boolean | SkillCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skill"]>

  export type SkillSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    label?: boolean
  }, ExtArgs["result"]["skill"]>

  export type SkillSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    label?: boolean
  }, ExtArgs["result"]["skill"]>

  export type SkillSelectScalar = {
    id?: boolean
    code?: boolean
    label?: boolean
  }

  export type SkillOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "code" | "label", ExtArgs["result"]["skill"]>
  export type SkillInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questions?: boolean | Skill$questionsArgs<ExtArgs>
    _count?: boolean | SkillCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SkillIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type SkillIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SkillPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Skill"
    objects: {
      questions: Prisma.$QuestionSkillPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      code: string | null
      label: string
    }, ExtArgs["result"]["skill"]>
    composites: {}
  }

  type SkillGetPayload<S extends boolean | null | undefined | SkillDefaultArgs> = $Result.GetResult<Prisma.$SkillPayload, S>

  type SkillCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SkillFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SkillCountAggregateInputType | true
    }

  export interface SkillDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Skill'], meta: { name: 'Skill' } }
    /**
     * Find zero or one Skill that matches the filter.
     * @param {SkillFindUniqueArgs} args - Arguments to find a Skill
     * @example
     * // Get one Skill
     * const skill = await prisma.skill.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SkillFindUniqueArgs>(args: SelectSubset<T, SkillFindUniqueArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Skill that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SkillFindUniqueOrThrowArgs} args - Arguments to find a Skill
     * @example
     * // Get one Skill
     * const skill = await prisma.skill.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SkillFindUniqueOrThrowArgs>(args: SelectSubset<T, SkillFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Skill that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillFindFirstArgs} args - Arguments to find a Skill
     * @example
     * // Get one Skill
     * const skill = await prisma.skill.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SkillFindFirstArgs>(args?: SelectSubset<T, SkillFindFirstArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Skill that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillFindFirstOrThrowArgs} args - Arguments to find a Skill
     * @example
     * // Get one Skill
     * const skill = await prisma.skill.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SkillFindFirstOrThrowArgs>(args?: SelectSubset<T, SkillFindFirstOrThrowArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Skills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Skills
     * const skills = await prisma.skill.findMany()
     * 
     * // Get first 10 Skills
     * const skills = await prisma.skill.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const skillWithIdOnly = await prisma.skill.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SkillFindManyArgs>(args?: SelectSubset<T, SkillFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Skill.
     * @param {SkillCreateArgs} args - Arguments to create a Skill.
     * @example
     * // Create one Skill
     * const Skill = await prisma.skill.create({
     *   data: {
     *     // ... data to create a Skill
     *   }
     * })
     * 
     */
    create<T extends SkillCreateArgs>(args: SelectSubset<T, SkillCreateArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Skills.
     * @param {SkillCreateManyArgs} args - Arguments to create many Skills.
     * @example
     * // Create many Skills
     * const skill = await prisma.skill.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SkillCreateManyArgs>(args?: SelectSubset<T, SkillCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Skills and returns the data saved in the database.
     * @param {SkillCreateManyAndReturnArgs} args - Arguments to create many Skills.
     * @example
     * // Create many Skills
     * const skill = await prisma.skill.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Skills and only return the `id`
     * const skillWithIdOnly = await prisma.skill.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SkillCreateManyAndReturnArgs>(args?: SelectSubset<T, SkillCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Skill.
     * @param {SkillDeleteArgs} args - Arguments to delete one Skill.
     * @example
     * // Delete one Skill
     * const Skill = await prisma.skill.delete({
     *   where: {
     *     // ... filter to delete one Skill
     *   }
     * })
     * 
     */
    delete<T extends SkillDeleteArgs>(args: SelectSubset<T, SkillDeleteArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Skill.
     * @param {SkillUpdateArgs} args - Arguments to update one Skill.
     * @example
     * // Update one Skill
     * const skill = await prisma.skill.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SkillUpdateArgs>(args: SelectSubset<T, SkillUpdateArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Skills.
     * @param {SkillDeleteManyArgs} args - Arguments to filter Skills to delete.
     * @example
     * // Delete a few Skills
     * const { count } = await prisma.skill.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SkillDeleteManyArgs>(args?: SelectSubset<T, SkillDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Skills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Skills
     * const skill = await prisma.skill.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SkillUpdateManyArgs>(args: SelectSubset<T, SkillUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Skills and returns the data updated in the database.
     * @param {SkillUpdateManyAndReturnArgs} args - Arguments to update many Skills.
     * @example
     * // Update many Skills
     * const skill = await prisma.skill.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Skills and only return the `id`
     * const skillWithIdOnly = await prisma.skill.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SkillUpdateManyAndReturnArgs>(args: SelectSubset<T, SkillUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Skill.
     * @param {SkillUpsertArgs} args - Arguments to update or create a Skill.
     * @example
     * // Update or create a Skill
     * const skill = await prisma.skill.upsert({
     *   create: {
     *     // ... data to create a Skill
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Skill we want to update
     *   }
     * })
     */
    upsert<T extends SkillUpsertArgs>(args: SelectSubset<T, SkillUpsertArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Skills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillCountArgs} args - Arguments to filter Skills to count.
     * @example
     * // Count the number of Skills
     * const count = await prisma.skill.count({
     *   where: {
     *     // ... the filter for the Skills we want to count
     *   }
     * })
    **/
    count<T extends SkillCountArgs>(
      args?: Subset<T, SkillCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SkillCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Skill.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SkillAggregateArgs>(args: Subset<T, SkillAggregateArgs>): Prisma.PrismaPromise<GetSkillAggregateType<T>>

    /**
     * Group by Skill.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SkillGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SkillGroupByArgs['orderBy'] }
        : { orderBy?: SkillGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SkillGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSkillGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Skill model
   */
  readonly fields: SkillFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Skill.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SkillClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    questions<T extends Skill$questionsArgs<ExtArgs> = {}>(args?: Subset<T, Skill$questionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionSkillPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Skill model
   */
  interface SkillFieldRefs {
    readonly id: FieldRef<"Skill", 'Int'>
    readonly code: FieldRef<"Skill", 'String'>
    readonly label: FieldRef<"Skill", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Skill findUnique
   */
  export type SkillFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter, which Skill to fetch.
     */
    where: SkillWhereUniqueInput
  }

  /**
   * Skill findUniqueOrThrow
   */
  export type SkillFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter, which Skill to fetch.
     */
    where: SkillWhereUniqueInput
  }

  /**
   * Skill findFirst
   */
  export type SkillFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter, which Skill to fetch.
     */
    where?: SkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     */
    orderBy?: SkillOrderByWithRelationInput | SkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Skills.
     */
    cursor?: SkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Skills.
     */
    distinct?: SkillScalarFieldEnum | SkillScalarFieldEnum[]
  }

  /**
   * Skill findFirstOrThrow
   */
  export type SkillFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter, which Skill to fetch.
     */
    where?: SkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     */
    orderBy?: SkillOrderByWithRelationInput | SkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Skills.
     */
    cursor?: SkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Skills.
     */
    distinct?: SkillScalarFieldEnum | SkillScalarFieldEnum[]
  }

  /**
   * Skill findMany
   */
  export type SkillFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter, which Skills to fetch.
     */
    where?: SkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     */
    orderBy?: SkillOrderByWithRelationInput | SkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Skills.
     */
    cursor?: SkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     */
    skip?: number
    distinct?: SkillScalarFieldEnum | SkillScalarFieldEnum[]
  }

  /**
   * Skill create
   */
  export type SkillCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * The data needed to create a Skill.
     */
    data: XOR<SkillCreateInput, SkillUncheckedCreateInput>
  }

  /**
   * Skill createMany
   */
  export type SkillCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Skills.
     */
    data: SkillCreateManyInput | SkillCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Skill createManyAndReturn
   */
  export type SkillCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * The data used to create many Skills.
     */
    data: SkillCreateManyInput | SkillCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Skill update
   */
  export type SkillUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * The data needed to update a Skill.
     */
    data: XOR<SkillUpdateInput, SkillUncheckedUpdateInput>
    /**
     * Choose, which Skill to update.
     */
    where: SkillWhereUniqueInput
  }

  /**
   * Skill updateMany
   */
  export type SkillUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Skills.
     */
    data: XOR<SkillUpdateManyMutationInput, SkillUncheckedUpdateManyInput>
    /**
     * Filter which Skills to update
     */
    where?: SkillWhereInput
    /**
     * Limit how many Skills to update.
     */
    limit?: number
  }

  /**
   * Skill updateManyAndReturn
   */
  export type SkillUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * The data used to update Skills.
     */
    data: XOR<SkillUpdateManyMutationInput, SkillUncheckedUpdateManyInput>
    /**
     * Filter which Skills to update
     */
    where?: SkillWhereInput
    /**
     * Limit how many Skills to update.
     */
    limit?: number
  }

  /**
   * Skill upsert
   */
  export type SkillUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * The filter to search for the Skill to update in case it exists.
     */
    where: SkillWhereUniqueInput
    /**
     * In case the Skill found by the `where` argument doesn't exist, create a new Skill with this data.
     */
    create: XOR<SkillCreateInput, SkillUncheckedCreateInput>
    /**
     * In case the Skill was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SkillUpdateInput, SkillUncheckedUpdateInput>
  }

  /**
   * Skill delete
   */
  export type SkillDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter which Skill to delete.
     */
    where: SkillWhereUniqueInput
  }

  /**
   * Skill deleteMany
   */
  export type SkillDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Skills to delete
     */
    where?: SkillWhereInput
    /**
     * Limit how many Skills to delete.
     */
    limit?: number
  }

  /**
   * Skill.questions
   */
  export type Skill$questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSkill
     */
    select?: QuestionSkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSkill
     */
    omit?: QuestionSkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSkillInclude<ExtArgs> | null
    where?: QuestionSkillWhereInput
    orderBy?: QuestionSkillOrderByWithRelationInput | QuestionSkillOrderByWithRelationInput[]
    cursor?: QuestionSkillWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionSkillScalarFieldEnum | QuestionSkillScalarFieldEnum[]
  }

  /**
   * Skill without action
   */
  export type SkillDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Skill
     */
    omit?: SkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
  }


  /**
   * Model Stimulus
   */

  export type AggregateStimulus = {
    _count: StimulusCountAggregateOutputType | null
    _avg: StimulusAvgAggregateOutputType | null
    _sum: StimulusSumAggregateOutputType | null
    _min: StimulusMinAggregateOutputType | null
    _max: StimulusMaxAggregateOutputType | null
  }

  export type StimulusAvgAggregateOutputType = {
    id: number | null
  }

  export type StimulusSumAggregateOutputType = {
    id: number | null
  }

  export type StimulusMinAggregateOutputType = {
    id: number | null
    contentHtml: string | null
    contentText: string | null
    sourceRef: string | null
  }

  export type StimulusMaxAggregateOutputType = {
    id: number | null
    contentHtml: string | null
    contentText: string | null
    sourceRef: string | null
  }

  export type StimulusCountAggregateOutputType = {
    id: number
    contentHtml: number
    contentText: number
    sourceRef: number
    _all: number
  }


  export type StimulusAvgAggregateInputType = {
    id?: true
  }

  export type StimulusSumAggregateInputType = {
    id?: true
  }

  export type StimulusMinAggregateInputType = {
    id?: true
    contentHtml?: true
    contentText?: true
    sourceRef?: true
  }

  export type StimulusMaxAggregateInputType = {
    id?: true
    contentHtml?: true
    contentText?: true
    sourceRef?: true
  }

  export type StimulusCountAggregateInputType = {
    id?: true
    contentHtml?: true
    contentText?: true
    sourceRef?: true
    _all?: true
  }

  export type StimulusAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stimulus to aggregate.
     */
    where?: StimulusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stimuli to fetch.
     */
    orderBy?: StimulusOrderByWithRelationInput | StimulusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StimulusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stimuli from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stimuli.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stimuli
    **/
    _count?: true | StimulusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StimulusAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StimulusSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StimulusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StimulusMaxAggregateInputType
  }

  export type GetStimulusAggregateType<T extends StimulusAggregateArgs> = {
        [P in keyof T & keyof AggregateStimulus]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStimulus[P]>
      : GetScalarType<T[P], AggregateStimulus[P]>
  }




  export type StimulusGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StimulusWhereInput
    orderBy?: StimulusOrderByWithAggregationInput | StimulusOrderByWithAggregationInput[]
    by: StimulusScalarFieldEnum[] | StimulusScalarFieldEnum
    having?: StimulusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StimulusCountAggregateInputType | true
    _avg?: StimulusAvgAggregateInputType
    _sum?: StimulusSumAggregateInputType
    _min?: StimulusMinAggregateInputType
    _max?: StimulusMaxAggregateInputType
  }

  export type StimulusGroupByOutputType = {
    id: number
    contentHtml: string | null
    contentText: string | null
    sourceRef: string | null
    _count: StimulusCountAggregateOutputType | null
    _avg: StimulusAvgAggregateOutputType | null
    _sum: StimulusSumAggregateOutputType | null
    _min: StimulusMinAggregateOutputType | null
    _max: StimulusMaxAggregateOutputType | null
  }

  type GetStimulusGroupByPayload<T extends StimulusGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StimulusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StimulusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StimulusGroupByOutputType[P]>
            : GetScalarType<T[P], StimulusGroupByOutputType[P]>
        }
      >
    >


  export type StimulusSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contentHtml?: boolean
    contentText?: boolean
    sourceRef?: boolean
    assets?: boolean | Stimulus$assetsArgs<ExtArgs>
    questions?: boolean | Stimulus$questionsArgs<ExtArgs>
    _count?: boolean | StimulusCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stimulus"]>

  export type StimulusSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contentHtml?: boolean
    contentText?: boolean
    sourceRef?: boolean
  }, ExtArgs["result"]["stimulus"]>

  export type StimulusSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contentHtml?: boolean
    contentText?: boolean
    sourceRef?: boolean
  }, ExtArgs["result"]["stimulus"]>

  export type StimulusSelectScalar = {
    id?: boolean
    contentHtml?: boolean
    contentText?: boolean
    sourceRef?: boolean
  }

  export type StimulusOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "contentHtml" | "contentText" | "sourceRef", ExtArgs["result"]["stimulus"]>
  export type StimulusInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assets?: boolean | Stimulus$assetsArgs<ExtArgs>
    questions?: boolean | Stimulus$questionsArgs<ExtArgs>
    _count?: boolean | StimulusCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StimulusIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type StimulusIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $StimulusPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Stimulus"
    objects: {
      assets: Prisma.$StimulusAssetPayload<ExtArgs>[]
      questions: Prisma.$QuestionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      contentHtml: string | null
      contentText: string | null
      sourceRef: string | null
    }, ExtArgs["result"]["stimulus"]>
    composites: {}
  }

  type StimulusGetPayload<S extends boolean | null | undefined | StimulusDefaultArgs> = $Result.GetResult<Prisma.$StimulusPayload, S>

  type StimulusCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StimulusFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StimulusCountAggregateInputType | true
    }

  export interface StimulusDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Stimulus'], meta: { name: 'Stimulus' } }
    /**
     * Find zero or one Stimulus that matches the filter.
     * @param {StimulusFindUniqueArgs} args - Arguments to find a Stimulus
     * @example
     * // Get one Stimulus
     * const stimulus = await prisma.stimulus.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StimulusFindUniqueArgs>(args: SelectSubset<T, StimulusFindUniqueArgs<ExtArgs>>): Prisma__StimulusClient<$Result.GetResult<Prisma.$StimulusPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Stimulus that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StimulusFindUniqueOrThrowArgs} args - Arguments to find a Stimulus
     * @example
     * // Get one Stimulus
     * const stimulus = await prisma.stimulus.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StimulusFindUniqueOrThrowArgs>(args: SelectSubset<T, StimulusFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StimulusClient<$Result.GetResult<Prisma.$StimulusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Stimulus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StimulusFindFirstArgs} args - Arguments to find a Stimulus
     * @example
     * // Get one Stimulus
     * const stimulus = await prisma.stimulus.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StimulusFindFirstArgs>(args?: SelectSubset<T, StimulusFindFirstArgs<ExtArgs>>): Prisma__StimulusClient<$Result.GetResult<Prisma.$StimulusPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Stimulus that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StimulusFindFirstOrThrowArgs} args - Arguments to find a Stimulus
     * @example
     * // Get one Stimulus
     * const stimulus = await prisma.stimulus.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StimulusFindFirstOrThrowArgs>(args?: SelectSubset<T, StimulusFindFirstOrThrowArgs<ExtArgs>>): Prisma__StimulusClient<$Result.GetResult<Prisma.$StimulusPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Stimuli that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StimulusFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stimuli
     * const stimuli = await prisma.stimulus.findMany()
     * 
     * // Get first 10 Stimuli
     * const stimuli = await prisma.stimulus.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stimulusWithIdOnly = await prisma.stimulus.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StimulusFindManyArgs>(args?: SelectSubset<T, StimulusFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StimulusPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Stimulus.
     * @param {StimulusCreateArgs} args - Arguments to create a Stimulus.
     * @example
     * // Create one Stimulus
     * const Stimulus = await prisma.stimulus.create({
     *   data: {
     *     // ... data to create a Stimulus
     *   }
     * })
     * 
     */
    create<T extends StimulusCreateArgs>(args: SelectSubset<T, StimulusCreateArgs<ExtArgs>>): Prisma__StimulusClient<$Result.GetResult<Prisma.$StimulusPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Stimuli.
     * @param {StimulusCreateManyArgs} args - Arguments to create many Stimuli.
     * @example
     * // Create many Stimuli
     * const stimulus = await prisma.stimulus.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StimulusCreateManyArgs>(args?: SelectSubset<T, StimulusCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Stimuli and returns the data saved in the database.
     * @param {StimulusCreateManyAndReturnArgs} args - Arguments to create many Stimuli.
     * @example
     * // Create many Stimuli
     * const stimulus = await prisma.stimulus.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Stimuli and only return the `id`
     * const stimulusWithIdOnly = await prisma.stimulus.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StimulusCreateManyAndReturnArgs>(args?: SelectSubset<T, StimulusCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StimulusPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Stimulus.
     * @param {StimulusDeleteArgs} args - Arguments to delete one Stimulus.
     * @example
     * // Delete one Stimulus
     * const Stimulus = await prisma.stimulus.delete({
     *   where: {
     *     // ... filter to delete one Stimulus
     *   }
     * })
     * 
     */
    delete<T extends StimulusDeleteArgs>(args: SelectSubset<T, StimulusDeleteArgs<ExtArgs>>): Prisma__StimulusClient<$Result.GetResult<Prisma.$StimulusPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Stimulus.
     * @param {StimulusUpdateArgs} args - Arguments to update one Stimulus.
     * @example
     * // Update one Stimulus
     * const stimulus = await prisma.stimulus.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StimulusUpdateArgs>(args: SelectSubset<T, StimulusUpdateArgs<ExtArgs>>): Prisma__StimulusClient<$Result.GetResult<Prisma.$StimulusPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Stimuli.
     * @param {StimulusDeleteManyArgs} args - Arguments to filter Stimuli to delete.
     * @example
     * // Delete a few Stimuli
     * const { count } = await prisma.stimulus.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StimulusDeleteManyArgs>(args?: SelectSubset<T, StimulusDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stimuli.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StimulusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stimuli
     * const stimulus = await prisma.stimulus.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StimulusUpdateManyArgs>(args: SelectSubset<T, StimulusUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stimuli and returns the data updated in the database.
     * @param {StimulusUpdateManyAndReturnArgs} args - Arguments to update many Stimuli.
     * @example
     * // Update many Stimuli
     * const stimulus = await prisma.stimulus.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Stimuli and only return the `id`
     * const stimulusWithIdOnly = await prisma.stimulus.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StimulusUpdateManyAndReturnArgs>(args: SelectSubset<T, StimulusUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StimulusPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Stimulus.
     * @param {StimulusUpsertArgs} args - Arguments to update or create a Stimulus.
     * @example
     * // Update or create a Stimulus
     * const stimulus = await prisma.stimulus.upsert({
     *   create: {
     *     // ... data to create a Stimulus
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Stimulus we want to update
     *   }
     * })
     */
    upsert<T extends StimulusUpsertArgs>(args: SelectSubset<T, StimulusUpsertArgs<ExtArgs>>): Prisma__StimulusClient<$Result.GetResult<Prisma.$StimulusPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Stimuli.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StimulusCountArgs} args - Arguments to filter Stimuli to count.
     * @example
     * // Count the number of Stimuli
     * const count = await prisma.stimulus.count({
     *   where: {
     *     // ... the filter for the Stimuli we want to count
     *   }
     * })
    **/
    count<T extends StimulusCountArgs>(
      args?: Subset<T, StimulusCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StimulusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Stimulus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StimulusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StimulusAggregateArgs>(args: Subset<T, StimulusAggregateArgs>): Prisma.PrismaPromise<GetStimulusAggregateType<T>>

    /**
     * Group by Stimulus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StimulusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StimulusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StimulusGroupByArgs['orderBy'] }
        : { orderBy?: StimulusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StimulusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStimulusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Stimulus model
   */
  readonly fields: StimulusFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Stimulus.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StimulusClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    assets<T extends Stimulus$assetsArgs<ExtArgs> = {}>(args?: Subset<T, Stimulus$assetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StimulusAssetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    questions<T extends Stimulus$questionsArgs<ExtArgs> = {}>(args?: Subset<T, Stimulus$questionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Stimulus model
   */
  interface StimulusFieldRefs {
    readonly id: FieldRef<"Stimulus", 'Int'>
    readonly contentHtml: FieldRef<"Stimulus", 'String'>
    readonly contentText: FieldRef<"Stimulus", 'String'>
    readonly sourceRef: FieldRef<"Stimulus", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Stimulus findUnique
   */
  export type StimulusFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stimulus
     */
    select?: StimulusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stimulus
     */
    omit?: StimulusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StimulusInclude<ExtArgs> | null
    /**
     * Filter, which Stimulus to fetch.
     */
    where: StimulusWhereUniqueInput
  }

  /**
   * Stimulus findUniqueOrThrow
   */
  export type StimulusFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stimulus
     */
    select?: StimulusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stimulus
     */
    omit?: StimulusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StimulusInclude<ExtArgs> | null
    /**
     * Filter, which Stimulus to fetch.
     */
    where: StimulusWhereUniqueInput
  }

  /**
   * Stimulus findFirst
   */
  export type StimulusFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stimulus
     */
    select?: StimulusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stimulus
     */
    omit?: StimulusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StimulusInclude<ExtArgs> | null
    /**
     * Filter, which Stimulus to fetch.
     */
    where?: StimulusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stimuli to fetch.
     */
    orderBy?: StimulusOrderByWithRelationInput | StimulusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stimuli.
     */
    cursor?: StimulusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stimuli from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stimuli.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stimuli.
     */
    distinct?: StimulusScalarFieldEnum | StimulusScalarFieldEnum[]
  }

  /**
   * Stimulus findFirstOrThrow
   */
  export type StimulusFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stimulus
     */
    select?: StimulusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stimulus
     */
    omit?: StimulusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StimulusInclude<ExtArgs> | null
    /**
     * Filter, which Stimulus to fetch.
     */
    where?: StimulusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stimuli to fetch.
     */
    orderBy?: StimulusOrderByWithRelationInput | StimulusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stimuli.
     */
    cursor?: StimulusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stimuli from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stimuli.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stimuli.
     */
    distinct?: StimulusScalarFieldEnum | StimulusScalarFieldEnum[]
  }

  /**
   * Stimulus findMany
   */
  export type StimulusFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stimulus
     */
    select?: StimulusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stimulus
     */
    omit?: StimulusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StimulusInclude<ExtArgs> | null
    /**
     * Filter, which Stimuli to fetch.
     */
    where?: StimulusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stimuli to fetch.
     */
    orderBy?: StimulusOrderByWithRelationInput | StimulusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stimuli.
     */
    cursor?: StimulusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stimuli from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stimuli.
     */
    skip?: number
    distinct?: StimulusScalarFieldEnum | StimulusScalarFieldEnum[]
  }

  /**
   * Stimulus create
   */
  export type StimulusCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stimulus
     */
    select?: StimulusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stimulus
     */
    omit?: StimulusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StimulusInclude<ExtArgs> | null
    /**
     * The data needed to create a Stimulus.
     */
    data?: XOR<StimulusCreateInput, StimulusUncheckedCreateInput>
  }

  /**
   * Stimulus createMany
   */
  export type StimulusCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Stimuli.
     */
    data: StimulusCreateManyInput | StimulusCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Stimulus createManyAndReturn
   */
  export type StimulusCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stimulus
     */
    select?: StimulusSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Stimulus
     */
    omit?: StimulusOmit<ExtArgs> | null
    /**
     * The data used to create many Stimuli.
     */
    data: StimulusCreateManyInput | StimulusCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Stimulus update
   */
  export type StimulusUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stimulus
     */
    select?: StimulusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stimulus
     */
    omit?: StimulusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StimulusInclude<ExtArgs> | null
    /**
     * The data needed to update a Stimulus.
     */
    data: XOR<StimulusUpdateInput, StimulusUncheckedUpdateInput>
    /**
     * Choose, which Stimulus to update.
     */
    where: StimulusWhereUniqueInput
  }

  /**
   * Stimulus updateMany
   */
  export type StimulusUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Stimuli.
     */
    data: XOR<StimulusUpdateManyMutationInput, StimulusUncheckedUpdateManyInput>
    /**
     * Filter which Stimuli to update
     */
    where?: StimulusWhereInput
    /**
     * Limit how many Stimuli to update.
     */
    limit?: number
  }

  /**
   * Stimulus updateManyAndReturn
   */
  export type StimulusUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stimulus
     */
    select?: StimulusSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Stimulus
     */
    omit?: StimulusOmit<ExtArgs> | null
    /**
     * The data used to update Stimuli.
     */
    data: XOR<StimulusUpdateManyMutationInput, StimulusUncheckedUpdateManyInput>
    /**
     * Filter which Stimuli to update
     */
    where?: StimulusWhereInput
    /**
     * Limit how many Stimuli to update.
     */
    limit?: number
  }

  /**
   * Stimulus upsert
   */
  export type StimulusUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stimulus
     */
    select?: StimulusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stimulus
     */
    omit?: StimulusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StimulusInclude<ExtArgs> | null
    /**
     * The filter to search for the Stimulus to update in case it exists.
     */
    where: StimulusWhereUniqueInput
    /**
     * In case the Stimulus found by the `where` argument doesn't exist, create a new Stimulus with this data.
     */
    create: XOR<StimulusCreateInput, StimulusUncheckedCreateInput>
    /**
     * In case the Stimulus was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StimulusUpdateInput, StimulusUncheckedUpdateInput>
  }

  /**
   * Stimulus delete
   */
  export type StimulusDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stimulus
     */
    select?: StimulusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stimulus
     */
    omit?: StimulusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StimulusInclude<ExtArgs> | null
    /**
     * Filter which Stimulus to delete.
     */
    where: StimulusWhereUniqueInput
  }

  /**
   * Stimulus deleteMany
   */
  export type StimulusDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stimuli to delete
     */
    where?: StimulusWhereInput
    /**
     * Limit how many Stimuli to delete.
     */
    limit?: number
  }

  /**
   * Stimulus.assets
   */
  export type Stimulus$assetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StimulusAsset
     */
    select?: StimulusAssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StimulusAsset
     */
    omit?: StimulusAssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StimulusAssetInclude<ExtArgs> | null
    where?: StimulusAssetWhereInput
    orderBy?: StimulusAssetOrderByWithRelationInput | StimulusAssetOrderByWithRelationInput[]
    cursor?: StimulusAssetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StimulusAssetScalarFieldEnum | StimulusAssetScalarFieldEnum[]
  }

  /**
   * Stimulus.questions
   */
  export type Stimulus$questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    where?: QuestionWhereInput
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    cursor?: QuestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Stimulus without action
   */
  export type StimulusDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stimulus
     */
    select?: StimulusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stimulus
     */
    omit?: StimulusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StimulusInclude<ExtArgs> | null
  }


  /**
   * Model StimulusAsset
   */

  export type AggregateStimulusAsset = {
    _count: StimulusAssetCountAggregateOutputType | null
    _avg: StimulusAssetAvgAggregateOutputType | null
    _sum: StimulusAssetSumAggregateOutputType | null
    _min: StimulusAssetMinAggregateOutputType | null
    _max: StimulusAssetMaxAggregateOutputType | null
  }

  export type StimulusAssetAvgAggregateOutputType = {
    id: number | null
    stimulusId: number | null
    pageHint: number | null
  }

  export type StimulusAssetSumAggregateOutputType = {
    id: number | null
    stimulusId: number | null
    pageHint: number | null
  }

  export type StimulusAssetMinAggregateOutputType = {
    id: number | null
    stimulusId: number | null
    storageKey: string | null
    caption: string | null
    pageHint: number | null
  }

  export type StimulusAssetMaxAggregateOutputType = {
    id: number | null
    stimulusId: number | null
    storageKey: string | null
    caption: string | null
    pageHint: number | null
  }

  export type StimulusAssetCountAggregateOutputType = {
    id: number
    stimulusId: number
    storageKey: number
    caption: number
    pageHint: number
    _all: number
  }


  export type StimulusAssetAvgAggregateInputType = {
    id?: true
    stimulusId?: true
    pageHint?: true
  }

  export type StimulusAssetSumAggregateInputType = {
    id?: true
    stimulusId?: true
    pageHint?: true
  }

  export type StimulusAssetMinAggregateInputType = {
    id?: true
    stimulusId?: true
    storageKey?: true
    caption?: true
    pageHint?: true
  }

  export type StimulusAssetMaxAggregateInputType = {
    id?: true
    stimulusId?: true
    storageKey?: true
    caption?: true
    pageHint?: true
  }

  export type StimulusAssetCountAggregateInputType = {
    id?: true
    stimulusId?: true
    storageKey?: true
    caption?: true
    pageHint?: true
    _all?: true
  }

  export type StimulusAssetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StimulusAsset to aggregate.
     */
    where?: StimulusAssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StimulusAssets to fetch.
     */
    orderBy?: StimulusAssetOrderByWithRelationInput | StimulusAssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StimulusAssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StimulusAssets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StimulusAssets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StimulusAssets
    **/
    _count?: true | StimulusAssetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StimulusAssetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StimulusAssetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StimulusAssetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StimulusAssetMaxAggregateInputType
  }

  export type GetStimulusAssetAggregateType<T extends StimulusAssetAggregateArgs> = {
        [P in keyof T & keyof AggregateStimulusAsset]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStimulusAsset[P]>
      : GetScalarType<T[P], AggregateStimulusAsset[P]>
  }




  export type StimulusAssetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StimulusAssetWhereInput
    orderBy?: StimulusAssetOrderByWithAggregationInput | StimulusAssetOrderByWithAggregationInput[]
    by: StimulusAssetScalarFieldEnum[] | StimulusAssetScalarFieldEnum
    having?: StimulusAssetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StimulusAssetCountAggregateInputType | true
    _avg?: StimulusAssetAvgAggregateInputType
    _sum?: StimulusAssetSumAggregateInputType
    _min?: StimulusAssetMinAggregateInputType
    _max?: StimulusAssetMaxAggregateInputType
  }

  export type StimulusAssetGroupByOutputType = {
    id: number
    stimulusId: number
    storageKey: string
    caption: string | null
    pageHint: number | null
    _count: StimulusAssetCountAggregateOutputType | null
    _avg: StimulusAssetAvgAggregateOutputType | null
    _sum: StimulusAssetSumAggregateOutputType | null
    _min: StimulusAssetMinAggregateOutputType | null
    _max: StimulusAssetMaxAggregateOutputType | null
  }

  type GetStimulusAssetGroupByPayload<T extends StimulusAssetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StimulusAssetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StimulusAssetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StimulusAssetGroupByOutputType[P]>
            : GetScalarType<T[P], StimulusAssetGroupByOutputType[P]>
        }
      >
    >


  export type StimulusAssetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stimulusId?: boolean
    storageKey?: boolean
    caption?: boolean
    pageHint?: boolean
    stimulus?: boolean | StimulusDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stimulusAsset"]>

  export type StimulusAssetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stimulusId?: boolean
    storageKey?: boolean
    caption?: boolean
    pageHint?: boolean
    stimulus?: boolean | StimulusDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stimulusAsset"]>

  export type StimulusAssetSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stimulusId?: boolean
    storageKey?: boolean
    caption?: boolean
    pageHint?: boolean
    stimulus?: boolean | StimulusDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stimulusAsset"]>

  export type StimulusAssetSelectScalar = {
    id?: boolean
    stimulusId?: boolean
    storageKey?: boolean
    caption?: boolean
    pageHint?: boolean
  }

  export type StimulusAssetOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "stimulusId" | "storageKey" | "caption" | "pageHint", ExtArgs["result"]["stimulusAsset"]>
  export type StimulusAssetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stimulus?: boolean | StimulusDefaultArgs<ExtArgs>
  }
  export type StimulusAssetIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stimulus?: boolean | StimulusDefaultArgs<ExtArgs>
  }
  export type StimulusAssetIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stimulus?: boolean | StimulusDefaultArgs<ExtArgs>
  }

  export type $StimulusAssetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StimulusAsset"
    objects: {
      stimulus: Prisma.$StimulusPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      stimulusId: number
      storageKey: string
      caption: string | null
      pageHint: number | null
    }, ExtArgs["result"]["stimulusAsset"]>
    composites: {}
  }

  type StimulusAssetGetPayload<S extends boolean | null | undefined | StimulusAssetDefaultArgs> = $Result.GetResult<Prisma.$StimulusAssetPayload, S>

  type StimulusAssetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StimulusAssetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StimulusAssetCountAggregateInputType | true
    }

  export interface StimulusAssetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StimulusAsset'], meta: { name: 'StimulusAsset' } }
    /**
     * Find zero or one StimulusAsset that matches the filter.
     * @param {StimulusAssetFindUniqueArgs} args - Arguments to find a StimulusAsset
     * @example
     * // Get one StimulusAsset
     * const stimulusAsset = await prisma.stimulusAsset.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StimulusAssetFindUniqueArgs>(args: SelectSubset<T, StimulusAssetFindUniqueArgs<ExtArgs>>): Prisma__StimulusAssetClient<$Result.GetResult<Prisma.$StimulusAssetPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StimulusAsset that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StimulusAssetFindUniqueOrThrowArgs} args - Arguments to find a StimulusAsset
     * @example
     * // Get one StimulusAsset
     * const stimulusAsset = await prisma.stimulusAsset.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StimulusAssetFindUniqueOrThrowArgs>(args: SelectSubset<T, StimulusAssetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StimulusAssetClient<$Result.GetResult<Prisma.$StimulusAssetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StimulusAsset that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StimulusAssetFindFirstArgs} args - Arguments to find a StimulusAsset
     * @example
     * // Get one StimulusAsset
     * const stimulusAsset = await prisma.stimulusAsset.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StimulusAssetFindFirstArgs>(args?: SelectSubset<T, StimulusAssetFindFirstArgs<ExtArgs>>): Prisma__StimulusAssetClient<$Result.GetResult<Prisma.$StimulusAssetPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StimulusAsset that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StimulusAssetFindFirstOrThrowArgs} args - Arguments to find a StimulusAsset
     * @example
     * // Get one StimulusAsset
     * const stimulusAsset = await prisma.stimulusAsset.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StimulusAssetFindFirstOrThrowArgs>(args?: SelectSubset<T, StimulusAssetFindFirstOrThrowArgs<ExtArgs>>): Prisma__StimulusAssetClient<$Result.GetResult<Prisma.$StimulusAssetPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StimulusAssets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StimulusAssetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StimulusAssets
     * const stimulusAssets = await prisma.stimulusAsset.findMany()
     * 
     * // Get first 10 StimulusAssets
     * const stimulusAssets = await prisma.stimulusAsset.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stimulusAssetWithIdOnly = await prisma.stimulusAsset.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StimulusAssetFindManyArgs>(args?: SelectSubset<T, StimulusAssetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StimulusAssetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StimulusAsset.
     * @param {StimulusAssetCreateArgs} args - Arguments to create a StimulusAsset.
     * @example
     * // Create one StimulusAsset
     * const StimulusAsset = await prisma.stimulusAsset.create({
     *   data: {
     *     // ... data to create a StimulusAsset
     *   }
     * })
     * 
     */
    create<T extends StimulusAssetCreateArgs>(args: SelectSubset<T, StimulusAssetCreateArgs<ExtArgs>>): Prisma__StimulusAssetClient<$Result.GetResult<Prisma.$StimulusAssetPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StimulusAssets.
     * @param {StimulusAssetCreateManyArgs} args - Arguments to create many StimulusAssets.
     * @example
     * // Create many StimulusAssets
     * const stimulusAsset = await prisma.stimulusAsset.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StimulusAssetCreateManyArgs>(args?: SelectSubset<T, StimulusAssetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StimulusAssets and returns the data saved in the database.
     * @param {StimulusAssetCreateManyAndReturnArgs} args - Arguments to create many StimulusAssets.
     * @example
     * // Create many StimulusAssets
     * const stimulusAsset = await prisma.stimulusAsset.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StimulusAssets and only return the `id`
     * const stimulusAssetWithIdOnly = await prisma.stimulusAsset.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StimulusAssetCreateManyAndReturnArgs>(args?: SelectSubset<T, StimulusAssetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StimulusAssetPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StimulusAsset.
     * @param {StimulusAssetDeleteArgs} args - Arguments to delete one StimulusAsset.
     * @example
     * // Delete one StimulusAsset
     * const StimulusAsset = await prisma.stimulusAsset.delete({
     *   where: {
     *     // ... filter to delete one StimulusAsset
     *   }
     * })
     * 
     */
    delete<T extends StimulusAssetDeleteArgs>(args: SelectSubset<T, StimulusAssetDeleteArgs<ExtArgs>>): Prisma__StimulusAssetClient<$Result.GetResult<Prisma.$StimulusAssetPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StimulusAsset.
     * @param {StimulusAssetUpdateArgs} args - Arguments to update one StimulusAsset.
     * @example
     * // Update one StimulusAsset
     * const stimulusAsset = await prisma.stimulusAsset.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StimulusAssetUpdateArgs>(args: SelectSubset<T, StimulusAssetUpdateArgs<ExtArgs>>): Prisma__StimulusAssetClient<$Result.GetResult<Prisma.$StimulusAssetPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StimulusAssets.
     * @param {StimulusAssetDeleteManyArgs} args - Arguments to filter StimulusAssets to delete.
     * @example
     * // Delete a few StimulusAssets
     * const { count } = await prisma.stimulusAsset.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StimulusAssetDeleteManyArgs>(args?: SelectSubset<T, StimulusAssetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StimulusAssets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StimulusAssetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StimulusAssets
     * const stimulusAsset = await prisma.stimulusAsset.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StimulusAssetUpdateManyArgs>(args: SelectSubset<T, StimulusAssetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StimulusAssets and returns the data updated in the database.
     * @param {StimulusAssetUpdateManyAndReturnArgs} args - Arguments to update many StimulusAssets.
     * @example
     * // Update many StimulusAssets
     * const stimulusAsset = await prisma.stimulusAsset.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StimulusAssets and only return the `id`
     * const stimulusAssetWithIdOnly = await prisma.stimulusAsset.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StimulusAssetUpdateManyAndReturnArgs>(args: SelectSubset<T, StimulusAssetUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StimulusAssetPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StimulusAsset.
     * @param {StimulusAssetUpsertArgs} args - Arguments to update or create a StimulusAsset.
     * @example
     * // Update or create a StimulusAsset
     * const stimulusAsset = await prisma.stimulusAsset.upsert({
     *   create: {
     *     // ... data to create a StimulusAsset
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StimulusAsset we want to update
     *   }
     * })
     */
    upsert<T extends StimulusAssetUpsertArgs>(args: SelectSubset<T, StimulusAssetUpsertArgs<ExtArgs>>): Prisma__StimulusAssetClient<$Result.GetResult<Prisma.$StimulusAssetPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StimulusAssets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StimulusAssetCountArgs} args - Arguments to filter StimulusAssets to count.
     * @example
     * // Count the number of StimulusAssets
     * const count = await prisma.stimulusAsset.count({
     *   where: {
     *     // ... the filter for the StimulusAssets we want to count
     *   }
     * })
    **/
    count<T extends StimulusAssetCountArgs>(
      args?: Subset<T, StimulusAssetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StimulusAssetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StimulusAsset.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StimulusAssetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StimulusAssetAggregateArgs>(args: Subset<T, StimulusAssetAggregateArgs>): Prisma.PrismaPromise<GetStimulusAssetAggregateType<T>>

    /**
     * Group by StimulusAsset.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StimulusAssetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StimulusAssetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StimulusAssetGroupByArgs['orderBy'] }
        : { orderBy?: StimulusAssetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StimulusAssetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStimulusAssetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StimulusAsset model
   */
  readonly fields: StimulusAssetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StimulusAsset.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StimulusAssetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    stimulus<T extends StimulusDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StimulusDefaultArgs<ExtArgs>>): Prisma__StimulusClient<$Result.GetResult<Prisma.$StimulusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StimulusAsset model
   */
  interface StimulusAssetFieldRefs {
    readonly id: FieldRef<"StimulusAsset", 'Int'>
    readonly stimulusId: FieldRef<"StimulusAsset", 'Int'>
    readonly storageKey: FieldRef<"StimulusAsset", 'String'>
    readonly caption: FieldRef<"StimulusAsset", 'String'>
    readonly pageHint: FieldRef<"StimulusAsset", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * StimulusAsset findUnique
   */
  export type StimulusAssetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StimulusAsset
     */
    select?: StimulusAssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StimulusAsset
     */
    omit?: StimulusAssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StimulusAssetInclude<ExtArgs> | null
    /**
     * Filter, which StimulusAsset to fetch.
     */
    where: StimulusAssetWhereUniqueInput
  }

  /**
   * StimulusAsset findUniqueOrThrow
   */
  export type StimulusAssetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StimulusAsset
     */
    select?: StimulusAssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StimulusAsset
     */
    omit?: StimulusAssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StimulusAssetInclude<ExtArgs> | null
    /**
     * Filter, which StimulusAsset to fetch.
     */
    where: StimulusAssetWhereUniqueInput
  }

  /**
   * StimulusAsset findFirst
   */
  export type StimulusAssetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StimulusAsset
     */
    select?: StimulusAssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StimulusAsset
     */
    omit?: StimulusAssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StimulusAssetInclude<ExtArgs> | null
    /**
     * Filter, which StimulusAsset to fetch.
     */
    where?: StimulusAssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StimulusAssets to fetch.
     */
    orderBy?: StimulusAssetOrderByWithRelationInput | StimulusAssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StimulusAssets.
     */
    cursor?: StimulusAssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StimulusAssets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StimulusAssets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StimulusAssets.
     */
    distinct?: StimulusAssetScalarFieldEnum | StimulusAssetScalarFieldEnum[]
  }

  /**
   * StimulusAsset findFirstOrThrow
   */
  export type StimulusAssetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StimulusAsset
     */
    select?: StimulusAssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StimulusAsset
     */
    omit?: StimulusAssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StimulusAssetInclude<ExtArgs> | null
    /**
     * Filter, which StimulusAsset to fetch.
     */
    where?: StimulusAssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StimulusAssets to fetch.
     */
    orderBy?: StimulusAssetOrderByWithRelationInput | StimulusAssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StimulusAssets.
     */
    cursor?: StimulusAssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StimulusAssets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StimulusAssets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StimulusAssets.
     */
    distinct?: StimulusAssetScalarFieldEnum | StimulusAssetScalarFieldEnum[]
  }

  /**
   * StimulusAsset findMany
   */
  export type StimulusAssetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StimulusAsset
     */
    select?: StimulusAssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StimulusAsset
     */
    omit?: StimulusAssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StimulusAssetInclude<ExtArgs> | null
    /**
     * Filter, which StimulusAssets to fetch.
     */
    where?: StimulusAssetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StimulusAssets to fetch.
     */
    orderBy?: StimulusAssetOrderByWithRelationInput | StimulusAssetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StimulusAssets.
     */
    cursor?: StimulusAssetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StimulusAssets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StimulusAssets.
     */
    skip?: number
    distinct?: StimulusAssetScalarFieldEnum | StimulusAssetScalarFieldEnum[]
  }

  /**
   * StimulusAsset create
   */
  export type StimulusAssetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StimulusAsset
     */
    select?: StimulusAssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StimulusAsset
     */
    omit?: StimulusAssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StimulusAssetInclude<ExtArgs> | null
    /**
     * The data needed to create a StimulusAsset.
     */
    data: XOR<StimulusAssetCreateInput, StimulusAssetUncheckedCreateInput>
  }

  /**
   * StimulusAsset createMany
   */
  export type StimulusAssetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StimulusAssets.
     */
    data: StimulusAssetCreateManyInput | StimulusAssetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StimulusAsset createManyAndReturn
   */
  export type StimulusAssetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StimulusAsset
     */
    select?: StimulusAssetSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StimulusAsset
     */
    omit?: StimulusAssetOmit<ExtArgs> | null
    /**
     * The data used to create many StimulusAssets.
     */
    data: StimulusAssetCreateManyInput | StimulusAssetCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StimulusAssetIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StimulusAsset update
   */
  export type StimulusAssetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StimulusAsset
     */
    select?: StimulusAssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StimulusAsset
     */
    omit?: StimulusAssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StimulusAssetInclude<ExtArgs> | null
    /**
     * The data needed to update a StimulusAsset.
     */
    data: XOR<StimulusAssetUpdateInput, StimulusAssetUncheckedUpdateInput>
    /**
     * Choose, which StimulusAsset to update.
     */
    where: StimulusAssetWhereUniqueInput
  }

  /**
   * StimulusAsset updateMany
   */
  export type StimulusAssetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StimulusAssets.
     */
    data: XOR<StimulusAssetUpdateManyMutationInput, StimulusAssetUncheckedUpdateManyInput>
    /**
     * Filter which StimulusAssets to update
     */
    where?: StimulusAssetWhereInput
    /**
     * Limit how many StimulusAssets to update.
     */
    limit?: number
  }

  /**
   * StimulusAsset updateManyAndReturn
   */
  export type StimulusAssetUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StimulusAsset
     */
    select?: StimulusAssetSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StimulusAsset
     */
    omit?: StimulusAssetOmit<ExtArgs> | null
    /**
     * The data used to update StimulusAssets.
     */
    data: XOR<StimulusAssetUpdateManyMutationInput, StimulusAssetUncheckedUpdateManyInput>
    /**
     * Filter which StimulusAssets to update
     */
    where?: StimulusAssetWhereInput
    /**
     * Limit how many StimulusAssets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StimulusAssetIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StimulusAsset upsert
   */
  export type StimulusAssetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StimulusAsset
     */
    select?: StimulusAssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StimulusAsset
     */
    omit?: StimulusAssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StimulusAssetInclude<ExtArgs> | null
    /**
     * The filter to search for the StimulusAsset to update in case it exists.
     */
    where: StimulusAssetWhereUniqueInput
    /**
     * In case the StimulusAsset found by the `where` argument doesn't exist, create a new StimulusAsset with this data.
     */
    create: XOR<StimulusAssetCreateInput, StimulusAssetUncheckedCreateInput>
    /**
     * In case the StimulusAsset was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StimulusAssetUpdateInput, StimulusAssetUncheckedUpdateInput>
  }

  /**
   * StimulusAsset delete
   */
  export type StimulusAssetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StimulusAsset
     */
    select?: StimulusAssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StimulusAsset
     */
    omit?: StimulusAssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StimulusAssetInclude<ExtArgs> | null
    /**
     * Filter which StimulusAsset to delete.
     */
    where: StimulusAssetWhereUniqueInput
  }

  /**
   * StimulusAsset deleteMany
   */
  export type StimulusAssetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StimulusAssets to delete
     */
    where?: StimulusAssetWhereInput
    /**
     * Limit how many StimulusAssets to delete.
     */
    limit?: number
  }

  /**
   * StimulusAsset without action
   */
  export type StimulusAssetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StimulusAsset
     */
    select?: StimulusAssetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StimulusAsset
     */
    omit?: StimulusAssetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StimulusAssetInclude<ExtArgs> | null
  }


  /**
   * Model Question
   */

  export type AggregateQuestion = {
    _count: QuestionCountAggregateOutputType | null
    _avg: QuestionAvgAggregateOutputType | null
    _sum: QuestionSumAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  export type QuestionAvgAggregateOutputType = {
    id: number | null
    examPhaseId: number | null
    stimulusId: number | null
    sourcePageStart: number | null
    sourcePageEnd: number | null
  }

  export type QuestionSumAggregateOutputType = {
    id: number | null
    examPhaseId: number | null
    stimulusId: number | null
    sourcePageStart: number | null
    sourcePageEnd: number | null
  }

  export type QuestionMinAggregateOutputType = {
    id: number | null
    examPhaseId: number | null
    stimulusId: number | null
    numberLabel: string | null
    isDiscursive: boolean | null
    difficulty: $Enums.Difficulty | null
    status: $Enums.QuestionStatus | null
    sourcePageStart: number | null
    sourcePageEnd: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type QuestionMaxAggregateOutputType = {
    id: number | null
    examPhaseId: number | null
    stimulusId: number | null
    numberLabel: string | null
    isDiscursive: boolean | null
    difficulty: $Enums.Difficulty | null
    status: $Enums.QuestionStatus | null
    sourcePageStart: number | null
    sourcePageEnd: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type QuestionCountAggregateOutputType = {
    id: number
    examPhaseId: number
    stimulusId: number
    numberLabel: number
    isDiscursive: number
    difficulty: number
    status: number
    sourcePageStart: number
    sourcePageEnd: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type QuestionAvgAggregateInputType = {
    id?: true
    examPhaseId?: true
    stimulusId?: true
    sourcePageStart?: true
    sourcePageEnd?: true
  }

  export type QuestionSumAggregateInputType = {
    id?: true
    examPhaseId?: true
    stimulusId?: true
    sourcePageStart?: true
    sourcePageEnd?: true
  }

  export type QuestionMinAggregateInputType = {
    id?: true
    examPhaseId?: true
    stimulusId?: true
    numberLabel?: true
    isDiscursive?: true
    difficulty?: true
    status?: true
    sourcePageStart?: true
    sourcePageEnd?: true
    createdAt?: true
    updatedAt?: true
  }

  export type QuestionMaxAggregateInputType = {
    id?: true
    examPhaseId?: true
    stimulusId?: true
    numberLabel?: true
    isDiscursive?: true
    difficulty?: true
    status?: true
    sourcePageStart?: true
    sourcePageEnd?: true
    createdAt?: true
    updatedAt?: true
  }

  export type QuestionCountAggregateInputType = {
    id?: true
    examPhaseId?: true
    stimulusId?: true
    numberLabel?: true
    isDiscursive?: true
    difficulty?: true
    status?: true
    sourcePageStart?: true
    sourcePageEnd?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type QuestionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Question to aggregate.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Questions
    **/
    _count?: true | QuestionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionMaxAggregateInputType
  }

  export type GetQuestionAggregateType<T extends QuestionAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestion[P]>
      : GetScalarType<T[P], AggregateQuestion[P]>
  }




  export type QuestionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionWhereInput
    orderBy?: QuestionOrderByWithAggregationInput | QuestionOrderByWithAggregationInput[]
    by: QuestionScalarFieldEnum[] | QuestionScalarFieldEnum
    having?: QuestionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionCountAggregateInputType | true
    _avg?: QuestionAvgAggregateInputType
    _sum?: QuestionSumAggregateInputType
    _min?: QuestionMinAggregateInputType
    _max?: QuestionMaxAggregateInputType
  }

  export type QuestionGroupByOutputType = {
    id: number
    examPhaseId: number
    stimulusId: number | null
    numberLabel: string
    isDiscursive: boolean
    difficulty: $Enums.Difficulty | null
    status: $Enums.QuestionStatus
    sourcePageStart: number | null
    sourcePageEnd: number | null
    createdAt: Date
    updatedAt: Date
    _count: QuestionCountAggregateOutputType | null
    _avg: QuestionAvgAggregateOutputType | null
    _sum: QuestionSumAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  type GetQuestionGroupByPayload<T extends QuestionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionGroupByOutputType[P]>
        }
      >
    >


  export type QuestionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    examPhaseId?: boolean
    stimulusId?: boolean
    numberLabel?: boolean
    isDiscursive?: boolean
    difficulty?: boolean
    status?: boolean
    sourcePageStart?: boolean
    sourcePageEnd?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    phase?: boolean | ExamPhaseDefaultArgs<ExtArgs>
    stimulus?: boolean | Question$stimulusArgs<ExtArgs>
    subjects?: boolean | Question$subjectsArgs<ExtArgs>
    skills?: boolean | Question$skillsArgs<ExtArgs>
    mcq?: boolean | Question$mcqArgs<ExtArgs>
    fr?: boolean | Question$frArgs<ExtArgs>
    _count?: boolean | QuestionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>

  export type QuestionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    examPhaseId?: boolean
    stimulusId?: boolean
    numberLabel?: boolean
    isDiscursive?: boolean
    difficulty?: boolean
    status?: boolean
    sourcePageStart?: boolean
    sourcePageEnd?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    phase?: boolean | ExamPhaseDefaultArgs<ExtArgs>
    stimulus?: boolean | Question$stimulusArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>

  export type QuestionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    examPhaseId?: boolean
    stimulusId?: boolean
    numberLabel?: boolean
    isDiscursive?: boolean
    difficulty?: boolean
    status?: boolean
    sourcePageStart?: boolean
    sourcePageEnd?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    phase?: boolean | ExamPhaseDefaultArgs<ExtArgs>
    stimulus?: boolean | Question$stimulusArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>

  export type QuestionSelectScalar = {
    id?: boolean
    examPhaseId?: boolean
    stimulusId?: boolean
    numberLabel?: boolean
    isDiscursive?: boolean
    difficulty?: boolean
    status?: boolean
    sourcePageStart?: boolean
    sourcePageEnd?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type QuestionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "examPhaseId" | "stimulusId" | "numberLabel" | "isDiscursive" | "difficulty" | "status" | "sourcePageStart" | "sourcePageEnd" | "createdAt" | "updatedAt", ExtArgs["result"]["question"]>
  export type QuestionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    phase?: boolean | ExamPhaseDefaultArgs<ExtArgs>
    stimulus?: boolean | Question$stimulusArgs<ExtArgs>
    subjects?: boolean | Question$subjectsArgs<ExtArgs>
    skills?: boolean | Question$skillsArgs<ExtArgs>
    mcq?: boolean | Question$mcqArgs<ExtArgs>
    fr?: boolean | Question$frArgs<ExtArgs>
    _count?: boolean | QuestionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type QuestionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    phase?: boolean | ExamPhaseDefaultArgs<ExtArgs>
    stimulus?: boolean | Question$stimulusArgs<ExtArgs>
  }
  export type QuestionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    phase?: boolean | ExamPhaseDefaultArgs<ExtArgs>
    stimulus?: boolean | Question$stimulusArgs<ExtArgs>
  }

  export type $QuestionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Question"
    objects: {
      phase: Prisma.$ExamPhasePayload<ExtArgs>
      stimulus: Prisma.$StimulusPayload<ExtArgs> | null
      subjects: Prisma.$QuestionSubjectPayload<ExtArgs>[]
      skills: Prisma.$QuestionSkillPayload<ExtArgs>[]
      mcq: Prisma.$McqItemPayload<ExtArgs> | null
      fr: Prisma.$FrItemPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      examPhaseId: number
      stimulusId: number | null
      numberLabel: string
      isDiscursive: boolean
      difficulty: $Enums.Difficulty | null
      status: $Enums.QuestionStatus
      sourcePageStart: number | null
      sourcePageEnd: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["question"]>
    composites: {}
  }

  type QuestionGetPayload<S extends boolean | null | undefined | QuestionDefaultArgs> = $Result.GetResult<Prisma.$QuestionPayload, S>

  type QuestionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuestionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuestionCountAggregateInputType | true
    }

  export interface QuestionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Question'], meta: { name: 'Question' } }
    /**
     * Find zero or one Question that matches the filter.
     * @param {QuestionFindUniqueArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestionFindUniqueArgs>(args: SelectSubset<T, QuestionFindUniqueArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Question that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuestionFindUniqueOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestionFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Question that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindFirstArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestionFindFirstArgs>(args?: SelectSubset<T, QuestionFindFirstArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Question that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindFirstOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestionFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestionFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Questions
     * const questions = await prisma.question.findMany()
     * 
     * // Get first 10 Questions
     * const questions = await prisma.question.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionWithIdOnly = await prisma.question.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuestionFindManyArgs>(args?: SelectSubset<T, QuestionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Question.
     * @param {QuestionCreateArgs} args - Arguments to create a Question.
     * @example
     * // Create one Question
     * const Question = await prisma.question.create({
     *   data: {
     *     // ... data to create a Question
     *   }
     * })
     * 
     */
    create<T extends QuestionCreateArgs>(args: SelectSubset<T, QuestionCreateArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Questions.
     * @param {QuestionCreateManyArgs} args - Arguments to create many Questions.
     * @example
     * // Create many Questions
     * const question = await prisma.question.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestionCreateManyArgs>(args?: SelectSubset<T, QuestionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Questions and returns the data saved in the database.
     * @param {QuestionCreateManyAndReturnArgs} args - Arguments to create many Questions.
     * @example
     * // Create many Questions
     * const question = await prisma.question.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Questions and only return the `id`
     * const questionWithIdOnly = await prisma.question.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuestionCreateManyAndReturnArgs>(args?: SelectSubset<T, QuestionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Question.
     * @param {QuestionDeleteArgs} args - Arguments to delete one Question.
     * @example
     * // Delete one Question
     * const Question = await prisma.question.delete({
     *   where: {
     *     // ... filter to delete one Question
     *   }
     * })
     * 
     */
    delete<T extends QuestionDeleteArgs>(args: SelectSubset<T, QuestionDeleteArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Question.
     * @param {QuestionUpdateArgs} args - Arguments to update one Question.
     * @example
     * // Update one Question
     * const question = await prisma.question.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestionUpdateArgs>(args: SelectSubset<T, QuestionUpdateArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Questions.
     * @param {QuestionDeleteManyArgs} args - Arguments to filter Questions to delete.
     * @example
     * // Delete a few Questions
     * const { count } = await prisma.question.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestionDeleteManyArgs>(args?: SelectSubset<T, QuestionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Questions
     * const question = await prisma.question.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestionUpdateManyArgs>(args: SelectSubset<T, QuestionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions and returns the data updated in the database.
     * @param {QuestionUpdateManyAndReturnArgs} args - Arguments to update many Questions.
     * @example
     * // Update many Questions
     * const question = await prisma.question.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Questions and only return the `id`
     * const questionWithIdOnly = await prisma.question.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QuestionUpdateManyAndReturnArgs>(args: SelectSubset<T, QuestionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Question.
     * @param {QuestionUpsertArgs} args - Arguments to update or create a Question.
     * @example
     * // Update or create a Question
     * const question = await prisma.question.upsert({
     *   create: {
     *     // ... data to create a Question
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Question we want to update
     *   }
     * })
     */
    upsert<T extends QuestionUpsertArgs>(args: SelectSubset<T, QuestionUpsertArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionCountArgs} args - Arguments to filter Questions to count.
     * @example
     * // Count the number of Questions
     * const count = await prisma.question.count({
     *   where: {
     *     // ... the filter for the Questions we want to count
     *   }
     * })
    **/
    count<T extends QuestionCountArgs>(
      args?: Subset<T, QuestionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionAggregateArgs>(args: Subset<T, QuestionAggregateArgs>): Prisma.PrismaPromise<GetQuestionAggregateType<T>>

    /**
     * Group by Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionGroupByArgs['orderBy'] }
        : { orderBy?: QuestionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Question model
   */
  readonly fields: QuestionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Question.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    phase<T extends ExamPhaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ExamPhaseDefaultArgs<ExtArgs>>): Prisma__ExamPhaseClient<$Result.GetResult<Prisma.$ExamPhasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    stimulus<T extends Question$stimulusArgs<ExtArgs> = {}>(args?: Subset<T, Question$stimulusArgs<ExtArgs>>): Prisma__StimulusClient<$Result.GetResult<Prisma.$StimulusPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    subjects<T extends Question$subjectsArgs<ExtArgs> = {}>(args?: Subset<T, Question$subjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionSubjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    skills<T extends Question$skillsArgs<ExtArgs> = {}>(args?: Subset<T, Question$skillsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionSkillPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    mcq<T extends Question$mcqArgs<ExtArgs> = {}>(args?: Subset<T, Question$mcqArgs<ExtArgs>>): Prisma__McqItemClient<$Result.GetResult<Prisma.$McqItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    fr<T extends Question$frArgs<ExtArgs> = {}>(args?: Subset<T, Question$frArgs<ExtArgs>>): Prisma__FrItemClient<$Result.GetResult<Prisma.$FrItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Question model
   */
  interface QuestionFieldRefs {
    readonly id: FieldRef<"Question", 'Int'>
    readonly examPhaseId: FieldRef<"Question", 'Int'>
    readonly stimulusId: FieldRef<"Question", 'Int'>
    readonly numberLabel: FieldRef<"Question", 'String'>
    readonly isDiscursive: FieldRef<"Question", 'Boolean'>
    readonly difficulty: FieldRef<"Question", 'Difficulty'>
    readonly status: FieldRef<"Question", 'QuestionStatus'>
    readonly sourcePageStart: FieldRef<"Question", 'Int'>
    readonly sourcePageEnd: FieldRef<"Question", 'Int'>
    readonly createdAt: FieldRef<"Question", 'DateTime'>
    readonly updatedAt: FieldRef<"Question", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Question findUnique
   */
  export type QuestionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question findUniqueOrThrow
   */
  export type QuestionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question findFirst
   */
  export type QuestionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question findFirstOrThrow
   */
  export type QuestionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question findMany
   */
  export type QuestionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Questions to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question create
   */
  export type QuestionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The data needed to create a Question.
     */
    data: XOR<QuestionCreateInput, QuestionUncheckedCreateInput>
  }

  /**
   * Question createMany
   */
  export type QuestionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Questions.
     */
    data: QuestionCreateManyInput | QuestionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Question createManyAndReturn
   */
  export type QuestionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * The data used to create many Questions.
     */
    data: QuestionCreateManyInput | QuestionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Question update
   */
  export type QuestionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The data needed to update a Question.
     */
    data: XOR<QuestionUpdateInput, QuestionUncheckedUpdateInput>
    /**
     * Choose, which Question to update.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question updateMany
   */
  export type QuestionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Questions.
     */
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyInput>
    /**
     * Filter which Questions to update
     */
    where?: QuestionWhereInput
    /**
     * Limit how many Questions to update.
     */
    limit?: number
  }

  /**
   * Question updateManyAndReturn
   */
  export type QuestionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * The data used to update Questions.
     */
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyInput>
    /**
     * Filter which Questions to update
     */
    where?: QuestionWhereInput
    /**
     * Limit how many Questions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Question upsert
   */
  export type QuestionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The filter to search for the Question to update in case it exists.
     */
    where: QuestionWhereUniqueInput
    /**
     * In case the Question found by the `where` argument doesn't exist, create a new Question with this data.
     */
    create: XOR<QuestionCreateInput, QuestionUncheckedCreateInput>
    /**
     * In case the Question was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionUpdateInput, QuestionUncheckedUpdateInput>
  }

  /**
   * Question delete
   */
  export type QuestionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter which Question to delete.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question deleteMany
   */
  export type QuestionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Questions to delete
     */
    where?: QuestionWhereInput
    /**
     * Limit how many Questions to delete.
     */
    limit?: number
  }

  /**
   * Question.stimulus
   */
  export type Question$stimulusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stimulus
     */
    select?: StimulusSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stimulus
     */
    omit?: StimulusOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StimulusInclude<ExtArgs> | null
    where?: StimulusWhereInput
  }

  /**
   * Question.subjects
   */
  export type Question$subjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSubject
     */
    select?: QuestionSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSubject
     */
    omit?: QuestionSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSubjectInclude<ExtArgs> | null
    where?: QuestionSubjectWhereInput
    orderBy?: QuestionSubjectOrderByWithRelationInput | QuestionSubjectOrderByWithRelationInput[]
    cursor?: QuestionSubjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionSubjectScalarFieldEnum | QuestionSubjectScalarFieldEnum[]
  }

  /**
   * Question.skills
   */
  export type Question$skillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSkill
     */
    select?: QuestionSkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSkill
     */
    omit?: QuestionSkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSkillInclude<ExtArgs> | null
    where?: QuestionSkillWhereInput
    orderBy?: QuestionSkillOrderByWithRelationInput | QuestionSkillOrderByWithRelationInput[]
    cursor?: QuestionSkillWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionSkillScalarFieldEnum | QuestionSkillScalarFieldEnum[]
  }

  /**
   * Question.mcq
   */
  export type Question$mcqArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the McqItem
     */
    select?: McqItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the McqItem
     */
    omit?: McqItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: McqItemInclude<ExtArgs> | null
    where?: McqItemWhereInput
  }

  /**
   * Question.fr
   */
  export type Question$frArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrItem
     */
    select?: FrItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrItem
     */
    omit?: FrItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrItemInclude<ExtArgs> | null
    where?: FrItemWhereInput
  }

  /**
   * Question without action
   */
  export type QuestionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
  }


  /**
   * Model QuestionSubject
   */

  export type AggregateQuestionSubject = {
    _count: QuestionSubjectCountAggregateOutputType | null
    _avg: QuestionSubjectAvgAggregateOutputType | null
    _sum: QuestionSubjectSumAggregateOutputType | null
    _min: QuestionSubjectMinAggregateOutputType | null
    _max: QuestionSubjectMaxAggregateOutputType | null
  }

  export type QuestionSubjectAvgAggregateOutputType = {
    questionId: number | null
    subjectId: number | null
  }

  export type QuestionSubjectSumAggregateOutputType = {
    questionId: number | null
    subjectId: number | null
  }

  export type QuestionSubjectMinAggregateOutputType = {
    questionId: number | null
    subjectId: number | null
  }

  export type QuestionSubjectMaxAggregateOutputType = {
    questionId: number | null
    subjectId: number | null
  }

  export type QuestionSubjectCountAggregateOutputType = {
    questionId: number
    subjectId: number
    _all: number
  }


  export type QuestionSubjectAvgAggregateInputType = {
    questionId?: true
    subjectId?: true
  }

  export type QuestionSubjectSumAggregateInputType = {
    questionId?: true
    subjectId?: true
  }

  export type QuestionSubjectMinAggregateInputType = {
    questionId?: true
    subjectId?: true
  }

  export type QuestionSubjectMaxAggregateInputType = {
    questionId?: true
    subjectId?: true
  }

  export type QuestionSubjectCountAggregateInputType = {
    questionId?: true
    subjectId?: true
    _all?: true
  }

  export type QuestionSubjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionSubject to aggregate.
     */
    where?: QuestionSubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionSubjects to fetch.
     */
    orderBy?: QuestionSubjectOrderByWithRelationInput | QuestionSubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionSubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionSubjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionSubjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned QuestionSubjects
    **/
    _count?: true | QuestionSubjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionSubjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionSubjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionSubjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionSubjectMaxAggregateInputType
  }

  export type GetQuestionSubjectAggregateType<T extends QuestionSubjectAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestionSubject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestionSubject[P]>
      : GetScalarType<T[P], AggregateQuestionSubject[P]>
  }




  export type QuestionSubjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionSubjectWhereInput
    orderBy?: QuestionSubjectOrderByWithAggregationInput | QuestionSubjectOrderByWithAggregationInput[]
    by: QuestionSubjectScalarFieldEnum[] | QuestionSubjectScalarFieldEnum
    having?: QuestionSubjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionSubjectCountAggregateInputType | true
    _avg?: QuestionSubjectAvgAggregateInputType
    _sum?: QuestionSubjectSumAggregateInputType
    _min?: QuestionSubjectMinAggregateInputType
    _max?: QuestionSubjectMaxAggregateInputType
  }

  export type QuestionSubjectGroupByOutputType = {
    questionId: number
    subjectId: number
    _count: QuestionSubjectCountAggregateOutputType | null
    _avg: QuestionSubjectAvgAggregateOutputType | null
    _sum: QuestionSubjectSumAggregateOutputType | null
    _min: QuestionSubjectMinAggregateOutputType | null
    _max: QuestionSubjectMaxAggregateOutputType | null
  }

  type GetQuestionSubjectGroupByPayload<T extends QuestionSubjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionSubjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionSubjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionSubjectGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionSubjectGroupByOutputType[P]>
        }
      >
    >


  export type QuestionSubjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    questionId?: boolean
    subjectId?: boolean
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionSubject"]>

  export type QuestionSubjectSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    questionId?: boolean
    subjectId?: boolean
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionSubject"]>

  export type QuestionSubjectSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    questionId?: boolean
    subjectId?: boolean
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionSubject"]>

  export type QuestionSubjectSelectScalar = {
    questionId?: boolean
    subjectId?: boolean
  }

  export type QuestionSubjectOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"questionId" | "subjectId", ExtArgs["result"]["questionSubject"]>
  export type QuestionSubjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }
  export type QuestionSubjectIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }
  export type QuestionSubjectIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
  }

  export type $QuestionSubjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "QuestionSubject"
    objects: {
      question: Prisma.$QuestionPayload<ExtArgs>
      subject: Prisma.$SubjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      questionId: number
      subjectId: number
    }, ExtArgs["result"]["questionSubject"]>
    composites: {}
  }

  type QuestionSubjectGetPayload<S extends boolean | null | undefined | QuestionSubjectDefaultArgs> = $Result.GetResult<Prisma.$QuestionSubjectPayload, S>

  type QuestionSubjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuestionSubjectFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuestionSubjectCountAggregateInputType | true
    }

  export interface QuestionSubjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['QuestionSubject'], meta: { name: 'QuestionSubject' } }
    /**
     * Find zero or one QuestionSubject that matches the filter.
     * @param {QuestionSubjectFindUniqueArgs} args - Arguments to find a QuestionSubject
     * @example
     * // Get one QuestionSubject
     * const questionSubject = await prisma.questionSubject.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestionSubjectFindUniqueArgs>(args: SelectSubset<T, QuestionSubjectFindUniqueArgs<ExtArgs>>): Prisma__QuestionSubjectClient<$Result.GetResult<Prisma.$QuestionSubjectPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one QuestionSubject that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuestionSubjectFindUniqueOrThrowArgs} args - Arguments to find a QuestionSubject
     * @example
     * // Get one QuestionSubject
     * const questionSubject = await prisma.questionSubject.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestionSubjectFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestionSubjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestionSubjectClient<$Result.GetResult<Prisma.$QuestionSubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuestionSubject that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionSubjectFindFirstArgs} args - Arguments to find a QuestionSubject
     * @example
     * // Get one QuestionSubject
     * const questionSubject = await prisma.questionSubject.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestionSubjectFindFirstArgs>(args?: SelectSubset<T, QuestionSubjectFindFirstArgs<ExtArgs>>): Prisma__QuestionSubjectClient<$Result.GetResult<Prisma.$QuestionSubjectPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuestionSubject that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionSubjectFindFirstOrThrowArgs} args - Arguments to find a QuestionSubject
     * @example
     * // Get one QuestionSubject
     * const questionSubject = await prisma.questionSubject.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestionSubjectFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestionSubjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestionSubjectClient<$Result.GetResult<Prisma.$QuestionSubjectPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more QuestionSubjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionSubjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all QuestionSubjects
     * const questionSubjects = await prisma.questionSubject.findMany()
     * 
     * // Get first 10 QuestionSubjects
     * const questionSubjects = await prisma.questionSubject.findMany({ take: 10 })
     * 
     * // Only select the `questionId`
     * const questionSubjectWithQuestionIdOnly = await prisma.questionSubject.findMany({ select: { questionId: true } })
     * 
     */
    findMany<T extends QuestionSubjectFindManyArgs>(args?: SelectSubset<T, QuestionSubjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionSubjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a QuestionSubject.
     * @param {QuestionSubjectCreateArgs} args - Arguments to create a QuestionSubject.
     * @example
     * // Create one QuestionSubject
     * const QuestionSubject = await prisma.questionSubject.create({
     *   data: {
     *     // ... data to create a QuestionSubject
     *   }
     * })
     * 
     */
    create<T extends QuestionSubjectCreateArgs>(args: SelectSubset<T, QuestionSubjectCreateArgs<ExtArgs>>): Prisma__QuestionSubjectClient<$Result.GetResult<Prisma.$QuestionSubjectPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many QuestionSubjects.
     * @param {QuestionSubjectCreateManyArgs} args - Arguments to create many QuestionSubjects.
     * @example
     * // Create many QuestionSubjects
     * const questionSubject = await prisma.questionSubject.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestionSubjectCreateManyArgs>(args?: SelectSubset<T, QuestionSubjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many QuestionSubjects and returns the data saved in the database.
     * @param {QuestionSubjectCreateManyAndReturnArgs} args - Arguments to create many QuestionSubjects.
     * @example
     * // Create many QuestionSubjects
     * const questionSubject = await prisma.questionSubject.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many QuestionSubjects and only return the `questionId`
     * const questionSubjectWithQuestionIdOnly = await prisma.questionSubject.createManyAndReturn({
     *   select: { questionId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuestionSubjectCreateManyAndReturnArgs>(args?: SelectSubset<T, QuestionSubjectCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionSubjectPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a QuestionSubject.
     * @param {QuestionSubjectDeleteArgs} args - Arguments to delete one QuestionSubject.
     * @example
     * // Delete one QuestionSubject
     * const QuestionSubject = await prisma.questionSubject.delete({
     *   where: {
     *     // ... filter to delete one QuestionSubject
     *   }
     * })
     * 
     */
    delete<T extends QuestionSubjectDeleteArgs>(args: SelectSubset<T, QuestionSubjectDeleteArgs<ExtArgs>>): Prisma__QuestionSubjectClient<$Result.GetResult<Prisma.$QuestionSubjectPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one QuestionSubject.
     * @param {QuestionSubjectUpdateArgs} args - Arguments to update one QuestionSubject.
     * @example
     * // Update one QuestionSubject
     * const questionSubject = await prisma.questionSubject.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestionSubjectUpdateArgs>(args: SelectSubset<T, QuestionSubjectUpdateArgs<ExtArgs>>): Prisma__QuestionSubjectClient<$Result.GetResult<Prisma.$QuestionSubjectPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more QuestionSubjects.
     * @param {QuestionSubjectDeleteManyArgs} args - Arguments to filter QuestionSubjects to delete.
     * @example
     * // Delete a few QuestionSubjects
     * const { count } = await prisma.questionSubject.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestionSubjectDeleteManyArgs>(args?: SelectSubset<T, QuestionSubjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionSubjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionSubjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many QuestionSubjects
     * const questionSubject = await prisma.questionSubject.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestionSubjectUpdateManyArgs>(args: SelectSubset<T, QuestionSubjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionSubjects and returns the data updated in the database.
     * @param {QuestionSubjectUpdateManyAndReturnArgs} args - Arguments to update many QuestionSubjects.
     * @example
     * // Update many QuestionSubjects
     * const questionSubject = await prisma.questionSubject.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more QuestionSubjects and only return the `questionId`
     * const questionSubjectWithQuestionIdOnly = await prisma.questionSubject.updateManyAndReturn({
     *   select: { questionId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QuestionSubjectUpdateManyAndReturnArgs>(args: SelectSubset<T, QuestionSubjectUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionSubjectPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one QuestionSubject.
     * @param {QuestionSubjectUpsertArgs} args - Arguments to update or create a QuestionSubject.
     * @example
     * // Update or create a QuestionSubject
     * const questionSubject = await prisma.questionSubject.upsert({
     *   create: {
     *     // ... data to create a QuestionSubject
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the QuestionSubject we want to update
     *   }
     * })
     */
    upsert<T extends QuestionSubjectUpsertArgs>(args: SelectSubset<T, QuestionSubjectUpsertArgs<ExtArgs>>): Prisma__QuestionSubjectClient<$Result.GetResult<Prisma.$QuestionSubjectPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of QuestionSubjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionSubjectCountArgs} args - Arguments to filter QuestionSubjects to count.
     * @example
     * // Count the number of QuestionSubjects
     * const count = await prisma.questionSubject.count({
     *   where: {
     *     // ... the filter for the QuestionSubjects we want to count
     *   }
     * })
    **/
    count<T extends QuestionSubjectCountArgs>(
      args?: Subset<T, QuestionSubjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionSubjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a QuestionSubject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionSubjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionSubjectAggregateArgs>(args: Subset<T, QuestionSubjectAggregateArgs>): Prisma.PrismaPromise<GetQuestionSubjectAggregateType<T>>

    /**
     * Group by QuestionSubject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionSubjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionSubjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionSubjectGroupByArgs['orderBy'] }
        : { orderBy?: QuestionSubjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionSubjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionSubjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the QuestionSubject model
   */
  readonly fields: QuestionSubjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for QuestionSubject.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionSubjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    question<T extends QuestionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuestionDefaultArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    subject<T extends SubjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubjectDefaultArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the QuestionSubject model
   */
  interface QuestionSubjectFieldRefs {
    readonly questionId: FieldRef<"QuestionSubject", 'Int'>
    readonly subjectId: FieldRef<"QuestionSubject", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * QuestionSubject findUnique
   */
  export type QuestionSubjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSubject
     */
    select?: QuestionSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSubject
     */
    omit?: QuestionSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSubjectInclude<ExtArgs> | null
    /**
     * Filter, which QuestionSubject to fetch.
     */
    where: QuestionSubjectWhereUniqueInput
  }

  /**
   * QuestionSubject findUniqueOrThrow
   */
  export type QuestionSubjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSubject
     */
    select?: QuestionSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSubject
     */
    omit?: QuestionSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSubjectInclude<ExtArgs> | null
    /**
     * Filter, which QuestionSubject to fetch.
     */
    where: QuestionSubjectWhereUniqueInput
  }

  /**
   * QuestionSubject findFirst
   */
  export type QuestionSubjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSubject
     */
    select?: QuestionSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSubject
     */
    omit?: QuestionSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSubjectInclude<ExtArgs> | null
    /**
     * Filter, which QuestionSubject to fetch.
     */
    where?: QuestionSubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionSubjects to fetch.
     */
    orderBy?: QuestionSubjectOrderByWithRelationInput | QuestionSubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionSubjects.
     */
    cursor?: QuestionSubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionSubjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionSubjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionSubjects.
     */
    distinct?: QuestionSubjectScalarFieldEnum | QuestionSubjectScalarFieldEnum[]
  }

  /**
   * QuestionSubject findFirstOrThrow
   */
  export type QuestionSubjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSubject
     */
    select?: QuestionSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSubject
     */
    omit?: QuestionSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSubjectInclude<ExtArgs> | null
    /**
     * Filter, which QuestionSubject to fetch.
     */
    where?: QuestionSubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionSubjects to fetch.
     */
    orderBy?: QuestionSubjectOrderByWithRelationInput | QuestionSubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionSubjects.
     */
    cursor?: QuestionSubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionSubjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionSubjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionSubjects.
     */
    distinct?: QuestionSubjectScalarFieldEnum | QuestionSubjectScalarFieldEnum[]
  }

  /**
   * QuestionSubject findMany
   */
  export type QuestionSubjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSubject
     */
    select?: QuestionSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSubject
     */
    omit?: QuestionSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSubjectInclude<ExtArgs> | null
    /**
     * Filter, which QuestionSubjects to fetch.
     */
    where?: QuestionSubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionSubjects to fetch.
     */
    orderBy?: QuestionSubjectOrderByWithRelationInput | QuestionSubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing QuestionSubjects.
     */
    cursor?: QuestionSubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionSubjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionSubjects.
     */
    skip?: number
    distinct?: QuestionSubjectScalarFieldEnum | QuestionSubjectScalarFieldEnum[]
  }

  /**
   * QuestionSubject create
   */
  export type QuestionSubjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSubject
     */
    select?: QuestionSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSubject
     */
    omit?: QuestionSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSubjectInclude<ExtArgs> | null
    /**
     * The data needed to create a QuestionSubject.
     */
    data: XOR<QuestionSubjectCreateInput, QuestionSubjectUncheckedCreateInput>
  }

  /**
   * QuestionSubject createMany
   */
  export type QuestionSubjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many QuestionSubjects.
     */
    data: QuestionSubjectCreateManyInput | QuestionSubjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * QuestionSubject createManyAndReturn
   */
  export type QuestionSubjectCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSubject
     */
    select?: QuestionSubjectSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSubject
     */
    omit?: QuestionSubjectOmit<ExtArgs> | null
    /**
     * The data used to create many QuestionSubjects.
     */
    data: QuestionSubjectCreateManyInput | QuestionSubjectCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSubjectIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuestionSubject update
   */
  export type QuestionSubjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSubject
     */
    select?: QuestionSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSubject
     */
    omit?: QuestionSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSubjectInclude<ExtArgs> | null
    /**
     * The data needed to update a QuestionSubject.
     */
    data: XOR<QuestionSubjectUpdateInput, QuestionSubjectUncheckedUpdateInput>
    /**
     * Choose, which QuestionSubject to update.
     */
    where: QuestionSubjectWhereUniqueInput
  }

  /**
   * QuestionSubject updateMany
   */
  export type QuestionSubjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update QuestionSubjects.
     */
    data: XOR<QuestionSubjectUpdateManyMutationInput, QuestionSubjectUncheckedUpdateManyInput>
    /**
     * Filter which QuestionSubjects to update
     */
    where?: QuestionSubjectWhereInput
    /**
     * Limit how many QuestionSubjects to update.
     */
    limit?: number
  }

  /**
   * QuestionSubject updateManyAndReturn
   */
  export type QuestionSubjectUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSubject
     */
    select?: QuestionSubjectSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSubject
     */
    omit?: QuestionSubjectOmit<ExtArgs> | null
    /**
     * The data used to update QuestionSubjects.
     */
    data: XOR<QuestionSubjectUpdateManyMutationInput, QuestionSubjectUncheckedUpdateManyInput>
    /**
     * Filter which QuestionSubjects to update
     */
    where?: QuestionSubjectWhereInput
    /**
     * Limit how many QuestionSubjects to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSubjectIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuestionSubject upsert
   */
  export type QuestionSubjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSubject
     */
    select?: QuestionSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSubject
     */
    omit?: QuestionSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSubjectInclude<ExtArgs> | null
    /**
     * The filter to search for the QuestionSubject to update in case it exists.
     */
    where: QuestionSubjectWhereUniqueInput
    /**
     * In case the QuestionSubject found by the `where` argument doesn't exist, create a new QuestionSubject with this data.
     */
    create: XOR<QuestionSubjectCreateInput, QuestionSubjectUncheckedCreateInput>
    /**
     * In case the QuestionSubject was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionSubjectUpdateInput, QuestionSubjectUncheckedUpdateInput>
  }

  /**
   * QuestionSubject delete
   */
  export type QuestionSubjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSubject
     */
    select?: QuestionSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSubject
     */
    omit?: QuestionSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSubjectInclude<ExtArgs> | null
    /**
     * Filter which QuestionSubject to delete.
     */
    where: QuestionSubjectWhereUniqueInput
  }

  /**
   * QuestionSubject deleteMany
   */
  export type QuestionSubjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionSubjects to delete
     */
    where?: QuestionSubjectWhereInput
    /**
     * Limit how many QuestionSubjects to delete.
     */
    limit?: number
  }

  /**
   * QuestionSubject without action
   */
  export type QuestionSubjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSubject
     */
    select?: QuestionSubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSubject
     */
    omit?: QuestionSubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSubjectInclude<ExtArgs> | null
  }


  /**
   * Model QuestionSkill
   */

  export type AggregateQuestionSkill = {
    _count: QuestionSkillCountAggregateOutputType | null
    _avg: QuestionSkillAvgAggregateOutputType | null
    _sum: QuestionSkillSumAggregateOutputType | null
    _min: QuestionSkillMinAggregateOutputType | null
    _max: QuestionSkillMaxAggregateOutputType | null
  }

  export type QuestionSkillAvgAggregateOutputType = {
    questionId: number | null
    skillId: number | null
  }

  export type QuestionSkillSumAggregateOutputType = {
    questionId: number | null
    skillId: number | null
  }

  export type QuestionSkillMinAggregateOutputType = {
    questionId: number | null
    skillId: number | null
  }

  export type QuestionSkillMaxAggregateOutputType = {
    questionId: number | null
    skillId: number | null
  }

  export type QuestionSkillCountAggregateOutputType = {
    questionId: number
    skillId: number
    _all: number
  }


  export type QuestionSkillAvgAggregateInputType = {
    questionId?: true
    skillId?: true
  }

  export type QuestionSkillSumAggregateInputType = {
    questionId?: true
    skillId?: true
  }

  export type QuestionSkillMinAggregateInputType = {
    questionId?: true
    skillId?: true
  }

  export type QuestionSkillMaxAggregateInputType = {
    questionId?: true
    skillId?: true
  }

  export type QuestionSkillCountAggregateInputType = {
    questionId?: true
    skillId?: true
    _all?: true
  }

  export type QuestionSkillAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionSkill to aggregate.
     */
    where?: QuestionSkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionSkills to fetch.
     */
    orderBy?: QuestionSkillOrderByWithRelationInput | QuestionSkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionSkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionSkills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionSkills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned QuestionSkills
    **/
    _count?: true | QuestionSkillCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionSkillAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionSkillSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionSkillMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionSkillMaxAggregateInputType
  }

  export type GetQuestionSkillAggregateType<T extends QuestionSkillAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestionSkill]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestionSkill[P]>
      : GetScalarType<T[P], AggregateQuestionSkill[P]>
  }




  export type QuestionSkillGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionSkillWhereInput
    orderBy?: QuestionSkillOrderByWithAggregationInput | QuestionSkillOrderByWithAggregationInput[]
    by: QuestionSkillScalarFieldEnum[] | QuestionSkillScalarFieldEnum
    having?: QuestionSkillScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionSkillCountAggregateInputType | true
    _avg?: QuestionSkillAvgAggregateInputType
    _sum?: QuestionSkillSumAggregateInputType
    _min?: QuestionSkillMinAggregateInputType
    _max?: QuestionSkillMaxAggregateInputType
  }

  export type QuestionSkillGroupByOutputType = {
    questionId: number
    skillId: number
    _count: QuestionSkillCountAggregateOutputType | null
    _avg: QuestionSkillAvgAggregateOutputType | null
    _sum: QuestionSkillSumAggregateOutputType | null
    _min: QuestionSkillMinAggregateOutputType | null
    _max: QuestionSkillMaxAggregateOutputType | null
  }

  type GetQuestionSkillGroupByPayload<T extends QuestionSkillGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionSkillGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionSkillGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionSkillGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionSkillGroupByOutputType[P]>
        }
      >
    >


  export type QuestionSkillSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    questionId?: boolean
    skillId?: boolean
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    skill?: boolean | SkillDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionSkill"]>

  export type QuestionSkillSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    questionId?: boolean
    skillId?: boolean
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    skill?: boolean | SkillDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionSkill"]>

  export type QuestionSkillSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    questionId?: boolean
    skillId?: boolean
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    skill?: boolean | SkillDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionSkill"]>

  export type QuestionSkillSelectScalar = {
    questionId?: boolean
    skillId?: boolean
  }

  export type QuestionSkillOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"questionId" | "skillId", ExtArgs["result"]["questionSkill"]>
  export type QuestionSkillInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    skill?: boolean | SkillDefaultArgs<ExtArgs>
  }
  export type QuestionSkillIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    skill?: boolean | SkillDefaultArgs<ExtArgs>
  }
  export type QuestionSkillIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    skill?: boolean | SkillDefaultArgs<ExtArgs>
  }

  export type $QuestionSkillPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "QuestionSkill"
    objects: {
      question: Prisma.$QuestionPayload<ExtArgs>
      skill: Prisma.$SkillPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      questionId: number
      skillId: number
    }, ExtArgs["result"]["questionSkill"]>
    composites: {}
  }

  type QuestionSkillGetPayload<S extends boolean | null | undefined | QuestionSkillDefaultArgs> = $Result.GetResult<Prisma.$QuestionSkillPayload, S>

  type QuestionSkillCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuestionSkillFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuestionSkillCountAggregateInputType | true
    }

  export interface QuestionSkillDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['QuestionSkill'], meta: { name: 'QuestionSkill' } }
    /**
     * Find zero or one QuestionSkill that matches the filter.
     * @param {QuestionSkillFindUniqueArgs} args - Arguments to find a QuestionSkill
     * @example
     * // Get one QuestionSkill
     * const questionSkill = await prisma.questionSkill.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestionSkillFindUniqueArgs>(args: SelectSubset<T, QuestionSkillFindUniqueArgs<ExtArgs>>): Prisma__QuestionSkillClient<$Result.GetResult<Prisma.$QuestionSkillPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one QuestionSkill that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuestionSkillFindUniqueOrThrowArgs} args - Arguments to find a QuestionSkill
     * @example
     * // Get one QuestionSkill
     * const questionSkill = await prisma.questionSkill.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestionSkillFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestionSkillFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestionSkillClient<$Result.GetResult<Prisma.$QuestionSkillPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuestionSkill that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionSkillFindFirstArgs} args - Arguments to find a QuestionSkill
     * @example
     * // Get one QuestionSkill
     * const questionSkill = await prisma.questionSkill.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestionSkillFindFirstArgs>(args?: SelectSubset<T, QuestionSkillFindFirstArgs<ExtArgs>>): Prisma__QuestionSkillClient<$Result.GetResult<Prisma.$QuestionSkillPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuestionSkill that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionSkillFindFirstOrThrowArgs} args - Arguments to find a QuestionSkill
     * @example
     * // Get one QuestionSkill
     * const questionSkill = await prisma.questionSkill.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestionSkillFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestionSkillFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestionSkillClient<$Result.GetResult<Prisma.$QuestionSkillPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more QuestionSkills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionSkillFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all QuestionSkills
     * const questionSkills = await prisma.questionSkill.findMany()
     * 
     * // Get first 10 QuestionSkills
     * const questionSkills = await prisma.questionSkill.findMany({ take: 10 })
     * 
     * // Only select the `questionId`
     * const questionSkillWithQuestionIdOnly = await prisma.questionSkill.findMany({ select: { questionId: true } })
     * 
     */
    findMany<T extends QuestionSkillFindManyArgs>(args?: SelectSubset<T, QuestionSkillFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionSkillPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a QuestionSkill.
     * @param {QuestionSkillCreateArgs} args - Arguments to create a QuestionSkill.
     * @example
     * // Create one QuestionSkill
     * const QuestionSkill = await prisma.questionSkill.create({
     *   data: {
     *     // ... data to create a QuestionSkill
     *   }
     * })
     * 
     */
    create<T extends QuestionSkillCreateArgs>(args: SelectSubset<T, QuestionSkillCreateArgs<ExtArgs>>): Prisma__QuestionSkillClient<$Result.GetResult<Prisma.$QuestionSkillPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many QuestionSkills.
     * @param {QuestionSkillCreateManyArgs} args - Arguments to create many QuestionSkills.
     * @example
     * // Create many QuestionSkills
     * const questionSkill = await prisma.questionSkill.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestionSkillCreateManyArgs>(args?: SelectSubset<T, QuestionSkillCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many QuestionSkills and returns the data saved in the database.
     * @param {QuestionSkillCreateManyAndReturnArgs} args - Arguments to create many QuestionSkills.
     * @example
     * // Create many QuestionSkills
     * const questionSkill = await prisma.questionSkill.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many QuestionSkills and only return the `questionId`
     * const questionSkillWithQuestionIdOnly = await prisma.questionSkill.createManyAndReturn({
     *   select: { questionId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuestionSkillCreateManyAndReturnArgs>(args?: SelectSubset<T, QuestionSkillCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionSkillPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a QuestionSkill.
     * @param {QuestionSkillDeleteArgs} args - Arguments to delete one QuestionSkill.
     * @example
     * // Delete one QuestionSkill
     * const QuestionSkill = await prisma.questionSkill.delete({
     *   where: {
     *     // ... filter to delete one QuestionSkill
     *   }
     * })
     * 
     */
    delete<T extends QuestionSkillDeleteArgs>(args: SelectSubset<T, QuestionSkillDeleteArgs<ExtArgs>>): Prisma__QuestionSkillClient<$Result.GetResult<Prisma.$QuestionSkillPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one QuestionSkill.
     * @param {QuestionSkillUpdateArgs} args - Arguments to update one QuestionSkill.
     * @example
     * // Update one QuestionSkill
     * const questionSkill = await prisma.questionSkill.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestionSkillUpdateArgs>(args: SelectSubset<T, QuestionSkillUpdateArgs<ExtArgs>>): Prisma__QuestionSkillClient<$Result.GetResult<Prisma.$QuestionSkillPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more QuestionSkills.
     * @param {QuestionSkillDeleteManyArgs} args - Arguments to filter QuestionSkills to delete.
     * @example
     * // Delete a few QuestionSkills
     * const { count } = await prisma.questionSkill.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestionSkillDeleteManyArgs>(args?: SelectSubset<T, QuestionSkillDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionSkills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionSkillUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many QuestionSkills
     * const questionSkill = await prisma.questionSkill.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestionSkillUpdateManyArgs>(args: SelectSubset<T, QuestionSkillUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionSkills and returns the data updated in the database.
     * @param {QuestionSkillUpdateManyAndReturnArgs} args - Arguments to update many QuestionSkills.
     * @example
     * // Update many QuestionSkills
     * const questionSkill = await prisma.questionSkill.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more QuestionSkills and only return the `questionId`
     * const questionSkillWithQuestionIdOnly = await prisma.questionSkill.updateManyAndReturn({
     *   select: { questionId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QuestionSkillUpdateManyAndReturnArgs>(args: SelectSubset<T, QuestionSkillUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionSkillPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one QuestionSkill.
     * @param {QuestionSkillUpsertArgs} args - Arguments to update or create a QuestionSkill.
     * @example
     * // Update or create a QuestionSkill
     * const questionSkill = await prisma.questionSkill.upsert({
     *   create: {
     *     // ... data to create a QuestionSkill
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the QuestionSkill we want to update
     *   }
     * })
     */
    upsert<T extends QuestionSkillUpsertArgs>(args: SelectSubset<T, QuestionSkillUpsertArgs<ExtArgs>>): Prisma__QuestionSkillClient<$Result.GetResult<Prisma.$QuestionSkillPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of QuestionSkills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionSkillCountArgs} args - Arguments to filter QuestionSkills to count.
     * @example
     * // Count the number of QuestionSkills
     * const count = await prisma.questionSkill.count({
     *   where: {
     *     // ... the filter for the QuestionSkills we want to count
     *   }
     * })
    **/
    count<T extends QuestionSkillCountArgs>(
      args?: Subset<T, QuestionSkillCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionSkillCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a QuestionSkill.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionSkillAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionSkillAggregateArgs>(args: Subset<T, QuestionSkillAggregateArgs>): Prisma.PrismaPromise<GetQuestionSkillAggregateType<T>>

    /**
     * Group by QuestionSkill.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionSkillGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionSkillGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionSkillGroupByArgs['orderBy'] }
        : { orderBy?: QuestionSkillGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionSkillGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionSkillGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the QuestionSkill model
   */
  readonly fields: QuestionSkillFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for QuestionSkill.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionSkillClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    question<T extends QuestionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuestionDefaultArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    skill<T extends SkillDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SkillDefaultArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the QuestionSkill model
   */
  interface QuestionSkillFieldRefs {
    readonly questionId: FieldRef<"QuestionSkill", 'Int'>
    readonly skillId: FieldRef<"QuestionSkill", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * QuestionSkill findUnique
   */
  export type QuestionSkillFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSkill
     */
    select?: QuestionSkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSkill
     */
    omit?: QuestionSkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSkillInclude<ExtArgs> | null
    /**
     * Filter, which QuestionSkill to fetch.
     */
    where: QuestionSkillWhereUniqueInput
  }

  /**
   * QuestionSkill findUniqueOrThrow
   */
  export type QuestionSkillFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSkill
     */
    select?: QuestionSkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSkill
     */
    omit?: QuestionSkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSkillInclude<ExtArgs> | null
    /**
     * Filter, which QuestionSkill to fetch.
     */
    where: QuestionSkillWhereUniqueInput
  }

  /**
   * QuestionSkill findFirst
   */
  export type QuestionSkillFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSkill
     */
    select?: QuestionSkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSkill
     */
    omit?: QuestionSkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSkillInclude<ExtArgs> | null
    /**
     * Filter, which QuestionSkill to fetch.
     */
    where?: QuestionSkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionSkills to fetch.
     */
    orderBy?: QuestionSkillOrderByWithRelationInput | QuestionSkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionSkills.
     */
    cursor?: QuestionSkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionSkills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionSkills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionSkills.
     */
    distinct?: QuestionSkillScalarFieldEnum | QuestionSkillScalarFieldEnum[]
  }

  /**
   * QuestionSkill findFirstOrThrow
   */
  export type QuestionSkillFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSkill
     */
    select?: QuestionSkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSkill
     */
    omit?: QuestionSkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSkillInclude<ExtArgs> | null
    /**
     * Filter, which QuestionSkill to fetch.
     */
    where?: QuestionSkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionSkills to fetch.
     */
    orderBy?: QuestionSkillOrderByWithRelationInput | QuestionSkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionSkills.
     */
    cursor?: QuestionSkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionSkills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionSkills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionSkills.
     */
    distinct?: QuestionSkillScalarFieldEnum | QuestionSkillScalarFieldEnum[]
  }

  /**
   * QuestionSkill findMany
   */
  export type QuestionSkillFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSkill
     */
    select?: QuestionSkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSkill
     */
    omit?: QuestionSkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSkillInclude<ExtArgs> | null
    /**
     * Filter, which QuestionSkills to fetch.
     */
    where?: QuestionSkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionSkills to fetch.
     */
    orderBy?: QuestionSkillOrderByWithRelationInput | QuestionSkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing QuestionSkills.
     */
    cursor?: QuestionSkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionSkills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionSkills.
     */
    skip?: number
    distinct?: QuestionSkillScalarFieldEnum | QuestionSkillScalarFieldEnum[]
  }

  /**
   * QuestionSkill create
   */
  export type QuestionSkillCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSkill
     */
    select?: QuestionSkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSkill
     */
    omit?: QuestionSkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSkillInclude<ExtArgs> | null
    /**
     * The data needed to create a QuestionSkill.
     */
    data: XOR<QuestionSkillCreateInput, QuestionSkillUncheckedCreateInput>
  }

  /**
   * QuestionSkill createMany
   */
  export type QuestionSkillCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many QuestionSkills.
     */
    data: QuestionSkillCreateManyInput | QuestionSkillCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * QuestionSkill createManyAndReturn
   */
  export type QuestionSkillCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSkill
     */
    select?: QuestionSkillSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSkill
     */
    omit?: QuestionSkillOmit<ExtArgs> | null
    /**
     * The data used to create many QuestionSkills.
     */
    data: QuestionSkillCreateManyInput | QuestionSkillCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSkillIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuestionSkill update
   */
  export type QuestionSkillUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSkill
     */
    select?: QuestionSkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSkill
     */
    omit?: QuestionSkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSkillInclude<ExtArgs> | null
    /**
     * The data needed to update a QuestionSkill.
     */
    data: XOR<QuestionSkillUpdateInput, QuestionSkillUncheckedUpdateInput>
    /**
     * Choose, which QuestionSkill to update.
     */
    where: QuestionSkillWhereUniqueInput
  }

  /**
   * QuestionSkill updateMany
   */
  export type QuestionSkillUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update QuestionSkills.
     */
    data: XOR<QuestionSkillUpdateManyMutationInput, QuestionSkillUncheckedUpdateManyInput>
    /**
     * Filter which QuestionSkills to update
     */
    where?: QuestionSkillWhereInput
    /**
     * Limit how many QuestionSkills to update.
     */
    limit?: number
  }

  /**
   * QuestionSkill updateManyAndReturn
   */
  export type QuestionSkillUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSkill
     */
    select?: QuestionSkillSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSkill
     */
    omit?: QuestionSkillOmit<ExtArgs> | null
    /**
     * The data used to update QuestionSkills.
     */
    data: XOR<QuestionSkillUpdateManyMutationInput, QuestionSkillUncheckedUpdateManyInput>
    /**
     * Filter which QuestionSkills to update
     */
    where?: QuestionSkillWhereInput
    /**
     * Limit how many QuestionSkills to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSkillIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuestionSkill upsert
   */
  export type QuestionSkillUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSkill
     */
    select?: QuestionSkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSkill
     */
    omit?: QuestionSkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSkillInclude<ExtArgs> | null
    /**
     * The filter to search for the QuestionSkill to update in case it exists.
     */
    where: QuestionSkillWhereUniqueInput
    /**
     * In case the QuestionSkill found by the `where` argument doesn't exist, create a new QuestionSkill with this data.
     */
    create: XOR<QuestionSkillCreateInput, QuestionSkillUncheckedCreateInput>
    /**
     * In case the QuestionSkill was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionSkillUpdateInput, QuestionSkillUncheckedUpdateInput>
  }

  /**
   * QuestionSkill delete
   */
  export type QuestionSkillDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSkill
     */
    select?: QuestionSkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSkill
     */
    omit?: QuestionSkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSkillInclude<ExtArgs> | null
    /**
     * Filter which QuestionSkill to delete.
     */
    where: QuestionSkillWhereUniqueInput
  }

  /**
   * QuestionSkill deleteMany
   */
  export type QuestionSkillDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionSkills to delete
     */
    where?: QuestionSkillWhereInput
    /**
     * Limit how many QuestionSkills to delete.
     */
    limit?: number
  }

  /**
   * QuestionSkill without action
   */
  export type QuestionSkillDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSkill
     */
    select?: QuestionSkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSkill
     */
    omit?: QuestionSkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSkillInclude<ExtArgs> | null
  }


  /**
   * Model McqItem
   */

  export type AggregateMcqItem = {
    _count: McqItemCountAggregateOutputType | null
    _avg: McqItemAvgAggregateOutputType | null
    _sum: McqItemSumAggregateOutputType | null
    _min: McqItemMinAggregateOutputType | null
    _max: McqItemMaxAggregateOutputType | null
  }

  export type McqItemAvgAggregateOutputType = {
    questionId: number | null
    optionCount: number | null
  }

  export type McqItemSumAggregateOutputType = {
    questionId: number | null
    optionCount: number | null
  }

  export type McqItemMinAggregateOutputType = {
    questionId: number | null
    shuffleOptions: boolean | null
    optionCount: number | null
    correctOptionKey: $Enums.OptionKey | null
  }

  export type McqItemMaxAggregateOutputType = {
    questionId: number | null
    shuffleOptions: boolean | null
    optionCount: number | null
    correctOptionKey: $Enums.OptionKey | null
  }

  export type McqItemCountAggregateOutputType = {
    questionId: number
    shuffleOptions: number
    optionCount: number
    correctOptionKey: number
    _all: number
  }


  export type McqItemAvgAggregateInputType = {
    questionId?: true
    optionCount?: true
  }

  export type McqItemSumAggregateInputType = {
    questionId?: true
    optionCount?: true
  }

  export type McqItemMinAggregateInputType = {
    questionId?: true
    shuffleOptions?: true
    optionCount?: true
    correctOptionKey?: true
  }

  export type McqItemMaxAggregateInputType = {
    questionId?: true
    shuffleOptions?: true
    optionCount?: true
    correctOptionKey?: true
  }

  export type McqItemCountAggregateInputType = {
    questionId?: true
    shuffleOptions?: true
    optionCount?: true
    correctOptionKey?: true
    _all?: true
  }

  export type McqItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which McqItem to aggregate.
     */
    where?: McqItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of McqItems to fetch.
     */
    orderBy?: McqItemOrderByWithRelationInput | McqItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: McqItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` McqItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` McqItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned McqItems
    **/
    _count?: true | McqItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: McqItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: McqItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: McqItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: McqItemMaxAggregateInputType
  }

  export type GetMcqItemAggregateType<T extends McqItemAggregateArgs> = {
        [P in keyof T & keyof AggregateMcqItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMcqItem[P]>
      : GetScalarType<T[P], AggregateMcqItem[P]>
  }




  export type McqItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: McqItemWhereInput
    orderBy?: McqItemOrderByWithAggregationInput | McqItemOrderByWithAggregationInput[]
    by: McqItemScalarFieldEnum[] | McqItemScalarFieldEnum
    having?: McqItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: McqItemCountAggregateInputType | true
    _avg?: McqItemAvgAggregateInputType
    _sum?: McqItemSumAggregateInputType
    _min?: McqItemMinAggregateInputType
    _max?: McqItemMaxAggregateInputType
  }

  export type McqItemGroupByOutputType = {
    questionId: number
    shuffleOptions: boolean
    optionCount: number
    correctOptionKey: $Enums.OptionKey
    _count: McqItemCountAggregateOutputType | null
    _avg: McqItemAvgAggregateOutputType | null
    _sum: McqItemSumAggregateOutputType | null
    _min: McqItemMinAggregateOutputType | null
    _max: McqItemMaxAggregateOutputType | null
  }

  type GetMcqItemGroupByPayload<T extends McqItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<McqItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof McqItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], McqItemGroupByOutputType[P]>
            : GetScalarType<T[P], McqItemGroupByOutputType[P]>
        }
      >
    >


  export type McqItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    questionId?: boolean
    shuffleOptions?: boolean
    optionCount?: boolean
    correctOptionKey?: boolean
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    options?: boolean | McqItem$optionsArgs<ExtArgs>
    _count?: boolean | McqItemCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mcqItem"]>

  export type McqItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    questionId?: boolean
    shuffleOptions?: boolean
    optionCount?: boolean
    correctOptionKey?: boolean
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mcqItem"]>

  export type McqItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    questionId?: boolean
    shuffleOptions?: boolean
    optionCount?: boolean
    correctOptionKey?: boolean
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mcqItem"]>

  export type McqItemSelectScalar = {
    questionId?: boolean
    shuffleOptions?: boolean
    optionCount?: boolean
    correctOptionKey?: boolean
  }

  export type McqItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"questionId" | "shuffleOptions" | "optionCount" | "correctOptionKey", ExtArgs["result"]["mcqItem"]>
  export type McqItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    options?: boolean | McqItem$optionsArgs<ExtArgs>
    _count?: boolean | McqItemCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type McqItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }
  export type McqItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }

  export type $McqItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "McqItem"
    objects: {
      question: Prisma.$QuestionPayload<ExtArgs>
      options: Prisma.$McqOptionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      questionId: number
      shuffleOptions: boolean
      optionCount: number
      correctOptionKey: $Enums.OptionKey
    }, ExtArgs["result"]["mcqItem"]>
    composites: {}
  }

  type McqItemGetPayload<S extends boolean | null | undefined | McqItemDefaultArgs> = $Result.GetResult<Prisma.$McqItemPayload, S>

  type McqItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<McqItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: McqItemCountAggregateInputType | true
    }

  export interface McqItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['McqItem'], meta: { name: 'McqItem' } }
    /**
     * Find zero or one McqItem that matches the filter.
     * @param {McqItemFindUniqueArgs} args - Arguments to find a McqItem
     * @example
     * // Get one McqItem
     * const mcqItem = await prisma.mcqItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends McqItemFindUniqueArgs>(args: SelectSubset<T, McqItemFindUniqueArgs<ExtArgs>>): Prisma__McqItemClient<$Result.GetResult<Prisma.$McqItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one McqItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {McqItemFindUniqueOrThrowArgs} args - Arguments to find a McqItem
     * @example
     * // Get one McqItem
     * const mcqItem = await prisma.mcqItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends McqItemFindUniqueOrThrowArgs>(args: SelectSubset<T, McqItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__McqItemClient<$Result.GetResult<Prisma.$McqItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first McqItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {McqItemFindFirstArgs} args - Arguments to find a McqItem
     * @example
     * // Get one McqItem
     * const mcqItem = await prisma.mcqItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends McqItemFindFirstArgs>(args?: SelectSubset<T, McqItemFindFirstArgs<ExtArgs>>): Prisma__McqItemClient<$Result.GetResult<Prisma.$McqItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first McqItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {McqItemFindFirstOrThrowArgs} args - Arguments to find a McqItem
     * @example
     * // Get one McqItem
     * const mcqItem = await prisma.mcqItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends McqItemFindFirstOrThrowArgs>(args?: SelectSubset<T, McqItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__McqItemClient<$Result.GetResult<Prisma.$McqItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more McqItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {McqItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all McqItems
     * const mcqItems = await prisma.mcqItem.findMany()
     * 
     * // Get first 10 McqItems
     * const mcqItems = await prisma.mcqItem.findMany({ take: 10 })
     * 
     * // Only select the `questionId`
     * const mcqItemWithQuestionIdOnly = await prisma.mcqItem.findMany({ select: { questionId: true } })
     * 
     */
    findMany<T extends McqItemFindManyArgs>(args?: SelectSubset<T, McqItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$McqItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a McqItem.
     * @param {McqItemCreateArgs} args - Arguments to create a McqItem.
     * @example
     * // Create one McqItem
     * const McqItem = await prisma.mcqItem.create({
     *   data: {
     *     // ... data to create a McqItem
     *   }
     * })
     * 
     */
    create<T extends McqItemCreateArgs>(args: SelectSubset<T, McqItemCreateArgs<ExtArgs>>): Prisma__McqItemClient<$Result.GetResult<Prisma.$McqItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many McqItems.
     * @param {McqItemCreateManyArgs} args - Arguments to create many McqItems.
     * @example
     * // Create many McqItems
     * const mcqItem = await prisma.mcqItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends McqItemCreateManyArgs>(args?: SelectSubset<T, McqItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many McqItems and returns the data saved in the database.
     * @param {McqItemCreateManyAndReturnArgs} args - Arguments to create many McqItems.
     * @example
     * // Create many McqItems
     * const mcqItem = await prisma.mcqItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many McqItems and only return the `questionId`
     * const mcqItemWithQuestionIdOnly = await prisma.mcqItem.createManyAndReturn({
     *   select: { questionId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends McqItemCreateManyAndReturnArgs>(args?: SelectSubset<T, McqItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$McqItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a McqItem.
     * @param {McqItemDeleteArgs} args - Arguments to delete one McqItem.
     * @example
     * // Delete one McqItem
     * const McqItem = await prisma.mcqItem.delete({
     *   where: {
     *     // ... filter to delete one McqItem
     *   }
     * })
     * 
     */
    delete<T extends McqItemDeleteArgs>(args: SelectSubset<T, McqItemDeleteArgs<ExtArgs>>): Prisma__McqItemClient<$Result.GetResult<Prisma.$McqItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one McqItem.
     * @param {McqItemUpdateArgs} args - Arguments to update one McqItem.
     * @example
     * // Update one McqItem
     * const mcqItem = await prisma.mcqItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends McqItemUpdateArgs>(args: SelectSubset<T, McqItemUpdateArgs<ExtArgs>>): Prisma__McqItemClient<$Result.GetResult<Prisma.$McqItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more McqItems.
     * @param {McqItemDeleteManyArgs} args - Arguments to filter McqItems to delete.
     * @example
     * // Delete a few McqItems
     * const { count } = await prisma.mcqItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends McqItemDeleteManyArgs>(args?: SelectSubset<T, McqItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more McqItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {McqItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many McqItems
     * const mcqItem = await prisma.mcqItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends McqItemUpdateManyArgs>(args: SelectSubset<T, McqItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more McqItems and returns the data updated in the database.
     * @param {McqItemUpdateManyAndReturnArgs} args - Arguments to update many McqItems.
     * @example
     * // Update many McqItems
     * const mcqItem = await prisma.mcqItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more McqItems and only return the `questionId`
     * const mcqItemWithQuestionIdOnly = await prisma.mcqItem.updateManyAndReturn({
     *   select: { questionId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends McqItemUpdateManyAndReturnArgs>(args: SelectSubset<T, McqItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$McqItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one McqItem.
     * @param {McqItemUpsertArgs} args - Arguments to update or create a McqItem.
     * @example
     * // Update or create a McqItem
     * const mcqItem = await prisma.mcqItem.upsert({
     *   create: {
     *     // ... data to create a McqItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the McqItem we want to update
     *   }
     * })
     */
    upsert<T extends McqItemUpsertArgs>(args: SelectSubset<T, McqItemUpsertArgs<ExtArgs>>): Prisma__McqItemClient<$Result.GetResult<Prisma.$McqItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of McqItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {McqItemCountArgs} args - Arguments to filter McqItems to count.
     * @example
     * // Count the number of McqItems
     * const count = await prisma.mcqItem.count({
     *   where: {
     *     // ... the filter for the McqItems we want to count
     *   }
     * })
    **/
    count<T extends McqItemCountArgs>(
      args?: Subset<T, McqItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], McqItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a McqItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {McqItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends McqItemAggregateArgs>(args: Subset<T, McqItemAggregateArgs>): Prisma.PrismaPromise<GetMcqItemAggregateType<T>>

    /**
     * Group by McqItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {McqItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends McqItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: McqItemGroupByArgs['orderBy'] }
        : { orderBy?: McqItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, McqItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMcqItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the McqItem model
   */
  readonly fields: McqItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for McqItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__McqItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    question<T extends QuestionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuestionDefaultArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    options<T extends McqItem$optionsArgs<ExtArgs> = {}>(args?: Subset<T, McqItem$optionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$McqOptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the McqItem model
   */
  interface McqItemFieldRefs {
    readonly questionId: FieldRef<"McqItem", 'Int'>
    readonly shuffleOptions: FieldRef<"McqItem", 'Boolean'>
    readonly optionCount: FieldRef<"McqItem", 'Int'>
    readonly correctOptionKey: FieldRef<"McqItem", 'OptionKey'>
  }
    

  // Custom InputTypes
  /**
   * McqItem findUnique
   */
  export type McqItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the McqItem
     */
    select?: McqItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the McqItem
     */
    omit?: McqItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: McqItemInclude<ExtArgs> | null
    /**
     * Filter, which McqItem to fetch.
     */
    where: McqItemWhereUniqueInput
  }

  /**
   * McqItem findUniqueOrThrow
   */
  export type McqItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the McqItem
     */
    select?: McqItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the McqItem
     */
    omit?: McqItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: McqItemInclude<ExtArgs> | null
    /**
     * Filter, which McqItem to fetch.
     */
    where: McqItemWhereUniqueInput
  }

  /**
   * McqItem findFirst
   */
  export type McqItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the McqItem
     */
    select?: McqItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the McqItem
     */
    omit?: McqItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: McqItemInclude<ExtArgs> | null
    /**
     * Filter, which McqItem to fetch.
     */
    where?: McqItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of McqItems to fetch.
     */
    orderBy?: McqItemOrderByWithRelationInput | McqItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for McqItems.
     */
    cursor?: McqItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` McqItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` McqItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of McqItems.
     */
    distinct?: McqItemScalarFieldEnum | McqItemScalarFieldEnum[]
  }

  /**
   * McqItem findFirstOrThrow
   */
  export type McqItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the McqItem
     */
    select?: McqItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the McqItem
     */
    omit?: McqItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: McqItemInclude<ExtArgs> | null
    /**
     * Filter, which McqItem to fetch.
     */
    where?: McqItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of McqItems to fetch.
     */
    orderBy?: McqItemOrderByWithRelationInput | McqItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for McqItems.
     */
    cursor?: McqItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` McqItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` McqItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of McqItems.
     */
    distinct?: McqItemScalarFieldEnum | McqItemScalarFieldEnum[]
  }

  /**
   * McqItem findMany
   */
  export type McqItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the McqItem
     */
    select?: McqItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the McqItem
     */
    omit?: McqItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: McqItemInclude<ExtArgs> | null
    /**
     * Filter, which McqItems to fetch.
     */
    where?: McqItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of McqItems to fetch.
     */
    orderBy?: McqItemOrderByWithRelationInput | McqItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing McqItems.
     */
    cursor?: McqItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` McqItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` McqItems.
     */
    skip?: number
    distinct?: McqItemScalarFieldEnum | McqItemScalarFieldEnum[]
  }

  /**
   * McqItem create
   */
  export type McqItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the McqItem
     */
    select?: McqItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the McqItem
     */
    omit?: McqItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: McqItemInclude<ExtArgs> | null
    /**
     * The data needed to create a McqItem.
     */
    data: XOR<McqItemCreateInput, McqItemUncheckedCreateInput>
  }

  /**
   * McqItem createMany
   */
  export type McqItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many McqItems.
     */
    data: McqItemCreateManyInput | McqItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * McqItem createManyAndReturn
   */
  export type McqItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the McqItem
     */
    select?: McqItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the McqItem
     */
    omit?: McqItemOmit<ExtArgs> | null
    /**
     * The data used to create many McqItems.
     */
    data: McqItemCreateManyInput | McqItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: McqItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * McqItem update
   */
  export type McqItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the McqItem
     */
    select?: McqItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the McqItem
     */
    omit?: McqItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: McqItemInclude<ExtArgs> | null
    /**
     * The data needed to update a McqItem.
     */
    data: XOR<McqItemUpdateInput, McqItemUncheckedUpdateInput>
    /**
     * Choose, which McqItem to update.
     */
    where: McqItemWhereUniqueInput
  }

  /**
   * McqItem updateMany
   */
  export type McqItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update McqItems.
     */
    data: XOR<McqItemUpdateManyMutationInput, McqItemUncheckedUpdateManyInput>
    /**
     * Filter which McqItems to update
     */
    where?: McqItemWhereInput
    /**
     * Limit how many McqItems to update.
     */
    limit?: number
  }

  /**
   * McqItem updateManyAndReturn
   */
  export type McqItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the McqItem
     */
    select?: McqItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the McqItem
     */
    omit?: McqItemOmit<ExtArgs> | null
    /**
     * The data used to update McqItems.
     */
    data: XOR<McqItemUpdateManyMutationInput, McqItemUncheckedUpdateManyInput>
    /**
     * Filter which McqItems to update
     */
    where?: McqItemWhereInput
    /**
     * Limit how many McqItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: McqItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * McqItem upsert
   */
  export type McqItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the McqItem
     */
    select?: McqItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the McqItem
     */
    omit?: McqItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: McqItemInclude<ExtArgs> | null
    /**
     * The filter to search for the McqItem to update in case it exists.
     */
    where: McqItemWhereUniqueInput
    /**
     * In case the McqItem found by the `where` argument doesn't exist, create a new McqItem with this data.
     */
    create: XOR<McqItemCreateInput, McqItemUncheckedCreateInput>
    /**
     * In case the McqItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<McqItemUpdateInput, McqItemUncheckedUpdateInput>
  }

  /**
   * McqItem delete
   */
  export type McqItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the McqItem
     */
    select?: McqItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the McqItem
     */
    omit?: McqItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: McqItemInclude<ExtArgs> | null
    /**
     * Filter which McqItem to delete.
     */
    where: McqItemWhereUniqueInput
  }

  /**
   * McqItem deleteMany
   */
  export type McqItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which McqItems to delete
     */
    where?: McqItemWhereInput
    /**
     * Limit how many McqItems to delete.
     */
    limit?: number
  }

  /**
   * McqItem.options
   */
  export type McqItem$optionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the McqOption
     */
    select?: McqOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the McqOption
     */
    omit?: McqOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: McqOptionInclude<ExtArgs> | null
    where?: McqOptionWhereInput
    orderBy?: McqOptionOrderByWithRelationInput | McqOptionOrderByWithRelationInput[]
    cursor?: McqOptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: McqOptionScalarFieldEnum | McqOptionScalarFieldEnum[]
  }

  /**
   * McqItem without action
   */
  export type McqItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the McqItem
     */
    select?: McqItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the McqItem
     */
    omit?: McqItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: McqItemInclude<ExtArgs> | null
  }


  /**
   * Model McqOption
   */

  export type AggregateMcqOption = {
    _count: McqOptionCountAggregateOutputType | null
    _avg: McqOptionAvgAggregateOutputType | null
    _sum: McqOptionSumAggregateOutputType | null
    _min: McqOptionMinAggregateOutputType | null
    _max: McqOptionMaxAggregateOutputType | null
  }

  export type McqOptionAvgAggregateOutputType = {
    id: number | null
    questionId: number | null
  }

  export type McqOptionSumAggregateOutputType = {
    id: number | null
    questionId: number | null
  }

  export type McqOptionMinAggregateOutputType = {
    id: number | null
    questionId: number | null
    label: $Enums.OptionKey | null
    textHtml: string | null
    textPlain: string | null
  }

  export type McqOptionMaxAggregateOutputType = {
    id: number | null
    questionId: number | null
    label: $Enums.OptionKey | null
    textHtml: string | null
    textPlain: string | null
  }

  export type McqOptionCountAggregateOutputType = {
    id: number
    questionId: number
    label: number
    textHtml: number
    textPlain: number
    _all: number
  }


  export type McqOptionAvgAggregateInputType = {
    id?: true
    questionId?: true
  }

  export type McqOptionSumAggregateInputType = {
    id?: true
    questionId?: true
  }

  export type McqOptionMinAggregateInputType = {
    id?: true
    questionId?: true
    label?: true
    textHtml?: true
    textPlain?: true
  }

  export type McqOptionMaxAggregateInputType = {
    id?: true
    questionId?: true
    label?: true
    textHtml?: true
    textPlain?: true
  }

  export type McqOptionCountAggregateInputType = {
    id?: true
    questionId?: true
    label?: true
    textHtml?: true
    textPlain?: true
    _all?: true
  }

  export type McqOptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which McqOption to aggregate.
     */
    where?: McqOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of McqOptions to fetch.
     */
    orderBy?: McqOptionOrderByWithRelationInput | McqOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: McqOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` McqOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` McqOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned McqOptions
    **/
    _count?: true | McqOptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: McqOptionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: McqOptionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: McqOptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: McqOptionMaxAggregateInputType
  }

  export type GetMcqOptionAggregateType<T extends McqOptionAggregateArgs> = {
        [P in keyof T & keyof AggregateMcqOption]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMcqOption[P]>
      : GetScalarType<T[P], AggregateMcqOption[P]>
  }




  export type McqOptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: McqOptionWhereInput
    orderBy?: McqOptionOrderByWithAggregationInput | McqOptionOrderByWithAggregationInput[]
    by: McqOptionScalarFieldEnum[] | McqOptionScalarFieldEnum
    having?: McqOptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: McqOptionCountAggregateInputType | true
    _avg?: McqOptionAvgAggregateInputType
    _sum?: McqOptionSumAggregateInputType
    _min?: McqOptionMinAggregateInputType
    _max?: McqOptionMaxAggregateInputType
  }

  export type McqOptionGroupByOutputType = {
    id: number
    questionId: number
    label: $Enums.OptionKey
    textHtml: string | null
    textPlain: string | null
    _count: McqOptionCountAggregateOutputType | null
    _avg: McqOptionAvgAggregateOutputType | null
    _sum: McqOptionSumAggregateOutputType | null
    _min: McqOptionMinAggregateOutputType | null
    _max: McqOptionMaxAggregateOutputType | null
  }

  type GetMcqOptionGroupByPayload<T extends McqOptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<McqOptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof McqOptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], McqOptionGroupByOutputType[P]>
            : GetScalarType<T[P], McqOptionGroupByOutputType[P]>
        }
      >
    >


  export type McqOptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    questionId?: boolean
    label?: boolean
    textHtml?: boolean
    textPlain?: boolean
    mcq?: boolean | McqItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mcqOption"]>

  export type McqOptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    questionId?: boolean
    label?: boolean
    textHtml?: boolean
    textPlain?: boolean
    mcq?: boolean | McqItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mcqOption"]>

  export type McqOptionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    questionId?: boolean
    label?: boolean
    textHtml?: boolean
    textPlain?: boolean
    mcq?: boolean | McqItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mcqOption"]>

  export type McqOptionSelectScalar = {
    id?: boolean
    questionId?: boolean
    label?: boolean
    textHtml?: boolean
    textPlain?: boolean
  }

  export type McqOptionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "questionId" | "label" | "textHtml" | "textPlain", ExtArgs["result"]["mcqOption"]>
  export type McqOptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mcq?: boolean | McqItemDefaultArgs<ExtArgs>
  }
  export type McqOptionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mcq?: boolean | McqItemDefaultArgs<ExtArgs>
  }
  export type McqOptionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mcq?: boolean | McqItemDefaultArgs<ExtArgs>
  }

  export type $McqOptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "McqOption"
    objects: {
      mcq: Prisma.$McqItemPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      questionId: number
      label: $Enums.OptionKey
      textHtml: string | null
      textPlain: string | null
    }, ExtArgs["result"]["mcqOption"]>
    composites: {}
  }

  type McqOptionGetPayload<S extends boolean | null | undefined | McqOptionDefaultArgs> = $Result.GetResult<Prisma.$McqOptionPayload, S>

  type McqOptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<McqOptionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: McqOptionCountAggregateInputType | true
    }

  export interface McqOptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['McqOption'], meta: { name: 'McqOption' } }
    /**
     * Find zero or one McqOption that matches the filter.
     * @param {McqOptionFindUniqueArgs} args - Arguments to find a McqOption
     * @example
     * // Get one McqOption
     * const mcqOption = await prisma.mcqOption.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends McqOptionFindUniqueArgs>(args: SelectSubset<T, McqOptionFindUniqueArgs<ExtArgs>>): Prisma__McqOptionClient<$Result.GetResult<Prisma.$McqOptionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one McqOption that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {McqOptionFindUniqueOrThrowArgs} args - Arguments to find a McqOption
     * @example
     * // Get one McqOption
     * const mcqOption = await prisma.mcqOption.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends McqOptionFindUniqueOrThrowArgs>(args: SelectSubset<T, McqOptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__McqOptionClient<$Result.GetResult<Prisma.$McqOptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first McqOption that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {McqOptionFindFirstArgs} args - Arguments to find a McqOption
     * @example
     * // Get one McqOption
     * const mcqOption = await prisma.mcqOption.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends McqOptionFindFirstArgs>(args?: SelectSubset<T, McqOptionFindFirstArgs<ExtArgs>>): Prisma__McqOptionClient<$Result.GetResult<Prisma.$McqOptionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first McqOption that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {McqOptionFindFirstOrThrowArgs} args - Arguments to find a McqOption
     * @example
     * // Get one McqOption
     * const mcqOption = await prisma.mcqOption.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends McqOptionFindFirstOrThrowArgs>(args?: SelectSubset<T, McqOptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__McqOptionClient<$Result.GetResult<Prisma.$McqOptionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more McqOptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {McqOptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all McqOptions
     * const mcqOptions = await prisma.mcqOption.findMany()
     * 
     * // Get first 10 McqOptions
     * const mcqOptions = await prisma.mcqOption.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mcqOptionWithIdOnly = await prisma.mcqOption.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends McqOptionFindManyArgs>(args?: SelectSubset<T, McqOptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$McqOptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a McqOption.
     * @param {McqOptionCreateArgs} args - Arguments to create a McqOption.
     * @example
     * // Create one McqOption
     * const McqOption = await prisma.mcqOption.create({
     *   data: {
     *     // ... data to create a McqOption
     *   }
     * })
     * 
     */
    create<T extends McqOptionCreateArgs>(args: SelectSubset<T, McqOptionCreateArgs<ExtArgs>>): Prisma__McqOptionClient<$Result.GetResult<Prisma.$McqOptionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many McqOptions.
     * @param {McqOptionCreateManyArgs} args - Arguments to create many McqOptions.
     * @example
     * // Create many McqOptions
     * const mcqOption = await prisma.mcqOption.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends McqOptionCreateManyArgs>(args?: SelectSubset<T, McqOptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many McqOptions and returns the data saved in the database.
     * @param {McqOptionCreateManyAndReturnArgs} args - Arguments to create many McqOptions.
     * @example
     * // Create many McqOptions
     * const mcqOption = await prisma.mcqOption.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many McqOptions and only return the `id`
     * const mcqOptionWithIdOnly = await prisma.mcqOption.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends McqOptionCreateManyAndReturnArgs>(args?: SelectSubset<T, McqOptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$McqOptionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a McqOption.
     * @param {McqOptionDeleteArgs} args - Arguments to delete one McqOption.
     * @example
     * // Delete one McqOption
     * const McqOption = await prisma.mcqOption.delete({
     *   where: {
     *     // ... filter to delete one McqOption
     *   }
     * })
     * 
     */
    delete<T extends McqOptionDeleteArgs>(args: SelectSubset<T, McqOptionDeleteArgs<ExtArgs>>): Prisma__McqOptionClient<$Result.GetResult<Prisma.$McqOptionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one McqOption.
     * @param {McqOptionUpdateArgs} args - Arguments to update one McqOption.
     * @example
     * // Update one McqOption
     * const mcqOption = await prisma.mcqOption.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends McqOptionUpdateArgs>(args: SelectSubset<T, McqOptionUpdateArgs<ExtArgs>>): Prisma__McqOptionClient<$Result.GetResult<Prisma.$McqOptionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more McqOptions.
     * @param {McqOptionDeleteManyArgs} args - Arguments to filter McqOptions to delete.
     * @example
     * // Delete a few McqOptions
     * const { count } = await prisma.mcqOption.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends McqOptionDeleteManyArgs>(args?: SelectSubset<T, McqOptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more McqOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {McqOptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many McqOptions
     * const mcqOption = await prisma.mcqOption.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends McqOptionUpdateManyArgs>(args: SelectSubset<T, McqOptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more McqOptions and returns the data updated in the database.
     * @param {McqOptionUpdateManyAndReturnArgs} args - Arguments to update many McqOptions.
     * @example
     * // Update many McqOptions
     * const mcqOption = await prisma.mcqOption.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more McqOptions and only return the `id`
     * const mcqOptionWithIdOnly = await prisma.mcqOption.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends McqOptionUpdateManyAndReturnArgs>(args: SelectSubset<T, McqOptionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$McqOptionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one McqOption.
     * @param {McqOptionUpsertArgs} args - Arguments to update or create a McqOption.
     * @example
     * // Update or create a McqOption
     * const mcqOption = await prisma.mcqOption.upsert({
     *   create: {
     *     // ... data to create a McqOption
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the McqOption we want to update
     *   }
     * })
     */
    upsert<T extends McqOptionUpsertArgs>(args: SelectSubset<T, McqOptionUpsertArgs<ExtArgs>>): Prisma__McqOptionClient<$Result.GetResult<Prisma.$McqOptionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of McqOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {McqOptionCountArgs} args - Arguments to filter McqOptions to count.
     * @example
     * // Count the number of McqOptions
     * const count = await prisma.mcqOption.count({
     *   where: {
     *     // ... the filter for the McqOptions we want to count
     *   }
     * })
    **/
    count<T extends McqOptionCountArgs>(
      args?: Subset<T, McqOptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], McqOptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a McqOption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {McqOptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends McqOptionAggregateArgs>(args: Subset<T, McqOptionAggregateArgs>): Prisma.PrismaPromise<GetMcqOptionAggregateType<T>>

    /**
     * Group by McqOption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {McqOptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends McqOptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: McqOptionGroupByArgs['orderBy'] }
        : { orderBy?: McqOptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, McqOptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMcqOptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the McqOption model
   */
  readonly fields: McqOptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for McqOption.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__McqOptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    mcq<T extends McqItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, McqItemDefaultArgs<ExtArgs>>): Prisma__McqItemClient<$Result.GetResult<Prisma.$McqItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the McqOption model
   */
  interface McqOptionFieldRefs {
    readonly id: FieldRef<"McqOption", 'Int'>
    readonly questionId: FieldRef<"McqOption", 'Int'>
    readonly label: FieldRef<"McqOption", 'OptionKey'>
    readonly textHtml: FieldRef<"McqOption", 'String'>
    readonly textPlain: FieldRef<"McqOption", 'String'>
  }
    

  // Custom InputTypes
  /**
   * McqOption findUnique
   */
  export type McqOptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the McqOption
     */
    select?: McqOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the McqOption
     */
    omit?: McqOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: McqOptionInclude<ExtArgs> | null
    /**
     * Filter, which McqOption to fetch.
     */
    where: McqOptionWhereUniqueInput
  }

  /**
   * McqOption findUniqueOrThrow
   */
  export type McqOptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the McqOption
     */
    select?: McqOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the McqOption
     */
    omit?: McqOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: McqOptionInclude<ExtArgs> | null
    /**
     * Filter, which McqOption to fetch.
     */
    where: McqOptionWhereUniqueInput
  }

  /**
   * McqOption findFirst
   */
  export type McqOptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the McqOption
     */
    select?: McqOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the McqOption
     */
    omit?: McqOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: McqOptionInclude<ExtArgs> | null
    /**
     * Filter, which McqOption to fetch.
     */
    where?: McqOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of McqOptions to fetch.
     */
    orderBy?: McqOptionOrderByWithRelationInput | McqOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for McqOptions.
     */
    cursor?: McqOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` McqOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` McqOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of McqOptions.
     */
    distinct?: McqOptionScalarFieldEnum | McqOptionScalarFieldEnum[]
  }

  /**
   * McqOption findFirstOrThrow
   */
  export type McqOptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the McqOption
     */
    select?: McqOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the McqOption
     */
    omit?: McqOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: McqOptionInclude<ExtArgs> | null
    /**
     * Filter, which McqOption to fetch.
     */
    where?: McqOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of McqOptions to fetch.
     */
    orderBy?: McqOptionOrderByWithRelationInput | McqOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for McqOptions.
     */
    cursor?: McqOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` McqOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` McqOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of McqOptions.
     */
    distinct?: McqOptionScalarFieldEnum | McqOptionScalarFieldEnum[]
  }

  /**
   * McqOption findMany
   */
  export type McqOptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the McqOption
     */
    select?: McqOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the McqOption
     */
    omit?: McqOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: McqOptionInclude<ExtArgs> | null
    /**
     * Filter, which McqOptions to fetch.
     */
    where?: McqOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of McqOptions to fetch.
     */
    orderBy?: McqOptionOrderByWithRelationInput | McqOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing McqOptions.
     */
    cursor?: McqOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` McqOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` McqOptions.
     */
    skip?: number
    distinct?: McqOptionScalarFieldEnum | McqOptionScalarFieldEnum[]
  }

  /**
   * McqOption create
   */
  export type McqOptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the McqOption
     */
    select?: McqOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the McqOption
     */
    omit?: McqOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: McqOptionInclude<ExtArgs> | null
    /**
     * The data needed to create a McqOption.
     */
    data: XOR<McqOptionCreateInput, McqOptionUncheckedCreateInput>
  }

  /**
   * McqOption createMany
   */
  export type McqOptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many McqOptions.
     */
    data: McqOptionCreateManyInput | McqOptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * McqOption createManyAndReturn
   */
  export type McqOptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the McqOption
     */
    select?: McqOptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the McqOption
     */
    omit?: McqOptionOmit<ExtArgs> | null
    /**
     * The data used to create many McqOptions.
     */
    data: McqOptionCreateManyInput | McqOptionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: McqOptionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * McqOption update
   */
  export type McqOptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the McqOption
     */
    select?: McqOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the McqOption
     */
    omit?: McqOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: McqOptionInclude<ExtArgs> | null
    /**
     * The data needed to update a McqOption.
     */
    data: XOR<McqOptionUpdateInput, McqOptionUncheckedUpdateInput>
    /**
     * Choose, which McqOption to update.
     */
    where: McqOptionWhereUniqueInput
  }

  /**
   * McqOption updateMany
   */
  export type McqOptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update McqOptions.
     */
    data: XOR<McqOptionUpdateManyMutationInput, McqOptionUncheckedUpdateManyInput>
    /**
     * Filter which McqOptions to update
     */
    where?: McqOptionWhereInput
    /**
     * Limit how many McqOptions to update.
     */
    limit?: number
  }

  /**
   * McqOption updateManyAndReturn
   */
  export type McqOptionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the McqOption
     */
    select?: McqOptionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the McqOption
     */
    omit?: McqOptionOmit<ExtArgs> | null
    /**
     * The data used to update McqOptions.
     */
    data: XOR<McqOptionUpdateManyMutationInput, McqOptionUncheckedUpdateManyInput>
    /**
     * Filter which McqOptions to update
     */
    where?: McqOptionWhereInput
    /**
     * Limit how many McqOptions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: McqOptionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * McqOption upsert
   */
  export type McqOptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the McqOption
     */
    select?: McqOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the McqOption
     */
    omit?: McqOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: McqOptionInclude<ExtArgs> | null
    /**
     * The filter to search for the McqOption to update in case it exists.
     */
    where: McqOptionWhereUniqueInput
    /**
     * In case the McqOption found by the `where` argument doesn't exist, create a new McqOption with this data.
     */
    create: XOR<McqOptionCreateInput, McqOptionUncheckedCreateInput>
    /**
     * In case the McqOption was found with the provided `where` argument, update it with this data.
     */
    update: XOR<McqOptionUpdateInput, McqOptionUncheckedUpdateInput>
  }

  /**
   * McqOption delete
   */
  export type McqOptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the McqOption
     */
    select?: McqOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the McqOption
     */
    omit?: McqOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: McqOptionInclude<ExtArgs> | null
    /**
     * Filter which McqOption to delete.
     */
    where: McqOptionWhereUniqueInput
  }

  /**
   * McqOption deleteMany
   */
  export type McqOptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which McqOptions to delete
     */
    where?: McqOptionWhereInput
    /**
     * Limit how many McqOptions to delete.
     */
    limit?: number
  }

  /**
   * McqOption without action
   */
  export type McqOptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the McqOption
     */
    select?: McqOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the McqOption
     */
    omit?: McqOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: McqOptionInclude<ExtArgs> | null
  }


  /**
   * Model FrItem
   */

  export type AggregateFrItem = {
    _count: FrItemCountAggregateOutputType | null
    _avg: FrItemAvgAggregateOutputType | null
    _sum: FrItemSumAggregateOutputType | null
    _min: FrItemMinAggregateOutputType | null
    _max: FrItemMaxAggregateOutputType | null
  }

  export type FrItemAvgAggregateOutputType = {
    questionId: number | null
    maxScore: Decimal | null
  }

  export type FrItemSumAggregateOutputType = {
    questionId: number | null
    maxScore: Decimal | null
  }

  export type FrItemMinAggregateOutputType = {
    questionId: number | null
    answerGuidanceHtml: string | null
    maxScore: Decimal | null
  }

  export type FrItemMaxAggregateOutputType = {
    questionId: number | null
    answerGuidanceHtml: string | null
    maxScore: Decimal | null
  }

  export type FrItemCountAggregateOutputType = {
    questionId: number
    answerGuidanceHtml: number
    maxScore: number
    _all: number
  }


  export type FrItemAvgAggregateInputType = {
    questionId?: true
    maxScore?: true
  }

  export type FrItemSumAggregateInputType = {
    questionId?: true
    maxScore?: true
  }

  export type FrItemMinAggregateInputType = {
    questionId?: true
    answerGuidanceHtml?: true
    maxScore?: true
  }

  export type FrItemMaxAggregateInputType = {
    questionId?: true
    answerGuidanceHtml?: true
    maxScore?: true
  }

  export type FrItemCountAggregateInputType = {
    questionId?: true
    answerGuidanceHtml?: true
    maxScore?: true
    _all?: true
  }

  export type FrItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FrItem to aggregate.
     */
    where?: FrItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FrItems to fetch.
     */
    orderBy?: FrItemOrderByWithRelationInput | FrItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FrItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FrItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FrItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FrItems
    **/
    _count?: true | FrItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FrItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FrItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FrItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FrItemMaxAggregateInputType
  }

  export type GetFrItemAggregateType<T extends FrItemAggregateArgs> = {
        [P in keyof T & keyof AggregateFrItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFrItem[P]>
      : GetScalarType<T[P], AggregateFrItem[P]>
  }




  export type FrItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FrItemWhereInput
    orderBy?: FrItemOrderByWithAggregationInput | FrItemOrderByWithAggregationInput[]
    by: FrItemScalarFieldEnum[] | FrItemScalarFieldEnum
    having?: FrItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FrItemCountAggregateInputType | true
    _avg?: FrItemAvgAggregateInputType
    _sum?: FrItemSumAggregateInputType
    _min?: FrItemMinAggregateInputType
    _max?: FrItemMaxAggregateInputType
  }

  export type FrItemGroupByOutputType = {
    questionId: number
    answerGuidanceHtml: string | null
    maxScore: Decimal | null
    _count: FrItemCountAggregateOutputType | null
    _avg: FrItemAvgAggregateOutputType | null
    _sum: FrItemSumAggregateOutputType | null
    _min: FrItemMinAggregateOutputType | null
    _max: FrItemMaxAggregateOutputType | null
  }

  type GetFrItemGroupByPayload<T extends FrItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FrItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FrItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FrItemGroupByOutputType[P]>
            : GetScalarType<T[P], FrItemGroupByOutputType[P]>
        }
      >
    >


  export type FrItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    questionId?: boolean
    answerGuidanceHtml?: boolean
    maxScore?: boolean
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    rubrics?: boolean | FrItem$rubricsArgs<ExtArgs>
    expectedAnswers?: boolean | FrItem$expectedAnswersArgs<ExtArgs>
    _count?: boolean | FrItemCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["frItem"]>

  export type FrItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    questionId?: boolean
    answerGuidanceHtml?: boolean
    maxScore?: boolean
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["frItem"]>

  export type FrItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    questionId?: boolean
    answerGuidanceHtml?: boolean
    maxScore?: boolean
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["frItem"]>

  export type FrItemSelectScalar = {
    questionId?: boolean
    answerGuidanceHtml?: boolean
    maxScore?: boolean
  }

  export type FrItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"questionId" | "answerGuidanceHtml" | "maxScore", ExtArgs["result"]["frItem"]>
  export type FrItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    rubrics?: boolean | FrItem$rubricsArgs<ExtArgs>
    expectedAnswers?: boolean | FrItem$expectedAnswersArgs<ExtArgs>
    _count?: boolean | FrItemCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FrItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }
  export type FrItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }

  export type $FrItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FrItem"
    objects: {
      question: Prisma.$QuestionPayload<ExtArgs>
      rubrics: Prisma.$FrRubricPayload<ExtArgs>[]
      expectedAnswers: Prisma.$FrAnswerExpectedPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      questionId: number
      answerGuidanceHtml: string | null
      maxScore: Prisma.Decimal | null
    }, ExtArgs["result"]["frItem"]>
    composites: {}
  }

  type FrItemGetPayload<S extends boolean | null | undefined | FrItemDefaultArgs> = $Result.GetResult<Prisma.$FrItemPayload, S>

  type FrItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FrItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FrItemCountAggregateInputType | true
    }

  export interface FrItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FrItem'], meta: { name: 'FrItem' } }
    /**
     * Find zero or one FrItem that matches the filter.
     * @param {FrItemFindUniqueArgs} args - Arguments to find a FrItem
     * @example
     * // Get one FrItem
     * const frItem = await prisma.frItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FrItemFindUniqueArgs>(args: SelectSubset<T, FrItemFindUniqueArgs<ExtArgs>>): Prisma__FrItemClient<$Result.GetResult<Prisma.$FrItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FrItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FrItemFindUniqueOrThrowArgs} args - Arguments to find a FrItem
     * @example
     * // Get one FrItem
     * const frItem = await prisma.frItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FrItemFindUniqueOrThrowArgs>(args: SelectSubset<T, FrItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FrItemClient<$Result.GetResult<Prisma.$FrItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FrItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrItemFindFirstArgs} args - Arguments to find a FrItem
     * @example
     * // Get one FrItem
     * const frItem = await prisma.frItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FrItemFindFirstArgs>(args?: SelectSubset<T, FrItemFindFirstArgs<ExtArgs>>): Prisma__FrItemClient<$Result.GetResult<Prisma.$FrItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FrItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrItemFindFirstOrThrowArgs} args - Arguments to find a FrItem
     * @example
     * // Get one FrItem
     * const frItem = await prisma.frItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FrItemFindFirstOrThrowArgs>(args?: SelectSubset<T, FrItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__FrItemClient<$Result.GetResult<Prisma.$FrItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FrItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FrItems
     * const frItems = await prisma.frItem.findMany()
     * 
     * // Get first 10 FrItems
     * const frItems = await prisma.frItem.findMany({ take: 10 })
     * 
     * // Only select the `questionId`
     * const frItemWithQuestionIdOnly = await prisma.frItem.findMany({ select: { questionId: true } })
     * 
     */
    findMany<T extends FrItemFindManyArgs>(args?: SelectSubset<T, FrItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FrItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FrItem.
     * @param {FrItemCreateArgs} args - Arguments to create a FrItem.
     * @example
     * // Create one FrItem
     * const FrItem = await prisma.frItem.create({
     *   data: {
     *     // ... data to create a FrItem
     *   }
     * })
     * 
     */
    create<T extends FrItemCreateArgs>(args: SelectSubset<T, FrItemCreateArgs<ExtArgs>>): Prisma__FrItemClient<$Result.GetResult<Prisma.$FrItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FrItems.
     * @param {FrItemCreateManyArgs} args - Arguments to create many FrItems.
     * @example
     * // Create many FrItems
     * const frItem = await prisma.frItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FrItemCreateManyArgs>(args?: SelectSubset<T, FrItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FrItems and returns the data saved in the database.
     * @param {FrItemCreateManyAndReturnArgs} args - Arguments to create many FrItems.
     * @example
     * // Create many FrItems
     * const frItem = await prisma.frItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FrItems and only return the `questionId`
     * const frItemWithQuestionIdOnly = await prisma.frItem.createManyAndReturn({
     *   select: { questionId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FrItemCreateManyAndReturnArgs>(args?: SelectSubset<T, FrItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FrItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FrItem.
     * @param {FrItemDeleteArgs} args - Arguments to delete one FrItem.
     * @example
     * // Delete one FrItem
     * const FrItem = await prisma.frItem.delete({
     *   where: {
     *     // ... filter to delete one FrItem
     *   }
     * })
     * 
     */
    delete<T extends FrItemDeleteArgs>(args: SelectSubset<T, FrItemDeleteArgs<ExtArgs>>): Prisma__FrItemClient<$Result.GetResult<Prisma.$FrItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FrItem.
     * @param {FrItemUpdateArgs} args - Arguments to update one FrItem.
     * @example
     * // Update one FrItem
     * const frItem = await prisma.frItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FrItemUpdateArgs>(args: SelectSubset<T, FrItemUpdateArgs<ExtArgs>>): Prisma__FrItemClient<$Result.GetResult<Prisma.$FrItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FrItems.
     * @param {FrItemDeleteManyArgs} args - Arguments to filter FrItems to delete.
     * @example
     * // Delete a few FrItems
     * const { count } = await prisma.frItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FrItemDeleteManyArgs>(args?: SelectSubset<T, FrItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FrItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FrItems
     * const frItem = await prisma.frItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FrItemUpdateManyArgs>(args: SelectSubset<T, FrItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FrItems and returns the data updated in the database.
     * @param {FrItemUpdateManyAndReturnArgs} args - Arguments to update many FrItems.
     * @example
     * // Update many FrItems
     * const frItem = await prisma.frItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FrItems and only return the `questionId`
     * const frItemWithQuestionIdOnly = await prisma.frItem.updateManyAndReturn({
     *   select: { questionId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FrItemUpdateManyAndReturnArgs>(args: SelectSubset<T, FrItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FrItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FrItem.
     * @param {FrItemUpsertArgs} args - Arguments to update or create a FrItem.
     * @example
     * // Update or create a FrItem
     * const frItem = await prisma.frItem.upsert({
     *   create: {
     *     // ... data to create a FrItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FrItem we want to update
     *   }
     * })
     */
    upsert<T extends FrItemUpsertArgs>(args: SelectSubset<T, FrItemUpsertArgs<ExtArgs>>): Prisma__FrItemClient<$Result.GetResult<Prisma.$FrItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FrItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrItemCountArgs} args - Arguments to filter FrItems to count.
     * @example
     * // Count the number of FrItems
     * const count = await prisma.frItem.count({
     *   where: {
     *     // ... the filter for the FrItems we want to count
     *   }
     * })
    **/
    count<T extends FrItemCountArgs>(
      args?: Subset<T, FrItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FrItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FrItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FrItemAggregateArgs>(args: Subset<T, FrItemAggregateArgs>): Prisma.PrismaPromise<GetFrItemAggregateType<T>>

    /**
     * Group by FrItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FrItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FrItemGroupByArgs['orderBy'] }
        : { orderBy?: FrItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FrItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFrItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FrItem model
   */
  readonly fields: FrItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FrItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FrItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    question<T extends QuestionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuestionDefaultArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    rubrics<T extends FrItem$rubricsArgs<ExtArgs> = {}>(args?: Subset<T, FrItem$rubricsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FrRubricPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    expectedAnswers<T extends FrItem$expectedAnswersArgs<ExtArgs> = {}>(args?: Subset<T, FrItem$expectedAnswersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FrAnswerExpectedPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FrItem model
   */
  interface FrItemFieldRefs {
    readonly questionId: FieldRef<"FrItem", 'Int'>
    readonly answerGuidanceHtml: FieldRef<"FrItem", 'String'>
    readonly maxScore: FieldRef<"FrItem", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * FrItem findUnique
   */
  export type FrItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrItem
     */
    select?: FrItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrItem
     */
    omit?: FrItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrItemInclude<ExtArgs> | null
    /**
     * Filter, which FrItem to fetch.
     */
    where: FrItemWhereUniqueInput
  }

  /**
   * FrItem findUniqueOrThrow
   */
  export type FrItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrItem
     */
    select?: FrItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrItem
     */
    omit?: FrItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrItemInclude<ExtArgs> | null
    /**
     * Filter, which FrItem to fetch.
     */
    where: FrItemWhereUniqueInput
  }

  /**
   * FrItem findFirst
   */
  export type FrItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrItem
     */
    select?: FrItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrItem
     */
    omit?: FrItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrItemInclude<ExtArgs> | null
    /**
     * Filter, which FrItem to fetch.
     */
    where?: FrItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FrItems to fetch.
     */
    orderBy?: FrItemOrderByWithRelationInput | FrItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FrItems.
     */
    cursor?: FrItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FrItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FrItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FrItems.
     */
    distinct?: FrItemScalarFieldEnum | FrItemScalarFieldEnum[]
  }

  /**
   * FrItem findFirstOrThrow
   */
  export type FrItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrItem
     */
    select?: FrItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrItem
     */
    omit?: FrItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrItemInclude<ExtArgs> | null
    /**
     * Filter, which FrItem to fetch.
     */
    where?: FrItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FrItems to fetch.
     */
    orderBy?: FrItemOrderByWithRelationInput | FrItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FrItems.
     */
    cursor?: FrItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FrItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FrItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FrItems.
     */
    distinct?: FrItemScalarFieldEnum | FrItemScalarFieldEnum[]
  }

  /**
   * FrItem findMany
   */
  export type FrItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrItem
     */
    select?: FrItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrItem
     */
    omit?: FrItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrItemInclude<ExtArgs> | null
    /**
     * Filter, which FrItems to fetch.
     */
    where?: FrItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FrItems to fetch.
     */
    orderBy?: FrItemOrderByWithRelationInput | FrItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FrItems.
     */
    cursor?: FrItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FrItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FrItems.
     */
    skip?: number
    distinct?: FrItemScalarFieldEnum | FrItemScalarFieldEnum[]
  }

  /**
   * FrItem create
   */
  export type FrItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrItem
     */
    select?: FrItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrItem
     */
    omit?: FrItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrItemInclude<ExtArgs> | null
    /**
     * The data needed to create a FrItem.
     */
    data: XOR<FrItemCreateInput, FrItemUncheckedCreateInput>
  }

  /**
   * FrItem createMany
   */
  export type FrItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FrItems.
     */
    data: FrItemCreateManyInput | FrItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FrItem createManyAndReturn
   */
  export type FrItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrItem
     */
    select?: FrItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FrItem
     */
    omit?: FrItemOmit<ExtArgs> | null
    /**
     * The data used to create many FrItems.
     */
    data: FrItemCreateManyInput | FrItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FrItem update
   */
  export type FrItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrItem
     */
    select?: FrItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrItem
     */
    omit?: FrItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrItemInclude<ExtArgs> | null
    /**
     * The data needed to update a FrItem.
     */
    data: XOR<FrItemUpdateInput, FrItemUncheckedUpdateInput>
    /**
     * Choose, which FrItem to update.
     */
    where: FrItemWhereUniqueInput
  }

  /**
   * FrItem updateMany
   */
  export type FrItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FrItems.
     */
    data: XOR<FrItemUpdateManyMutationInput, FrItemUncheckedUpdateManyInput>
    /**
     * Filter which FrItems to update
     */
    where?: FrItemWhereInput
    /**
     * Limit how many FrItems to update.
     */
    limit?: number
  }

  /**
   * FrItem updateManyAndReturn
   */
  export type FrItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrItem
     */
    select?: FrItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FrItem
     */
    omit?: FrItemOmit<ExtArgs> | null
    /**
     * The data used to update FrItems.
     */
    data: XOR<FrItemUpdateManyMutationInput, FrItemUncheckedUpdateManyInput>
    /**
     * Filter which FrItems to update
     */
    where?: FrItemWhereInput
    /**
     * Limit how many FrItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FrItem upsert
   */
  export type FrItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrItem
     */
    select?: FrItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrItem
     */
    omit?: FrItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrItemInclude<ExtArgs> | null
    /**
     * The filter to search for the FrItem to update in case it exists.
     */
    where: FrItemWhereUniqueInput
    /**
     * In case the FrItem found by the `where` argument doesn't exist, create a new FrItem with this data.
     */
    create: XOR<FrItemCreateInput, FrItemUncheckedCreateInput>
    /**
     * In case the FrItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FrItemUpdateInput, FrItemUncheckedUpdateInput>
  }

  /**
   * FrItem delete
   */
  export type FrItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrItem
     */
    select?: FrItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrItem
     */
    omit?: FrItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrItemInclude<ExtArgs> | null
    /**
     * Filter which FrItem to delete.
     */
    where: FrItemWhereUniqueInput
  }

  /**
   * FrItem deleteMany
   */
  export type FrItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FrItems to delete
     */
    where?: FrItemWhereInput
    /**
     * Limit how many FrItems to delete.
     */
    limit?: number
  }

  /**
   * FrItem.rubrics
   */
  export type FrItem$rubricsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrRubric
     */
    select?: FrRubricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrRubric
     */
    omit?: FrRubricOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrRubricInclude<ExtArgs> | null
    where?: FrRubricWhereInput
    orderBy?: FrRubricOrderByWithRelationInput | FrRubricOrderByWithRelationInput[]
    cursor?: FrRubricWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FrRubricScalarFieldEnum | FrRubricScalarFieldEnum[]
  }

  /**
   * FrItem.expectedAnswers
   */
  export type FrItem$expectedAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrAnswerExpected
     */
    select?: FrAnswerExpectedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrAnswerExpected
     */
    omit?: FrAnswerExpectedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrAnswerExpectedInclude<ExtArgs> | null
    where?: FrAnswerExpectedWhereInput
    orderBy?: FrAnswerExpectedOrderByWithRelationInput | FrAnswerExpectedOrderByWithRelationInput[]
    cursor?: FrAnswerExpectedWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FrAnswerExpectedScalarFieldEnum | FrAnswerExpectedScalarFieldEnum[]
  }

  /**
   * FrItem without action
   */
  export type FrItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrItem
     */
    select?: FrItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrItem
     */
    omit?: FrItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrItemInclude<ExtArgs> | null
  }


  /**
   * Model FrAnswerExpected
   */

  export type AggregateFrAnswerExpected = {
    _count: FrAnswerExpectedCountAggregateOutputType | null
    _avg: FrAnswerExpectedAvgAggregateOutputType | null
    _sum: FrAnswerExpectedSumAggregateOutputType | null
    _min: FrAnswerExpectedMinAggregateOutputType | null
    _max: FrAnswerExpectedMaxAggregateOutputType | null
  }

  export type FrAnswerExpectedAvgAggregateOutputType = {
    id: number | null
    frItemId: number | null
    maxScore: Decimal | null
  }

  export type FrAnswerExpectedSumAggregateOutputType = {
    id: number | null
    frItemId: number | null
    maxScore: Decimal | null
  }

  export type FrAnswerExpectedMinAggregateOutputType = {
    id: number | null
    frItemId: number | null
    label: string | null
    answerHtml: string | null
    maxScore: Decimal | null
  }

  export type FrAnswerExpectedMaxAggregateOutputType = {
    id: number | null
    frItemId: number | null
    label: string | null
    answerHtml: string | null
    maxScore: Decimal | null
  }

  export type FrAnswerExpectedCountAggregateOutputType = {
    id: number
    frItemId: number
    label: number
    answerHtml: number
    maxScore: number
    _all: number
  }


  export type FrAnswerExpectedAvgAggregateInputType = {
    id?: true
    frItemId?: true
    maxScore?: true
  }

  export type FrAnswerExpectedSumAggregateInputType = {
    id?: true
    frItemId?: true
    maxScore?: true
  }

  export type FrAnswerExpectedMinAggregateInputType = {
    id?: true
    frItemId?: true
    label?: true
    answerHtml?: true
    maxScore?: true
  }

  export type FrAnswerExpectedMaxAggregateInputType = {
    id?: true
    frItemId?: true
    label?: true
    answerHtml?: true
    maxScore?: true
  }

  export type FrAnswerExpectedCountAggregateInputType = {
    id?: true
    frItemId?: true
    label?: true
    answerHtml?: true
    maxScore?: true
    _all?: true
  }

  export type FrAnswerExpectedAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FrAnswerExpected to aggregate.
     */
    where?: FrAnswerExpectedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FrAnswerExpecteds to fetch.
     */
    orderBy?: FrAnswerExpectedOrderByWithRelationInput | FrAnswerExpectedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FrAnswerExpectedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FrAnswerExpecteds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FrAnswerExpecteds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FrAnswerExpecteds
    **/
    _count?: true | FrAnswerExpectedCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FrAnswerExpectedAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FrAnswerExpectedSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FrAnswerExpectedMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FrAnswerExpectedMaxAggregateInputType
  }

  export type GetFrAnswerExpectedAggregateType<T extends FrAnswerExpectedAggregateArgs> = {
        [P in keyof T & keyof AggregateFrAnswerExpected]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFrAnswerExpected[P]>
      : GetScalarType<T[P], AggregateFrAnswerExpected[P]>
  }




  export type FrAnswerExpectedGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FrAnswerExpectedWhereInput
    orderBy?: FrAnswerExpectedOrderByWithAggregationInput | FrAnswerExpectedOrderByWithAggregationInput[]
    by: FrAnswerExpectedScalarFieldEnum[] | FrAnswerExpectedScalarFieldEnum
    having?: FrAnswerExpectedScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FrAnswerExpectedCountAggregateInputType | true
    _avg?: FrAnswerExpectedAvgAggregateInputType
    _sum?: FrAnswerExpectedSumAggregateInputType
    _min?: FrAnswerExpectedMinAggregateInputType
    _max?: FrAnswerExpectedMaxAggregateInputType
  }

  export type FrAnswerExpectedGroupByOutputType = {
    id: number
    frItemId: number
    label: string | null
    answerHtml: string | null
    maxScore: Decimal | null
    _count: FrAnswerExpectedCountAggregateOutputType | null
    _avg: FrAnswerExpectedAvgAggregateOutputType | null
    _sum: FrAnswerExpectedSumAggregateOutputType | null
    _min: FrAnswerExpectedMinAggregateOutputType | null
    _max: FrAnswerExpectedMaxAggregateOutputType | null
  }

  type GetFrAnswerExpectedGroupByPayload<T extends FrAnswerExpectedGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FrAnswerExpectedGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FrAnswerExpectedGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FrAnswerExpectedGroupByOutputType[P]>
            : GetScalarType<T[P], FrAnswerExpectedGroupByOutputType[P]>
        }
      >
    >


  export type FrAnswerExpectedSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    frItemId?: boolean
    label?: boolean
    answerHtml?: boolean
    maxScore?: boolean
    frItem?: boolean | FrItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["frAnswerExpected"]>

  export type FrAnswerExpectedSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    frItemId?: boolean
    label?: boolean
    answerHtml?: boolean
    maxScore?: boolean
    frItem?: boolean | FrItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["frAnswerExpected"]>

  export type FrAnswerExpectedSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    frItemId?: boolean
    label?: boolean
    answerHtml?: boolean
    maxScore?: boolean
    frItem?: boolean | FrItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["frAnswerExpected"]>

  export type FrAnswerExpectedSelectScalar = {
    id?: boolean
    frItemId?: boolean
    label?: boolean
    answerHtml?: boolean
    maxScore?: boolean
  }

  export type FrAnswerExpectedOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "frItemId" | "label" | "answerHtml" | "maxScore", ExtArgs["result"]["frAnswerExpected"]>
  export type FrAnswerExpectedInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    frItem?: boolean | FrItemDefaultArgs<ExtArgs>
  }
  export type FrAnswerExpectedIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    frItem?: boolean | FrItemDefaultArgs<ExtArgs>
  }
  export type FrAnswerExpectedIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    frItem?: boolean | FrItemDefaultArgs<ExtArgs>
  }

  export type $FrAnswerExpectedPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FrAnswerExpected"
    objects: {
      frItem: Prisma.$FrItemPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      frItemId: number
      label: string | null
      answerHtml: string | null
      maxScore: Prisma.Decimal | null
    }, ExtArgs["result"]["frAnswerExpected"]>
    composites: {}
  }

  type FrAnswerExpectedGetPayload<S extends boolean | null | undefined | FrAnswerExpectedDefaultArgs> = $Result.GetResult<Prisma.$FrAnswerExpectedPayload, S>

  type FrAnswerExpectedCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FrAnswerExpectedFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FrAnswerExpectedCountAggregateInputType | true
    }

  export interface FrAnswerExpectedDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FrAnswerExpected'], meta: { name: 'FrAnswerExpected' } }
    /**
     * Find zero or one FrAnswerExpected that matches the filter.
     * @param {FrAnswerExpectedFindUniqueArgs} args - Arguments to find a FrAnswerExpected
     * @example
     * // Get one FrAnswerExpected
     * const frAnswerExpected = await prisma.frAnswerExpected.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FrAnswerExpectedFindUniqueArgs>(args: SelectSubset<T, FrAnswerExpectedFindUniqueArgs<ExtArgs>>): Prisma__FrAnswerExpectedClient<$Result.GetResult<Prisma.$FrAnswerExpectedPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FrAnswerExpected that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FrAnswerExpectedFindUniqueOrThrowArgs} args - Arguments to find a FrAnswerExpected
     * @example
     * // Get one FrAnswerExpected
     * const frAnswerExpected = await prisma.frAnswerExpected.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FrAnswerExpectedFindUniqueOrThrowArgs>(args: SelectSubset<T, FrAnswerExpectedFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FrAnswerExpectedClient<$Result.GetResult<Prisma.$FrAnswerExpectedPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FrAnswerExpected that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrAnswerExpectedFindFirstArgs} args - Arguments to find a FrAnswerExpected
     * @example
     * // Get one FrAnswerExpected
     * const frAnswerExpected = await prisma.frAnswerExpected.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FrAnswerExpectedFindFirstArgs>(args?: SelectSubset<T, FrAnswerExpectedFindFirstArgs<ExtArgs>>): Prisma__FrAnswerExpectedClient<$Result.GetResult<Prisma.$FrAnswerExpectedPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FrAnswerExpected that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrAnswerExpectedFindFirstOrThrowArgs} args - Arguments to find a FrAnswerExpected
     * @example
     * // Get one FrAnswerExpected
     * const frAnswerExpected = await prisma.frAnswerExpected.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FrAnswerExpectedFindFirstOrThrowArgs>(args?: SelectSubset<T, FrAnswerExpectedFindFirstOrThrowArgs<ExtArgs>>): Prisma__FrAnswerExpectedClient<$Result.GetResult<Prisma.$FrAnswerExpectedPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FrAnswerExpecteds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrAnswerExpectedFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FrAnswerExpecteds
     * const frAnswerExpecteds = await prisma.frAnswerExpected.findMany()
     * 
     * // Get first 10 FrAnswerExpecteds
     * const frAnswerExpecteds = await prisma.frAnswerExpected.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const frAnswerExpectedWithIdOnly = await prisma.frAnswerExpected.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FrAnswerExpectedFindManyArgs>(args?: SelectSubset<T, FrAnswerExpectedFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FrAnswerExpectedPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FrAnswerExpected.
     * @param {FrAnswerExpectedCreateArgs} args - Arguments to create a FrAnswerExpected.
     * @example
     * // Create one FrAnswerExpected
     * const FrAnswerExpected = await prisma.frAnswerExpected.create({
     *   data: {
     *     // ... data to create a FrAnswerExpected
     *   }
     * })
     * 
     */
    create<T extends FrAnswerExpectedCreateArgs>(args: SelectSubset<T, FrAnswerExpectedCreateArgs<ExtArgs>>): Prisma__FrAnswerExpectedClient<$Result.GetResult<Prisma.$FrAnswerExpectedPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FrAnswerExpecteds.
     * @param {FrAnswerExpectedCreateManyArgs} args - Arguments to create many FrAnswerExpecteds.
     * @example
     * // Create many FrAnswerExpecteds
     * const frAnswerExpected = await prisma.frAnswerExpected.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FrAnswerExpectedCreateManyArgs>(args?: SelectSubset<T, FrAnswerExpectedCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FrAnswerExpecteds and returns the data saved in the database.
     * @param {FrAnswerExpectedCreateManyAndReturnArgs} args - Arguments to create many FrAnswerExpecteds.
     * @example
     * // Create many FrAnswerExpecteds
     * const frAnswerExpected = await prisma.frAnswerExpected.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FrAnswerExpecteds and only return the `id`
     * const frAnswerExpectedWithIdOnly = await prisma.frAnswerExpected.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FrAnswerExpectedCreateManyAndReturnArgs>(args?: SelectSubset<T, FrAnswerExpectedCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FrAnswerExpectedPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FrAnswerExpected.
     * @param {FrAnswerExpectedDeleteArgs} args - Arguments to delete one FrAnswerExpected.
     * @example
     * // Delete one FrAnswerExpected
     * const FrAnswerExpected = await prisma.frAnswerExpected.delete({
     *   where: {
     *     // ... filter to delete one FrAnswerExpected
     *   }
     * })
     * 
     */
    delete<T extends FrAnswerExpectedDeleteArgs>(args: SelectSubset<T, FrAnswerExpectedDeleteArgs<ExtArgs>>): Prisma__FrAnswerExpectedClient<$Result.GetResult<Prisma.$FrAnswerExpectedPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FrAnswerExpected.
     * @param {FrAnswerExpectedUpdateArgs} args - Arguments to update one FrAnswerExpected.
     * @example
     * // Update one FrAnswerExpected
     * const frAnswerExpected = await prisma.frAnswerExpected.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FrAnswerExpectedUpdateArgs>(args: SelectSubset<T, FrAnswerExpectedUpdateArgs<ExtArgs>>): Prisma__FrAnswerExpectedClient<$Result.GetResult<Prisma.$FrAnswerExpectedPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FrAnswerExpecteds.
     * @param {FrAnswerExpectedDeleteManyArgs} args - Arguments to filter FrAnswerExpecteds to delete.
     * @example
     * // Delete a few FrAnswerExpecteds
     * const { count } = await prisma.frAnswerExpected.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FrAnswerExpectedDeleteManyArgs>(args?: SelectSubset<T, FrAnswerExpectedDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FrAnswerExpecteds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrAnswerExpectedUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FrAnswerExpecteds
     * const frAnswerExpected = await prisma.frAnswerExpected.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FrAnswerExpectedUpdateManyArgs>(args: SelectSubset<T, FrAnswerExpectedUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FrAnswerExpecteds and returns the data updated in the database.
     * @param {FrAnswerExpectedUpdateManyAndReturnArgs} args - Arguments to update many FrAnswerExpecteds.
     * @example
     * // Update many FrAnswerExpecteds
     * const frAnswerExpected = await prisma.frAnswerExpected.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FrAnswerExpecteds and only return the `id`
     * const frAnswerExpectedWithIdOnly = await prisma.frAnswerExpected.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FrAnswerExpectedUpdateManyAndReturnArgs>(args: SelectSubset<T, FrAnswerExpectedUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FrAnswerExpectedPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FrAnswerExpected.
     * @param {FrAnswerExpectedUpsertArgs} args - Arguments to update or create a FrAnswerExpected.
     * @example
     * // Update or create a FrAnswerExpected
     * const frAnswerExpected = await prisma.frAnswerExpected.upsert({
     *   create: {
     *     // ... data to create a FrAnswerExpected
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FrAnswerExpected we want to update
     *   }
     * })
     */
    upsert<T extends FrAnswerExpectedUpsertArgs>(args: SelectSubset<T, FrAnswerExpectedUpsertArgs<ExtArgs>>): Prisma__FrAnswerExpectedClient<$Result.GetResult<Prisma.$FrAnswerExpectedPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FrAnswerExpecteds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrAnswerExpectedCountArgs} args - Arguments to filter FrAnswerExpecteds to count.
     * @example
     * // Count the number of FrAnswerExpecteds
     * const count = await prisma.frAnswerExpected.count({
     *   where: {
     *     // ... the filter for the FrAnswerExpecteds we want to count
     *   }
     * })
    **/
    count<T extends FrAnswerExpectedCountArgs>(
      args?: Subset<T, FrAnswerExpectedCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FrAnswerExpectedCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FrAnswerExpected.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrAnswerExpectedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FrAnswerExpectedAggregateArgs>(args: Subset<T, FrAnswerExpectedAggregateArgs>): Prisma.PrismaPromise<GetFrAnswerExpectedAggregateType<T>>

    /**
     * Group by FrAnswerExpected.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrAnswerExpectedGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FrAnswerExpectedGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FrAnswerExpectedGroupByArgs['orderBy'] }
        : { orderBy?: FrAnswerExpectedGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FrAnswerExpectedGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFrAnswerExpectedGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FrAnswerExpected model
   */
  readonly fields: FrAnswerExpectedFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FrAnswerExpected.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FrAnswerExpectedClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    frItem<T extends FrItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FrItemDefaultArgs<ExtArgs>>): Prisma__FrItemClient<$Result.GetResult<Prisma.$FrItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FrAnswerExpected model
   */
  interface FrAnswerExpectedFieldRefs {
    readonly id: FieldRef<"FrAnswerExpected", 'Int'>
    readonly frItemId: FieldRef<"FrAnswerExpected", 'Int'>
    readonly label: FieldRef<"FrAnswerExpected", 'String'>
    readonly answerHtml: FieldRef<"FrAnswerExpected", 'String'>
    readonly maxScore: FieldRef<"FrAnswerExpected", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * FrAnswerExpected findUnique
   */
  export type FrAnswerExpectedFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrAnswerExpected
     */
    select?: FrAnswerExpectedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrAnswerExpected
     */
    omit?: FrAnswerExpectedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrAnswerExpectedInclude<ExtArgs> | null
    /**
     * Filter, which FrAnswerExpected to fetch.
     */
    where: FrAnswerExpectedWhereUniqueInput
  }

  /**
   * FrAnswerExpected findUniqueOrThrow
   */
  export type FrAnswerExpectedFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrAnswerExpected
     */
    select?: FrAnswerExpectedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrAnswerExpected
     */
    omit?: FrAnswerExpectedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrAnswerExpectedInclude<ExtArgs> | null
    /**
     * Filter, which FrAnswerExpected to fetch.
     */
    where: FrAnswerExpectedWhereUniqueInput
  }

  /**
   * FrAnswerExpected findFirst
   */
  export type FrAnswerExpectedFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrAnswerExpected
     */
    select?: FrAnswerExpectedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrAnswerExpected
     */
    omit?: FrAnswerExpectedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrAnswerExpectedInclude<ExtArgs> | null
    /**
     * Filter, which FrAnswerExpected to fetch.
     */
    where?: FrAnswerExpectedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FrAnswerExpecteds to fetch.
     */
    orderBy?: FrAnswerExpectedOrderByWithRelationInput | FrAnswerExpectedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FrAnswerExpecteds.
     */
    cursor?: FrAnswerExpectedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FrAnswerExpecteds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FrAnswerExpecteds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FrAnswerExpecteds.
     */
    distinct?: FrAnswerExpectedScalarFieldEnum | FrAnswerExpectedScalarFieldEnum[]
  }

  /**
   * FrAnswerExpected findFirstOrThrow
   */
  export type FrAnswerExpectedFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrAnswerExpected
     */
    select?: FrAnswerExpectedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrAnswerExpected
     */
    omit?: FrAnswerExpectedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrAnswerExpectedInclude<ExtArgs> | null
    /**
     * Filter, which FrAnswerExpected to fetch.
     */
    where?: FrAnswerExpectedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FrAnswerExpecteds to fetch.
     */
    orderBy?: FrAnswerExpectedOrderByWithRelationInput | FrAnswerExpectedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FrAnswerExpecteds.
     */
    cursor?: FrAnswerExpectedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FrAnswerExpecteds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FrAnswerExpecteds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FrAnswerExpecteds.
     */
    distinct?: FrAnswerExpectedScalarFieldEnum | FrAnswerExpectedScalarFieldEnum[]
  }

  /**
   * FrAnswerExpected findMany
   */
  export type FrAnswerExpectedFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrAnswerExpected
     */
    select?: FrAnswerExpectedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrAnswerExpected
     */
    omit?: FrAnswerExpectedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrAnswerExpectedInclude<ExtArgs> | null
    /**
     * Filter, which FrAnswerExpecteds to fetch.
     */
    where?: FrAnswerExpectedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FrAnswerExpecteds to fetch.
     */
    orderBy?: FrAnswerExpectedOrderByWithRelationInput | FrAnswerExpectedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FrAnswerExpecteds.
     */
    cursor?: FrAnswerExpectedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FrAnswerExpecteds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FrAnswerExpecteds.
     */
    skip?: number
    distinct?: FrAnswerExpectedScalarFieldEnum | FrAnswerExpectedScalarFieldEnum[]
  }

  /**
   * FrAnswerExpected create
   */
  export type FrAnswerExpectedCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrAnswerExpected
     */
    select?: FrAnswerExpectedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrAnswerExpected
     */
    omit?: FrAnswerExpectedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrAnswerExpectedInclude<ExtArgs> | null
    /**
     * The data needed to create a FrAnswerExpected.
     */
    data: XOR<FrAnswerExpectedCreateInput, FrAnswerExpectedUncheckedCreateInput>
  }

  /**
   * FrAnswerExpected createMany
   */
  export type FrAnswerExpectedCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FrAnswerExpecteds.
     */
    data: FrAnswerExpectedCreateManyInput | FrAnswerExpectedCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FrAnswerExpected createManyAndReturn
   */
  export type FrAnswerExpectedCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrAnswerExpected
     */
    select?: FrAnswerExpectedSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FrAnswerExpected
     */
    omit?: FrAnswerExpectedOmit<ExtArgs> | null
    /**
     * The data used to create many FrAnswerExpecteds.
     */
    data: FrAnswerExpectedCreateManyInput | FrAnswerExpectedCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrAnswerExpectedIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FrAnswerExpected update
   */
  export type FrAnswerExpectedUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrAnswerExpected
     */
    select?: FrAnswerExpectedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrAnswerExpected
     */
    omit?: FrAnswerExpectedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrAnswerExpectedInclude<ExtArgs> | null
    /**
     * The data needed to update a FrAnswerExpected.
     */
    data: XOR<FrAnswerExpectedUpdateInput, FrAnswerExpectedUncheckedUpdateInput>
    /**
     * Choose, which FrAnswerExpected to update.
     */
    where: FrAnswerExpectedWhereUniqueInput
  }

  /**
   * FrAnswerExpected updateMany
   */
  export type FrAnswerExpectedUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FrAnswerExpecteds.
     */
    data: XOR<FrAnswerExpectedUpdateManyMutationInput, FrAnswerExpectedUncheckedUpdateManyInput>
    /**
     * Filter which FrAnswerExpecteds to update
     */
    where?: FrAnswerExpectedWhereInput
    /**
     * Limit how many FrAnswerExpecteds to update.
     */
    limit?: number
  }

  /**
   * FrAnswerExpected updateManyAndReturn
   */
  export type FrAnswerExpectedUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrAnswerExpected
     */
    select?: FrAnswerExpectedSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FrAnswerExpected
     */
    omit?: FrAnswerExpectedOmit<ExtArgs> | null
    /**
     * The data used to update FrAnswerExpecteds.
     */
    data: XOR<FrAnswerExpectedUpdateManyMutationInput, FrAnswerExpectedUncheckedUpdateManyInput>
    /**
     * Filter which FrAnswerExpecteds to update
     */
    where?: FrAnswerExpectedWhereInput
    /**
     * Limit how many FrAnswerExpecteds to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrAnswerExpectedIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FrAnswerExpected upsert
   */
  export type FrAnswerExpectedUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrAnswerExpected
     */
    select?: FrAnswerExpectedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrAnswerExpected
     */
    omit?: FrAnswerExpectedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrAnswerExpectedInclude<ExtArgs> | null
    /**
     * The filter to search for the FrAnswerExpected to update in case it exists.
     */
    where: FrAnswerExpectedWhereUniqueInput
    /**
     * In case the FrAnswerExpected found by the `where` argument doesn't exist, create a new FrAnswerExpected with this data.
     */
    create: XOR<FrAnswerExpectedCreateInput, FrAnswerExpectedUncheckedCreateInput>
    /**
     * In case the FrAnswerExpected was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FrAnswerExpectedUpdateInput, FrAnswerExpectedUncheckedUpdateInput>
  }

  /**
   * FrAnswerExpected delete
   */
  export type FrAnswerExpectedDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrAnswerExpected
     */
    select?: FrAnswerExpectedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrAnswerExpected
     */
    omit?: FrAnswerExpectedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrAnswerExpectedInclude<ExtArgs> | null
    /**
     * Filter which FrAnswerExpected to delete.
     */
    where: FrAnswerExpectedWhereUniqueInput
  }

  /**
   * FrAnswerExpected deleteMany
   */
  export type FrAnswerExpectedDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FrAnswerExpecteds to delete
     */
    where?: FrAnswerExpectedWhereInput
    /**
     * Limit how many FrAnswerExpecteds to delete.
     */
    limit?: number
  }

  /**
   * FrAnswerExpected without action
   */
  export type FrAnswerExpectedDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrAnswerExpected
     */
    select?: FrAnswerExpectedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrAnswerExpected
     */
    omit?: FrAnswerExpectedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrAnswerExpectedInclude<ExtArgs> | null
  }


  /**
   * Model FrRubric
   */

  export type AggregateFrRubric = {
    _count: FrRubricCountAggregateOutputType | null
    _avg: FrRubricAvgAggregateOutputType | null
    _sum: FrRubricSumAggregateOutputType | null
    _min: FrRubricMinAggregateOutputType | null
    _max: FrRubricMaxAggregateOutputType | null
  }

  export type FrRubricAvgAggregateOutputType = {
    id: number | null
    questionId: number | null
  }

  export type FrRubricSumAggregateOutputType = {
    id: number | null
    questionId: number | null
  }

  export type FrRubricMinAggregateOutputType = {
    id: number | null
    questionId: number | null
    criterion: string | null
  }

  export type FrRubricMaxAggregateOutputType = {
    id: number | null
    questionId: number | null
    criterion: string | null
  }

  export type FrRubricCountAggregateOutputType = {
    id: number
    questionId: number
    criterion: number
    levelsJson: number
    _all: number
  }


  export type FrRubricAvgAggregateInputType = {
    id?: true
    questionId?: true
  }

  export type FrRubricSumAggregateInputType = {
    id?: true
    questionId?: true
  }

  export type FrRubricMinAggregateInputType = {
    id?: true
    questionId?: true
    criterion?: true
  }

  export type FrRubricMaxAggregateInputType = {
    id?: true
    questionId?: true
    criterion?: true
  }

  export type FrRubricCountAggregateInputType = {
    id?: true
    questionId?: true
    criterion?: true
    levelsJson?: true
    _all?: true
  }

  export type FrRubricAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FrRubric to aggregate.
     */
    where?: FrRubricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FrRubrics to fetch.
     */
    orderBy?: FrRubricOrderByWithRelationInput | FrRubricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FrRubricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FrRubrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FrRubrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FrRubrics
    **/
    _count?: true | FrRubricCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FrRubricAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FrRubricSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FrRubricMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FrRubricMaxAggregateInputType
  }

  export type GetFrRubricAggregateType<T extends FrRubricAggregateArgs> = {
        [P in keyof T & keyof AggregateFrRubric]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFrRubric[P]>
      : GetScalarType<T[P], AggregateFrRubric[P]>
  }




  export type FrRubricGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FrRubricWhereInput
    orderBy?: FrRubricOrderByWithAggregationInput | FrRubricOrderByWithAggregationInput[]
    by: FrRubricScalarFieldEnum[] | FrRubricScalarFieldEnum
    having?: FrRubricScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FrRubricCountAggregateInputType | true
    _avg?: FrRubricAvgAggregateInputType
    _sum?: FrRubricSumAggregateInputType
    _min?: FrRubricMinAggregateInputType
    _max?: FrRubricMaxAggregateInputType
  }

  export type FrRubricGroupByOutputType = {
    id: number
    questionId: number
    criterion: string
    levelsJson: JsonValue
    _count: FrRubricCountAggregateOutputType | null
    _avg: FrRubricAvgAggregateOutputType | null
    _sum: FrRubricSumAggregateOutputType | null
    _min: FrRubricMinAggregateOutputType | null
    _max: FrRubricMaxAggregateOutputType | null
  }

  type GetFrRubricGroupByPayload<T extends FrRubricGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FrRubricGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FrRubricGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FrRubricGroupByOutputType[P]>
            : GetScalarType<T[P], FrRubricGroupByOutputType[P]>
        }
      >
    >


  export type FrRubricSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    questionId?: boolean
    criterion?: boolean
    levelsJson?: boolean
    fr?: boolean | FrItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["frRubric"]>

  export type FrRubricSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    questionId?: boolean
    criterion?: boolean
    levelsJson?: boolean
    fr?: boolean | FrItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["frRubric"]>

  export type FrRubricSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    questionId?: boolean
    criterion?: boolean
    levelsJson?: boolean
    fr?: boolean | FrItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["frRubric"]>

  export type FrRubricSelectScalar = {
    id?: boolean
    questionId?: boolean
    criterion?: boolean
    levelsJson?: boolean
  }

  export type FrRubricOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "questionId" | "criterion" | "levelsJson", ExtArgs["result"]["frRubric"]>
  export type FrRubricInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fr?: boolean | FrItemDefaultArgs<ExtArgs>
  }
  export type FrRubricIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fr?: boolean | FrItemDefaultArgs<ExtArgs>
  }
  export type FrRubricIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fr?: boolean | FrItemDefaultArgs<ExtArgs>
  }

  export type $FrRubricPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FrRubric"
    objects: {
      fr: Prisma.$FrItemPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      questionId: number
      criterion: string
      levelsJson: Prisma.JsonValue
    }, ExtArgs["result"]["frRubric"]>
    composites: {}
  }

  type FrRubricGetPayload<S extends boolean | null | undefined | FrRubricDefaultArgs> = $Result.GetResult<Prisma.$FrRubricPayload, S>

  type FrRubricCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FrRubricFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FrRubricCountAggregateInputType | true
    }

  export interface FrRubricDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FrRubric'], meta: { name: 'FrRubric' } }
    /**
     * Find zero or one FrRubric that matches the filter.
     * @param {FrRubricFindUniqueArgs} args - Arguments to find a FrRubric
     * @example
     * // Get one FrRubric
     * const frRubric = await prisma.frRubric.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FrRubricFindUniqueArgs>(args: SelectSubset<T, FrRubricFindUniqueArgs<ExtArgs>>): Prisma__FrRubricClient<$Result.GetResult<Prisma.$FrRubricPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FrRubric that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FrRubricFindUniqueOrThrowArgs} args - Arguments to find a FrRubric
     * @example
     * // Get one FrRubric
     * const frRubric = await prisma.frRubric.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FrRubricFindUniqueOrThrowArgs>(args: SelectSubset<T, FrRubricFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FrRubricClient<$Result.GetResult<Prisma.$FrRubricPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FrRubric that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrRubricFindFirstArgs} args - Arguments to find a FrRubric
     * @example
     * // Get one FrRubric
     * const frRubric = await prisma.frRubric.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FrRubricFindFirstArgs>(args?: SelectSubset<T, FrRubricFindFirstArgs<ExtArgs>>): Prisma__FrRubricClient<$Result.GetResult<Prisma.$FrRubricPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FrRubric that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrRubricFindFirstOrThrowArgs} args - Arguments to find a FrRubric
     * @example
     * // Get one FrRubric
     * const frRubric = await prisma.frRubric.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FrRubricFindFirstOrThrowArgs>(args?: SelectSubset<T, FrRubricFindFirstOrThrowArgs<ExtArgs>>): Prisma__FrRubricClient<$Result.GetResult<Prisma.$FrRubricPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FrRubrics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrRubricFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FrRubrics
     * const frRubrics = await prisma.frRubric.findMany()
     * 
     * // Get first 10 FrRubrics
     * const frRubrics = await prisma.frRubric.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const frRubricWithIdOnly = await prisma.frRubric.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FrRubricFindManyArgs>(args?: SelectSubset<T, FrRubricFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FrRubricPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FrRubric.
     * @param {FrRubricCreateArgs} args - Arguments to create a FrRubric.
     * @example
     * // Create one FrRubric
     * const FrRubric = await prisma.frRubric.create({
     *   data: {
     *     // ... data to create a FrRubric
     *   }
     * })
     * 
     */
    create<T extends FrRubricCreateArgs>(args: SelectSubset<T, FrRubricCreateArgs<ExtArgs>>): Prisma__FrRubricClient<$Result.GetResult<Prisma.$FrRubricPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FrRubrics.
     * @param {FrRubricCreateManyArgs} args - Arguments to create many FrRubrics.
     * @example
     * // Create many FrRubrics
     * const frRubric = await prisma.frRubric.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FrRubricCreateManyArgs>(args?: SelectSubset<T, FrRubricCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FrRubrics and returns the data saved in the database.
     * @param {FrRubricCreateManyAndReturnArgs} args - Arguments to create many FrRubrics.
     * @example
     * // Create many FrRubrics
     * const frRubric = await prisma.frRubric.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FrRubrics and only return the `id`
     * const frRubricWithIdOnly = await prisma.frRubric.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FrRubricCreateManyAndReturnArgs>(args?: SelectSubset<T, FrRubricCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FrRubricPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FrRubric.
     * @param {FrRubricDeleteArgs} args - Arguments to delete one FrRubric.
     * @example
     * // Delete one FrRubric
     * const FrRubric = await prisma.frRubric.delete({
     *   where: {
     *     // ... filter to delete one FrRubric
     *   }
     * })
     * 
     */
    delete<T extends FrRubricDeleteArgs>(args: SelectSubset<T, FrRubricDeleteArgs<ExtArgs>>): Prisma__FrRubricClient<$Result.GetResult<Prisma.$FrRubricPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FrRubric.
     * @param {FrRubricUpdateArgs} args - Arguments to update one FrRubric.
     * @example
     * // Update one FrRubric
     * const frRubric = await prisma.frRubric.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FrRubricUpdateArgs>(args: SelectSubset<T, FrRubricUpdateArgs<ExtArgs>>): Prisma__FrRubricClient<$Result.GetResult<Prisma.$FrRubricPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FrRubrics.
     * @param {FrRubricDeleteManyArgs} args - Arguments to filter FrRubrics to delete.
     * @example
     * // Delete a few FrRubrics
     * const { count } = await prisma.frRubric.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FrRubricDeleteManyArgs>(args?: SelectSubset<T, FrRubricDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FrRubrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrRubricUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FrRubrics
     * const frRubric = await prisma.frRubric.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FrRubricUpdateManyArgs>(args: SelectSubset<T, FrRubricUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FrRubrics and returns the data updated in the database.
     * @param {FrRubricUpdateManyAndReturnArgs} args - Arguments to update many FrRubrics.
     * @example
     * // Update many FrRubrics
     * const frRubric = await prisma.frRubric.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FrRubrics and only return the `id`
     * const frRubricWithIdOnly = await prisma.frRubric.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FrRubricUpdateManyAndReturnArgs>(args: SelectSubset<T, FrRubricUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FrRubricPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FrRubric.
     * @param {FrRubricUpsertArgs} args - Arguments to update or create a FrRubric.
     * @example
     * // Update or create a FrRubric
     * const frRubric = await prisma.frRubric.upsert({
     *   create: {
     *     // ... data to create a FrRubric
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FrRubric we want to update
     *   }
     * })
     */
    upsert<T extends FrRubricUpsertArgs>(args: SelectSubset<T, FrRubricUpsertArgs<ExtArgs>>): Prisma__FrRubricClient<$Result.GetResult<Prisma.$FrRubricPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FrRubrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrRubricCountArgs} args - Arguments to filter FrRubrics to count.
     * @example
     * // Count the number of FrRubrics
     * const count = await prisma.frRubric.count({
     *   where: {
     *     // ... the filter for the FrRubrics we want to count
     *   }
     * })
    **/
    count<T extends FrRubricCountArgs>(
      args?: Subset<T, FrRubricCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FrRubricCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FrRubric.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrRubricAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FrRubricAggregateArgs>(args: Subset<T, FrRubricAggregateArgs>): Prisma.PrismaPromise<GetFrRubricAggregateType<T>>

    /**
     * Group by FrRubric.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FrRubricGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FrRubricGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FrRubricGroupByArgs['orderBy'] }
        : { orderBy?: FrRubricGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FrRubricGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFrRubricGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FrRubric model
   */
  readonly fields: FrRubricFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FrRubric.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FrRubricClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    fr<T extends FrItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FrItemDefaultArgs<ExtArgs>>): Prisma__FrItemClient<$Result.GetResult<Prisma.$FrItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FrRubric model
   */
  interface FrRubricFieldRefs {
    readonly id: FieldRef<"FrRubric", 'Int'>
    readonly questionId: FieldRef<"FrRubric", 'Int'>
    readonly criterion: FieldRef<"FrRubric", 'String'>
    readonly levelsJson: FieldRef<"FrRubric", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * FrRubric findUnique
   */
  export type FrRubricFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrRubric
     */
    select?: FrRubricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrRubric
     */
    omit?: FrRubricOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrRubricInclude<ExtArgs> | null
    /**
     * Filter, which FrRubric to fetch.
     */
    where: FrRubricWhereUniqueInput
  }

  /**
   * FrRubric findUniqueOrThrow
   */
  export type FrRubricFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrRubric
     */
    select?: FrRubricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrRubric
     */
    omit?: FrRubricOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrRubricInclude<ExtArgs> | null
    /**
     * Filter, which FrRubric to fetch.
     */
    where: FrRubricWhereUniqueInput
  }

  /**
   * FrRubric findFirst
   */
  export type FrRubricFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrRubric
     */
    select?: FrRubricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrRubric
     */
    omit?: FrRubricOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrRubricInclude<ExtArgs> | null
    /**
     * Filter, which FrRubric to fetch.
     */
    where?: FrRubricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FrRubrics to fetch.
     */
    orderBy?: FrRubricOrderByWithRelationInput | FrRubricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FrRubrics.
     */
    cursor?: FrRubricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FrRubrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FrRubrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FrRubrics.
     */
    distinct?: FrRubricScalarFieldEnum | FrRubricScalarFieldEnum[]
  }

  /**
   * FrRubric findFirstOrThrow
   */
  export type FrRubricFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrRubric
     */
    select?: FrRubricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrRubric
     */
    omit?: FrRubricOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrRubricInclude<ExtArgs> | null
    /**
     * Filter, which FrRubric to fetch.
     */
    where?: FrRubricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FrRubrics to fetch.
     */
    orderBy?: FrRubricOrderByWithRelationInput | FrRubricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FrRubrics.
     */
    cursor?: FrRubricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FrRubrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FrRubrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FrRubrics.
     */
    distinct?: FrRubricScalarFieldEnum | FrRubricScalarFieldEnum[]
  }

  /**
   * FrRubric findMany
   */
  export type FrRubricFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrRubric
     */
    select?: FrRubricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrRubric
     */
    omit?: FrRubricOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrRubricInclude<ExtArgs> | null
    /**
     * Filter, which FrRubrics to fetch.
     */
    where?: FrRubricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FrRubrics to fetch.
     */
    orderBy?: FrRubricOrderByWithRelationInput | FrRubricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FrRubrics.
     */
    cursor?: FrRubricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FrRubrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FrRubrics.
     */
    skip?: number
    distinct?: FrRubricScalarFieldEnum | FrRubricScalarFieldEnum[]
  }

  /**
   * FrRubric create
   */
  export type FrRubricCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrRubric
     */
    select?: FrRubricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrRubric
     */
    omit?: FrRubricOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrRubricInclude<ExtArgs> | null
    /**
     * The data needed to create a FrRubric.
     */
    data: XOR<FrRubricCreateInput, FrRubricUncheckedCreateInput>
  }

  /**
   * FrRubric createMany
   */
  export type FrRubricCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FrRubrics.
     */
    data: FrRubricCreateManyInput | FrRubricCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FrRubric createManyAndReturn
   */
  export type FrRubricCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrRubric
     */
    select?: FrRubricSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FrRubric
     */
    omit?: FrRubricOmit<ExtArgs> | null
    /**
     * The data used to create many FrRubrics.
     */
    data: FrRubricCreateManyInput | FrRubricCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrRubricIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FrRubric update
   */
  export type FrRubricUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrRubric
     */
    select?: FrRubricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrRubric
     */
    omit?: FrRubricOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrRubricInclude<ExtArgs> | null
    /**
     * The data needed to update a FrRubric.
     */
    data: XOR<FrRubricUpdateInput, FrRubricUncheckedUpdateInput>
    /**
     * Choose, which FrRubric to update.
     */
    where: FrRubricWhereUniqueInput
  }

  /**
   * FrRubric updateMany
   */
  export type FrRubricUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FrRubrics.
     */
    data: XOR<FrRubricUpdateManyMutationInput, FrRubricUncheckedUpdateManyInput>
    /**
     * Filter which FrRubrics to update
     */
    where?: FrRubricWhereInput
    /**
     * Limit how many FrRubrics to update.
     */
    limit?: number
  }

  /**
   * FrRubric updateManyAndReturn
   */
  export type FrRubricUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrRubric
     */
    select?: FrRubricSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FrRubric
     */
    omit?: FrRubricOmit<ExtArgs> | null
    /**
     * The data used to update FrRubrics.
     */
    data: XOR<FrRubricUpdateManyMutationInput, FrRubricUncheckedUpdateManyInput>
    /**
     * Filter which FrRubrics to update
     */
    where?: FrRubricWhereInput
    /**
     * Limit how many FrRubrics to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrRubricIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FrRubric upsert
   */
  export type FrRubricUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrRubric
     */
    select?: FrRubricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrRubric
     */
    omit?: FrRubricOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrRubricInclude<ExtArgs> | null
    /**
     * The filter to search for the FrRubric to update in case it exists.
     */
    where: FrRubricWhereUniqueInput
    /**
     * In case the FrRubric found by the `where` argument doesn't exist, create a new FrRubric with this data.
     */
    create: XOR<FrRubricCreateInput, FrRubricUncheckedCreateInput>
    /**
     * In case the FrRubric was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FrRubricUpdateInput, FrRubricUncheckedUpdateInput>
  }

  /**
   * FrRubric delete
   */
  export type FrRubricDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrRubric
     */
    select?: FrRubricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrRubric
     */
    omit?: FrRubricOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrRubricInclude<ExtArgs> | null
    /**
     * Filter which FrRubric to delete.
     */
    where: FrRubricWhereUniqueInput
  }

  /**
   * FrRubric deleteMany
   */
  export type FrRubricDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FrRubrics to delete
     */
    where?: FrRubricWhereInput
    /**
     * Limit how many FrRubrics to delete.
     */
    limit?: number
  }

  /**
   * FrRubric without action
   */
  export type FrRubricDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FrRubric
     */
    select?: FrRubricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FrRubric
     */
    omit?: FrRubricOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FrRubricInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: boolean | null
    image: string | null
    createdAt: Date | null
    updatedAt: Date | null
    role: string | null
    banned: boolean | null
    banReason: string | null
    banExpires: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: boolean | null
    image: string | null
    createdAt: Date | null
    updatedAt: Date | null
    role: string | null
    banned: boolean | null
    banReason: string | null
    banExpires: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    emailVerified: number
    image: number
    createdAt: number
    updatedAt: number
    role: number
    banned: number
    banReason: number
    banExpires: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    role?: true
    banned?: true
    banReason?: true
    banExpires?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    role?: true
    banned?: true
    banReason?: true
    banExpires?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    role?: true
    banned?: true
    banReason?: true
    banExpires?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string
    email: string
    emailVerified: boolean
    image: string | null
    createdAt: Date
    updatedAt: Date
    role: string | null
    banned: boolean | null
    banReason: string | null
    banExpires: Date | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    role?: boolean
    banned?: boolean
    banReason?: boolean
    banExpires?: boolean
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    accounts?: boolean | User$accountsArgs<ExtArgs>
    roles?: boolean | User$rolesArgs<ExtArgs>
    directPerms?: boolean | User$directPermsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    role?: boolean
    banned?: boolean
    banReason?: boolean
    banExpires?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    role?: boolean
    banned?: boolean
    banReason?: boolean
    banExpires?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    role?: boolean
    banned?: boolean
    banReason?: boolean
    banExpires?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "emailVerified" | "image" | "createdAt" | "updatedAt" | "role" | "banned" | "banReason" | "banExpires", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    accounts?: boolean | User$accountsArgs<ExtArgs>
    roles?: boolean | User$rolesArgs<ExtArgs>
    directPerms?: boolean | User$directPermsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      accounts: Prisma.$AccountPayload<ExtArgs>[]
      roles: Prisma.$UserRolePayload<ExtArgs>[]
      directPerms: Prisma.$UserPermissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string
      emailVerified: boolean
      image: string | null
      createdAt: Date
      updatedAt: Date
      role: string | null
      banned: boolean | null
      banReason: string | null
      banExpires: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    roles<T extends User$rolesArgs<ExtArgs> = {}>(args?: Subset<T, User$rolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    directPerms<T extends User$directPermsArgs<ExtArgs> = {}>(args?: Subset<T, User$directPermsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly emailVerified: FieldRef<"User", 'Boolean'>
    readonly image: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly role: FieldRef<"User", 'String'>
    readonly banned: FieldRef<"User", 'Boolean'>
    readonly banReason: FieldRef<"User", 'String'>
    readonly banExpires: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User.roles
   */
  export type User$rolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    where?: UserRoleWhereInput
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    cursor?: UserRoleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * User.directPerms
   */
  export type User$directPermsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    where?: UserPermissionWhereInput
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    cursor?: UserPermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    expiresAt: Date | null
    token: string | null
    createdAt: Date | null
    updatedAt: Date | null
    ipAddress: string | null
    userAgent: string | null
    userId: string | null
    impersonatedBy: string | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    expiresAt: Date | null
    token: string | null
    createdAt: Date | null
    updatedAt: Date | null
    ipAddress: string | null
    userAgent: string | null
    userId: string | null
    impersonatedBy: string | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    expiresAt: number
    token: number
    createdAt: number
    updatedAt: number
    ipAddress: number
    userAgent: number
    userId: number
    impersonatedBy: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    expiresAt?: true
    token?: true
    createdAt?: true
    updatedAt?: true
    ipAddress?: true
    userAgent?: true
    userId?: true
    impersonatedBy?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    expiresAt?: true
    token?: true
    createdAt?: true
    updatedAt?: true
    ipAddress?: true
    userAgent?: true
    userId?: true
    impersonatedBy?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    expiresAt?: true
    token?: true
    createdAt?: true
    updatedAt?: true
    ipAddress?: true
    userAgent?: true
    userId?: true
    impersonatedBy?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    expiresAt: Date
    token: string
    createdAt: Date
    updatedAt: Date
    ipAddress: string | null
    userAgent: string | null
    userId: string
    impersonatedBy: string | null
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    expiresAt?: boolean
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    userId?: boolean
    impersonatedBy?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    expiresAt?: boolean
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    userId?: boolean
    impersonatedBy?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    expiresAt?: boolean
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    userId?: boolean
    impersonatedBy?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    expiresAt?: boolean
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    userId?: boolean
    impersonatedBy?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "expiresAt" | "token" | "createdAt" | "updatedAt" | "ipAddress" | "userAgent" | "userId" | "impersonatedBy", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      expiresAt: Date
      token: string
      createdAt: Date
      updatedAt: Date
      ipAddress: string | null
      userAgent: string | null
      userId: string
      impersonatedBy: string | null
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions and returns the data updated in the database.
     * @param {SessionUpdateManyAndReturnArgs} args - Arguments to update many Sessions.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly expiresAt: FieldRef<"Session", 'DateTime'>
    readonly token: FieldRef<"Session", 'String'>
    readonly createdAt: FieldRef<"Session", 'DateTime'>
    readonly updatedAt: FieldRef<"Session", 'DateTime'>
    readonly ipAddress: FieldRef<"Session", 'String'>
    readonly userAgent: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
    readonly impersonatedBy: FieldRef<"Session", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session updateManyAndReturn
   */
  export type SessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    accountId: string | null
    providerId: string | null
    userId: string | null
    accessToken: string | null
    refreshToken: string | null
    idToken: string | null
    accessTokenExpiresAt: Date | null
    refreshTokenExpiresAt: Date | null
    scope: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    accountId: string | null
    providerId: string | null
    userId: string | null
    accessToken: string | null
    refreshToken: string | null
    idToken: string | null
    accessTokenExpiresAt: Date | null
    refreshTokenExpiresAt: Date | null
    scope: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    accountId: number
    providerId: number
    userId: number
    accessToken: number
    refreshToken: number
    idToken: number
    accessTokenExpiresAt: number
    refreshTokenExpiresAt: number
    scope: number
    password: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AccountMinAggregateInputType = {
    id?: true
    accountId?: true
    providerId?: true
    userId?: true
    accessToken?: true
    refreshToken?: true
    idToken?: true
    accessTokenExpiresAt?: true
    refreshTokenExpiresAt?: true
    scope?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    accountId?: true
    providerId?: true
    userId?: true
    accessToken?: true
    refreshToken?: true
    idToken?: true
    accessTokenExpiresAt?: true
    refreshTokenExpiresAt?: true
    scope?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    accountId?: true
    providerId?: true
    userId?: true
    accessToken?: true
    refreshToken?: true
    idToken?: true
    accessTokenExpiresAt?: true
    refreshTokenExpiresAt?: true
    scope?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    accountId: string
    providerId: string
    userId: string
    accessToken: string | null
    refreshToken: string | null
    idToken: string | null
    accessTokenExpiresAt: Date | null
    refreshTokenExpiresAt: Date | null
    scope: string | null
    password: string | null
    createdAt: Date
    updatedAt: Date
    _count: AccountCountAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountId?: boolean
    providerId?: boolean
    userId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    idToken?: boolean
    accessTokenExpiresAt?: boolean
    refreshTokenExpiresAt?: boolean
    scope?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountId?: boolean
    providerId?: boolean
    userId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    idToken?: boolean
    accessTokenExpiresAt?: boolean
    refreshTokenExpiresAt?: boolean
    scope?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountId?: boolean
    providerId?: boolean
    userId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    idToken?: boolean
    accessTokenExpiresAt?: boolean
    refreshTokenExpiresAt?: boolean
    scope?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    accountId?: boolean
    providerId?: boolean
    userId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    idToken?: boolean
    accessTokenExpiresAt?: boolean
    refreshTokenExpiresAt?: boolean
    scope?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "accountId" | "providerId" | "userId" | "accessToken" | "refreshToken" | "idToken" | "accessTokenExpiresAt" | "refreshTokenExpiresAt" | "scope" | "password" | "createdAt" | "updatedAt", ExtArgs["result"]["account"]>
  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      accountId: string
      providerId: string
      userId: string
      accessToken: string | null
      refreshToken: string | null
      idToken: string | null
      accessTokenExpiresAt: Date | null
      refreshTokenExpiresAt: Date | null
      scope: string | null
      password: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts and returns the data updated in the database.
     * @param {AccountUpdateManyAndReturnArgs} args - Arguments to update many Accounts.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AccountUpdateManyAndReturnArgs>(args: SelectSubset<T, AccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly accountId: FieldRef<"Account", 'String'>
    readonly providerId: FieldRef<"Account", 'String'>
    readonly userId: FieldRef<"Account", 'String'>
    readonly accessToken: FieldRef<"Account", 'String'>
    readonly refreshToken: FieldRef<"Account", 'String'>
    readonly idToken: FieldRef<"Account", 'String'>
    readonly accessTokenExpiresAt: FieldRef<"Account", 'DateTime'>
    readonly refreshTokenExpiresAt: FieldRef<"Account", 'DateTime'>
    readonly scope: FieldRef<"Account", 'String'>
    readonly password: FieldRef<"Account", 'String'>
    readonly createdAt: FieldRef<"Account", 'DateTime'>
    readonly updatedAt: FieldRef<"Account", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
  }

  /**
   * Account updateManyAndReturn
   */
  export type AccountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to delete.
     */
    limit?: number
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model Verification
   */

  export type AggregateVerification = {
    _count: VerificationCountAggregateOutputType | null
    _min: VerificationMinAggregateOutputType | null
    _max: VerificationMaxAggregateOutputType | null
  }

  export type VerificationMinAggregateOutputType = {
    id: string | null
    identifier: string | null
    value: string | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VerificationMaxAggregateOutputType = {
    id: string | null
    identifier: string | null
    value: string | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VerificationCountAggregateOutputType = {
    id: number
    identifier: number
    value: number
    expiresAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type VerificationMinAggregateInputType = {
    id?: true
    identifier?: true
    value?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VerificationMaxAggregateInputType = {
    id?: true
    identifier?: true
    value?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VerificationCountAggregateInputType = {
    id?: true
    identifier?: true
    value?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type VerificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Verification to aggregate.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Verifications
    **/
    _count?: true | VerificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationMaxAggregateInputType
  }

  export type GetVerificationAggregateType<T extends VerificationAggregateArgs> = {
        [P in keyof T & keyof AggregateVerification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerification[P]>
      : GetScalarType<T[P], AggregateVerification[P]>
  }




  export type VerificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationWhereInput
    orderBy?: VerificationOrderByWithAggregationInput | VerificationOrderByWithAggregationInput[]
    by: VerificationScalarFieldEnum[] | VerificationScalarFieldEnum
    having?: VerificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationCountAggregateInputType | true
    _min?: VerificationMinAggregateInputType
    _max?: VerificationMaxAggregateInputType
  }

  export type VerificationGroupByOutputType = {
    id: string
    identifier: string
    value: string
    expiresAt: Date
    createdAt: Date
    updatedAt: Date
    _count: VerificationCountAggregateOutputType | null
    _min: VerificationMinAggregateOutputType | null
    _max: VerificationMaxAggregateOutputType | null
  }

  type GetVerificationGroupByPayload<T extends VerificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationGroupByOutputType[P]>
        }
      >
    >


  export type VerificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    identifier?: boolean
    value?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["verification"]>

  export type VerificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    identifier?: boolean
    value?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["verification"]>

  export type VerificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    identifier?: boolean
    value?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["verification"]>

  export type VerificationSelectScalar = {
    id?: boolean
    identifier?: boolean
    value?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type VerificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "identifier" | "value" | "expiresAt" | "createdAt" | "updatedAt", ExtArgs["result"]["verification"]>

  export type $VerificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Verification"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      identifier: string
      value: string
      expiresAt: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["verification"]>
    composites: {}
  }

  type VerificationGetPayload<S extends boolean | null | undefined | VerificationDefaultArgs> = $Result.GetResult<Prisma.$VerificationPayload, S>

  type VerificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VerificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VerificationCountAggregateInputType | true
    }

  export interface VerificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Verification'], meta: { name: 'Verification' } }
    /**
     * Find zero or one Verification that matches the filter.
     * @param {VerificationFindUniqueArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VerificationFindUniqueArgs>(args: SelectSubset<T, VerificationFindUniqueArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Verification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VerificationFindUniqueOrThrowArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VerificationFindUniqueOrThrowArgs>(args: SelectSubset<T, VerificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Verification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationFindFirstArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VerificationFindFirstArgs>(args?: SelectSubset<T, VerificationFindFirstArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Verification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationFindFirstOrThrowArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VerificationFindFirstOrThrowArgs>(args?: SelectSubset<T, VerificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Verifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Verifications
     * const verifications = await prisma.verification.findMany()
     * 
     * // Get first 10 Verifications
     * const verifications = await prisma.verification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const verificationWithIdOnly = await prisma.verification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VerificationFindManyArgs>(args?: SelectSubset<T, VerificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Verification.
     * @param {VerificationCreateArgs} args - Arguments to create a Verification.
     * @example
     * // Create one Verification
     * const Verification = await prisma.verification.create({
     *   data: {
     *     // ... data to create a Verification
     *   }
     * })
     * 
     */
    create<T extends VerificationCreateArgs>(args: SelectSubset<T, VerificationCreateArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Verifications.
     * @param {VerificationCreateManyArgs} args - Arguments to create many Verifications.
     * @example
     * // Create many Verifications
     * const verification = await prisma.verification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VerificationCreateManyArgs>(args?: SelectSubset<T, VerificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Verifications and returns the data saved in the database.
     * @param {VerificationCreateManyAndReturnArgs} args - Arguments to create many Verifications.
     * @example
     * // Create many Verifications
     * const verification = await prisma.verification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Verifications and only return the `id`
     * const verificationWithIdOnly = await prisma.verification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VerificationCreateManyAndReturnArgs>(args?: SelectSubset<T, VerificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Verification.
     * @param {VerificationDeleteArgs} args - Arguments to delete one Verification.
     * @example
     * // Delete one Verification
     * const Verification = await prisma.verification.delete({
     *   where: {
     *     // ... filter to delete one Verification
     *   }
     * })
     * 
     */
    delete<T extends VerificationDeleteArgs>(args: SelectSubset<T, VerificationDeleteArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Verification.
     * @param {VerificationUpdateArgs} args - Arguments to update one Verification.
     * @example
     * // Update one Verification
     * const verification = await prisma.verification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VerificationUpdateArgs>(args: SelectSubset<T, VerificationUpdateArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Verifications.
     * @param {VerificationDeleteManyArgs} args - Arguments to filter Verifications to delete.
     * @example
     * // Delete a few Verifications
     * const { count } = await prisma.verification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VerificationDeleteManyArgs>(args?: SelectSubset<T, VerificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Verifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Verifications
     * const verification = await prisma.verification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VerificationUpdateManyArgs>(args: SelectSubset<T, VerificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Verifications and returns the data updated in the database.
     * @param {VerificationUpdateManyAndReturnArgs} args - Arguments to update many Verifications.
     * @example
     * // Update many Verifications
     * const verification = await prisma.verification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Verifications and only return the `id`
     * const verificationWithIdOnly = await prisma.verification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VerificationUpdateManyAndReturnArgs>(args: SelectSubset<T, VerificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Verification.
     * @param {VerificationUpsertArgs} args - Arguments to update or create a Verification.
     * @example
     * // Update or create a Verification
     * const verification = await prisma.verification.upsert({
     *   create: {
     *     // ... data to create a Verification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Verification we want to update
     *   }
     * })
     */
    upsert<T extends VerificationUpsertArgs>(args: SelectSubset<T, VerificationUpsertArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Verifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationCountArgs} args - Arguments to filter Verifications to count.
     * @example
     * // Count the number of Verifications
     * const count = await prisma.verification.count({
     *   where: {
     *     // ... the filter for the Verifications we want to count
     *   }
     * })
    **/
    count<T extends VerificationCountArgs>(
      args?: Subset<T, VerificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Verification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationAggregateArgs>(args: Subset<T, VerificationAggregateArgs>): Prisma.PrismaPromise<GetVerificationAggregateType<T>>

    /**
     * Group by Verification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationGroupByArgs['orderBy'] }
        : { orderBy?: VerificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Verification model
   */
  readonly fields: VerificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Verification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VerificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Verification model
   */
  interface VerificationFieldRefs {
    readonly id: FieldRef<"Verification", 'String'>
    readonly identifier: FieldRef<"Verification", 'String'>
    readonly value: FieldRef<"Verification", 'String'>
    readonly expiresAt: FieldRef<"Verification", 'DateTime'>
    readonly createdAt: FieldRef<"Verification", 'DateTime'>
    readonly updatedAt: FieldRef<"Verification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Verification findUnique
   */
  export type VerificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where: VerificationWhereUniqueInput
  }

  /**
   * Verification findUniqueOrThrow
   */
  export type VerificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where: VerificationWhereUniqueInput
  }

  /**
   * Verification findFirst
   */
  export type VerificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Verifications.
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Verifications.
     */
    distinct?: VerificationScalarFieldEnum | VerificationScalarFieldEnum[]
  }

  /**
   * Verification findFirstOrThrow
   */
  export type VerificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Verifications.
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Verifications.
     */
    distinct?: VerificationScalarFieldEnum | VerificationScalarFieldEnum[]
  }

  /**
   * Verification findMany
   */
  export type VerificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter, which Verifications to fetch.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Verifications.
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    distinct?: VerificationScalarFieldEnum | VerificationScalarFieldEnum[]
  }

  /**
   * Verification create
   */
  export type VerificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * The data needed to create a Verification.
     */
    data: XOR<VerificationCreateInput, VerificationUncheckedCreateInput>
  }

  /**
   * Verification createMany
   */
  export type VerificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Verifications.
     */
    data: VerificationCreateManyInput | VerificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Verification createManyAndReturn
   */
  export type VerificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * The data used to create many Verifications.
     */
    data: VerificationCreateManyInput | VerificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Verification update
   */
  export type VerificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * The data needed to update a Verification.
     */
    data: XOR<VerificationUpdateInput, VerificationUncheckedUpdateInput>
    /**
     * Choose, which Verification to update.
     */
    where: VerificationWhereUniqueInput
  }

  /**
   * Verification updateMany
   */
  export type VerificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Verifications.
     */
    data: XOR<VerificationUpdateManyMutationInput, VerificationUncheckedUpdateManyInput>
    /**
     * Filter which Verifications to update
     */
    where?: VerificationWhereInput
    /**
     * Limit how many Verifications to update.
     */
    limit?: number
  }

  /**
   * Verification updateManyAndReturn
   */
  export type VerificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * The data used to update Verifications.
     */
    data: XOR<VerificationUpdateManyMutationInput, VerificationUncheckedUpdateManyInput>
    /**
     * Filter which Verifications to update
     */
    where?: VerificationWhereInput
    /**
     * Limit how many Verifications to update.
     */
    limit?: number
  }

  /**
   * Verification upsert
   */
  export type VerificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * The filter to search for the Verification to update in case it exists.
     */
    where: VerificationWhereUniqueInput
    /**
     * In case the Verification found by the `where` argument doesn't exist, create a new Verification with this data.
     */
    create: XOR<VerificationCreateInput, VerificationUncheckedCreateInput>
    /**
     * In case the Verification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationUpdateInput, VerificationUncheckedUpdateInput>
  }

  /**
   * Verification delete
   */
  export type VerificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter which Verification to delete.
     */
    where: VerificationWhereUniqueInput
  }

  /**
   * Verification deleteMany
   */
  export type VerificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Verifications to delete
     */
    where?: VerificationWhereInput
    /**
     * Limit how many Verifications to delete.
     */
    limit?: number
  }

  /**
   * Verification without action
   */
  export type VerificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
  }


  /**
   * Model Role
   */

  export type AggregateRole = {
    _count: RoleCountAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  export type RoleMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RoleMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RoleCountAggregateOutputType = {
    id: number
    name: number
    description: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RoleMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RoleMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RoleCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Role to aggregate.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roles
    **/
    _count?: true | RoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleMaxAggregateInputType
  }

  export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
        [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRole[P]>
      : GetScalarType<T[P], AggregateRole[P]>
  }




  export type RoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleWhereInput
    orderBy?: RoleOrderByWithAggregationInput | RoleOrderByWithAggregationInput[]
    by: RoleScalarFieldEnum[] | RoleScalarFieldEnum
    having?: RoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleCountAggregateInputType | true
    _min?: RoleMinAggregateInputType
    _max?: RoleMaxAggregateInputType
  }

  export type RoleGroupByOutputType = {
    id: string
    name: string
    description: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: RoleCountAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  type GetRoleGroupByPayload<T extends RoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleGroupByOutputType[P]>
            : GetScalarType<T[P], RoleGroupByOutputType[P]>
        }
      >
    >


  export type RoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    users?: boolean | Role$usersArgs<ExtArgs>
    perms?: boolean | Role$permsArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["role"]>

  export type RoleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["role"]>

  export type RoleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["role"]>

  export type RoleSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RoleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["role"]>
  export type RoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Role$usersArgs<ExtArgs>
    perms?: boolean | Role$permsArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RoleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type RoleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Role"
    objects: {
      users: Prisma.$UserRolePayload<ExtArgs>[]
      perms: Prisma.$RolePermissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["role"]>
    composites: {}
  }

  type RoleGetPayload<S extends boolean | null | undefined | RoleDefaultArgs> = $Result.GetResult<Prisma.$RolePayload, S>

  type RoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoleCountAggregateInputType | true
    }

  export interface RoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Role'], meta: { name: 'Role' } }
    /**
     * Find zero or one Role that matches the filter.
     * @param {RoleFindUniqueArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoleFindUniqueArgs>(args: SelectSubset<T, RoleFindUniqueArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Role that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoleFindUniqueOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoleFindUniqueOrThrowArgs>(args: SelectSubset<T, RoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoleFindFirstArgs>(args?: SelectSubset<T, RoleFindFirstArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Role that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoleFindFirstOrThrowArgs>(args?: SelectSubset<T, RoleFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.role.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.role.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roleWithIdOnly = await prisma.role.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoleFindManyArgs>(args?: SelectSubset<T, RoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Role.
     * @param {RoleCreateArgs} args - Arguments to create a Role.
     * @example
     * // Create one Role
     * const Role = await prisma.role.create({
     *   data: {
     *     // ... data to create a Role
     *   }
     * })
     * 
     */
    create<T extends RoleCreateArgs>(args: SelectSubset<T, RoleCreateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Roles.
     * @param {RoleCreateManyArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoleCreateManyArgs>(args?: SelectSubset<T, RoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Roles and returns the data saved in the database.
     * @param {RoleCreateManyAndReturnArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Roles and only return the `id`
     * const roleWithIdOnly = await prisma.role.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RoleCreateManyAndReturnArgs>(args?: SelectSubset<T, RoleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Role.
     * @param {RoleDeleteArgs} args - Arguments to delete one Role.
     * @example
     * // Delete one Role
     * const Role = await prisma.role.delete({
     *   where: {
     *     // ... filter to delete one Role
     *   }
     * })
     * 
     */
    delete<T extends RoleDeleteArgs>(args: SelectSubset<T, RoleDeleteArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Role.
     * @param {RoleUpdateArgs} args - Arguments to update one Role.
     * @example
     * // Update one Role
     * const role = await prisma.role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoleUpdateArgs>(args: SelectSubset<T, RoleUpdateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Roles.
     * @param {RoleDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoleDeleteManyArgs>(args?: SelectSubset<T, RoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoleUpdateManyArgs>(args: SelectSubset<T, RoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles and returns the data updated in the database.
     * @param {RoleUpdateManyAndReturnArgs} args - Arguments to update many Roles.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Roles and only return the `id`
     * const roleWithIdOnly = await prisma.role.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RoleUpdateManyAndReturnArgs>(args: SelectSubset<T, RoleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Role.
     * @param {RoleUpsertArgs} args - Arguments to update or create a Role.
     * @example
     * // Update or create a Role
     * const role = await prisma.role.upsert({
     *   create: {
     *     // ... data to create a Role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Role we want to update
     *   }
     * })
     */
    upsert<T extends RoleUpsertArgs>(args: SelectSubset<T, RoleUpsertArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.role.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends RoleCountArgs>(
      args?: Subset<T, RoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAggregateArgs>(args: Subset<T, RoleAggregateArgs>): Prisma.PrismaPromise<GetRoleAggregateType<T>>

    /**
     * Group by Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoleGroupByArgs['orderBy'] }
        : { orderBy?: RoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Role model
   */
  readonly fields: RoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Role$usersArgs<ExtArgs> = {}>(args?: Subset<T, Role$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    perms<T extends Role$permsArgs<ExtArgs> = {}>(args?: Subset<T, Role$permsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Role model
   */
  interface RoleFieldRefs {
    readonly id: FieldRef<"Role", 'String'>
    readonly name: FieldRef<"Role", 'String'>
    readonly description: FieldRef<"Role", 'String'>
    readonly isActive: FieldRef<"Role", 'Boolean'>
    readonly createdAt: FieldRef<"Role", 'DateTime'>
    readonly updatedAt: FieldRef<"Role", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Role findUnique
   */
  export type RoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findUniqueOrThrow
   */
  export type RoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findFirst
   */
  export type RoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findFirstOrThrow
   */
  export type RoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findMany
   */
  export type RoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role create
   */
  export type RoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to create a Role.
     */
    data: XOR<RoleCreateInput, RoleUncheckedCreateInput>
  }

  /**
   * Role createMany
   */
  export type RoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Role createManyAndReturn
   */
  export type RoleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Role update
   */
  export type RoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to update a Role.
     */
    data: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
    /**
     * Choose, which Role to update.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role updateMany
   */
  export type RoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
    /**
     * Limit how many Roles to update.
     */
    limit?: number
  }

  /**
   * Role updateManyAndReturn
   */
  export type RoleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
    /**
     * Limit how many Roles to update.
     */
    limit?: number
  }

  /**
   * Role upsert
   */
  export type RoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The filter to search for the Role to update in case it exists.
     */
    where: RoleWhereUniqueInput
    /**
     * In case the Role found by the `where` argument doesn't exist, create a new Role with this data.
     */
    create: XOR<RoleCreateInput, RoleUncheckedCreateInput>
    /**
     * In case the Role was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
  }

  /**
   * Role delete
   */
  export type RoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter which Role to delete.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role deleteMany
   */
  export type RoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roles to delete
     */
    where?: RoleWhereInput
    /**
     * Limit how many Roles to delete.
     */
    limit?: number
  }

  /**
   * Role.users
   */
  export type Role$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    where?: UserRoleWhereInput
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    cursor?: UserRoleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * Role.perms
   */
  export type Role$permsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolePermission
     */
    omit?: RolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    where?: RolePermissionWhereInput
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    cursor?: RolePermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }

  /**
   * Role without action
   */
  export type RoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
  }


  /**
   * Model Permission
   */

  export type AggregatePermission = {
    _count: PermissionCountAggregateOutputType | null
    _min: PermissionMinAggregateOutputType | null
    _max: PermissionMaxAggregateOutputType | null
  }

  export type PermissionMinAggregateOutputType = {
    id: string | null
    resource: string | null
    action: string | null
    key: string | null
    isActive: boolean | null
  }

  export type PermissionMaxAggregateOutputType = {
    id: string | null
    resource: string | null
    action: string | null
    key: string | null
    isActive: boolean | null
  }

  export type PermissionCountAggregateOutputType = {
    id: number
    resource: number
    action: number
    key: number
    isActive: number
    _all: number
  }


  export type PermissionMinAggregateInputType = {
    id?: true
    resource?: true
    action?: true
    key?: true
    isActive?: true
  }

  export type PermissionMaxAggregateInputType = {
    id?: true
    resource?: true
    action?: true
    key?: true
    isActive?: true
  }

  export type PermissionCountAggregateInputType = {
    id?: true
    resource?: true
    action?: true
    key?: true
    isActive?: true
    _all?: true
  }

  export type PermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Permission to aggregate.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Permissions
    **/
    _count?: true | PermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PermissionMaxAggregateInputType
  }

  export type GetPermissionAggregateType<T extends PermissionAggregateArgs> = {
        [P in keyof T & keyof AggregatePermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePermission[P]>
      : GetScalarType<T[P], AggregatePermission[P]>
  }




  export type PermissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PermissionWhereInput
    orderBy?: PermissionOrderByWithAggregationInput | PermissionOrderByWithAggregationInput[]
    by: PermissionScalarFieldEnum[] | PermissionScalarFieldEnum
    having?: PermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PermissionCountAggregateInputType | true
    _min?: PermissionMinAggregateInputType
    _max?: PermissionMaxAggregateInputType
  }

  export type PermissionGroupByOutputType = {
    id: string
    resource: string
    action: string
    key: string
    isActive: boolean
    _count: PermissionCountAggregateOutputType | null
    _min: PermissionMinAggregateOutputType | null
    _max: PermissionMaxAggregateOutputType | null
  }

  type GetPermissionGroupByPayload<T extends PermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PermissionGroupByOutputType[P]>
            : GetScalarType<T[P], PermissionGroupByOutputType[P]>
        }
      >
    >


  export type PermissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resource?: boolean
    action?: boolean
    key?: boolean
    isActive?: boolean
    roles?: boolean | Permission$rolesArgs<ExtArgs>
    users?: boolean | Permission$usersArgs<ExtArgs>
    _count?: boolean | PermissionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["permission"]>

  export type PermissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resource?: boolean
    action?: boolean
    key?: boolean
    isActive?: boolean
  }, ExtArgs["result"]["permission"]>

  export type PermissionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resource?: boolean
    action?: boolean
    key?: boolean
    isActive?: boolean
  }, ExtArgs["result"]["permission"]>

  export type PermissionSelectScalar = {
    id?: boolean
    resource?: boolean
    action?: boolean
    key?: boolean
    isActive?: boolean
  }

  export type PermissionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "resource" | "action" | "key" | "isActive", ExtArgs["result"]["permission"]>
  export type PermissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roles?: boolean | Permission$rolesArgs<ExtArgs>
    users?: boolean | Permission$usersArgs<ExtArgs>
    _count?: boolean | PermissionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PermissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PermissionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PermissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Permission"
    objects: {
      roles: Prisma.$RolePermissionPayload<ExtArgs>[]
      users: Prisma.$UserPermissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      resource: string
      action: string
      key: string
      isActive: boolean
    }, ExtArgs["result"]["permission"]>
    composites: {}
  }

  type PermissionGetPayload<S extends boolean | null | undefined | PermissionDefaultArgs> = $Result.GetResult<Prisma.$PermissionPayload, S>

  type PermissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PermissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PermissionCountAggregateInputType | true
    }

  export interface PermissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Permission'], meta: { name: 'Permission' } }
    /**
     * Find zero or one Permission that matches the filter.
     * @param {PermissionFindUniqueArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PermissionFindUniqueArgs>(args: SelectSubset<T, PermissionFindUniqueArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Permission that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PermissionFindUniqueOrThrowArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PermissionFindUniqueOrThrowArgs>(args: SelectSubset<T, PermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Permission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindFirstArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PermissionFindFirstArgs>(args?: SelectSubset<T, PermissionFindFirstArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Permission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindFirstOrThrowArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PermissionFindFirstOrThrowArgs>(args?: SelectSubset<T, PermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Permissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Permissions
     * const permissions = await prisma.permission.findMany()
     * 
     * // Get first 10 Permissions
     * const permissions = await prisma.permission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const permissionWithIdOnly = await prisma.permission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PermissionFindManyArgs>(args?: SelectSubset<T, PermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Permission.
     * @param {PermissionCreateArgs} args - Arguments to create a Permission.
     * @example
     * // Create one Permission
     * const Permission = await prisma.permission.create({
     *   data: {
     *     // ... data to create a Permission
     *   }
     * })
     * 
     */
    create<T extends PermissionCreateArgs>(args: SelectSubset<T, PermissionCreateArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Permissions.
     * @param {PermissionCreateManyArgs} args - Arguments to create many Permissions.
     * @example
     * // Create many Permissions
     * const permission = await prisma.permission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PermissionCreateManyArgs>(args?: SelectSubset<T, PermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Permissions and returns the data saved in the database.
     * @param {PermissionCreateManyAndReturnArgs} args - Arguments to create many Permissions.
     * @example
     * // Create many Permissions
     * const permission = await prisma.permission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Permissions and only return the `id`
     * const permissionWithIdOnly = await prisma.permission.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PermissionCreateManyAndReturnArgs>(args?: SelectSubset<T, PermissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Permission.
     * @param {PermissionDeleteArgs} args - Arguments to delete one Permission.
     * @example
     * // Delete one Permission
     * const Permission = await prisma.permission.delete({
     *   where: {
     *     // ... filter to delete one Permission
     *   }
     * })
     * 
     */
    delete<T extends PermissionDeleteArgs>(args: SelectSubset<T, PermissionDeleteArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Permission.
     * @param {PermissionUpdateArgs} args - Arguments to update one Permission.
     * @example
     * // Update one Permission
     * const permission = await prisma.permission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PermissionUpdateArgs>(args: SelectSubset<T, PermissionUpdateArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Permissions.
     * @param {PermissionDeleteManyArgs} args - Arguments to filter Permissions to delete.
     * @example
     * // Delete a few Permissions
     * const { count } = await prisma.permission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PermissionDeleteManyArgs>(args?: SelectSubset<T, PermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Permissions
     * const permission = await prisma.permission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PermissionUpdateManyArgs>(args: SelectSubset<T, PermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Permissions and returns the data updated in the database.
     * @param {PermissionUpdateManyAndReturnArgs} args - Arguments to update many Permissions.
     * @example
     * // Update many Permissions
     * const permission = await prisma.permission.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Permissions and only return the `id`
     * const permissionWithIdOnly = await prisma.permission.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PermissionUpdateManyAndReturnArgs>(args: SelectSubset<T, PermissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Permission.
     * @param {PermissionUpsertArgs} args - Arguments to update or create a Permission.
     * @example
     * // Update or create a Permission
     * const permission = await prisma.permission.upsert({
     *   create: {
     *     // ... data to create a Permission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Permission we want to update
     *   }
     * })
     */
    upsert<T extends PermissionUpsertArgs>(args: SelectSubset<T, PermissionUpsertArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionCountArgs} args - Arguments to filter Permissions to count.
     * @example
     * // Count the number of Permissions
     * const count = await prisma.permission.count({
     *   where: {
     *     // ... the filter for the Permissions we want to count
     *   }
     * })
    **/
    count<T extends PermissionCountArgs>(
      args?: Subset<T, PermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Permission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PermissionAggregateArgs>(args: Subset<T, PermissionAggregateArgs>): Prisma.PrismaPromise<GetPermissionAggregateType<T>>

    /**
     * Group by Permission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PermissionGroupByArgs['orderBy'] }
        : { orderBy?: PermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Permission model
   */
  readonly fields: PermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Permission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PermissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    roles<T extends Permission$rolesArgs<ExtArgs> = {}>(args?: Subset<T, Permission$rolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    users<T extends Permission$usersArgs<ExtArgs> = {}>(args?: Subset<T, Permission$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Permission model
   */
  interface PermissionFieldRefs {
    readonly id: FieldRef<"Permission", 'String'>
    readonly resource: FieldRef<"Permission", 'String'>
    readonly action: FieldRef<"Permission", 'String'>
    readonly key: FieldRef<"Permission", 'String'>
    readonly isActive: FieldRef<"Permission", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Permission findUnique
   */
  export type PermissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission findUniqueOrThrow
   */
  export type PermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission findFirst
   */
  export type PermissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Permissions.
     */
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission findFirstOrThrow
   */
  export type PermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Permissions.
     */
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission findMany
   */
  export type PermissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permissions to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission create
   */
  export type PermissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a Permission.
     */
    data: XOR<PermissionCreateInput, PermissionUncheckedCreateInput>
  }

  /**
   * Permission createMany
   */
  export type PermissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Permissions.
     */
    data: PermissionCreateManyInput | PermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Permission createManyAndReturn
   */
  export type PermissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * The data used to create many Permissions.
     */
    data: PermissionCreateManyInput | PermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Permission update
   */
  export type PermissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a Permission.
     */
    data: XOR<PermissionUpdateInput, PermissionUncheckedUpdateInput>
    /**
     * Choose, which Permission to update.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission updateMany
   */
  export type PermissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Permissions.
     */
    data: XOR<PermissionUpdateManyMutationInput, PermissionUncheckedUpdateManyInput>
    /**
     * Filter which Permissions to update
     */
    where?: PermissionWhereInput
    /**
     * Limit how many Permissions to update.
     */
    limit?: number
  }

  /**
   * Permission updateManyAndReturn
   */
  export type PermissionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * The data used to update Permissions.
     */
    data: XOR<PermissionUpdateManyMutationInput, PermissionUncheckedUpdateManyInput>
    /**
     * Filter which Permissions to update
     */
    where?: PermissionWhereInput
    /**
     * Limit how many Permissions to update.
     */
    limit?: number
  }

  /**
   * Permission upsert
   */
  export type PermissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the Permission to update in case it exists.
     */
    where: PermissionWhereUniqueInput
    /**
     * In case the Permission found by the `where` argument doesn't exist, create a new Permission with this data.
     */
    create: XOR<PermissionCreateInput, PermissionUncheckedCreateInput>
    /**
     * In case the Permission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PermissionUpdateInput, PermissionUncheckedUpdateInput>
  }

  /**
   * Permission delete
   */
  export type PermissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter which Permission to delete.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission deleteMany
   */
  export type PermissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Permissions to delete
     */
    where?: PermissionWhereInput
    /**
     * Limit how many Permissions to delete.
     */
    limit?: number
  }

  /**
   * Permission.roles
   */
  export type Permission$rolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolePermission
     */
    omit?: RolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    where?: RolePermissionWhereInput
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    cursor?: RolePermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }

  /**
   * Permission.users
   */
  export type Permission$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    where?: UserPermissionWhereInput
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    cursor?: UserPermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }

  /**
   * Permission without action
   */
  export type PermissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
  }


  /**
   * Model RolePermission
   */

  export type AggregateRolePermission = {
    _count: RolePermissionCountAggregateOutputType | null
    _min: RolePermissionMinAggregateOutputType | null
    _max: RolePermissionMaxAggregateOutputType | null
  }

  export type RolePermissionMinAggregateOutputType = {
    roleId: string | null
    permissionId: string | null
    granted: boolean | null
  }

  export type RolePermissionMaxAggregateOutputType = {
    roleId: string | null
    permissionId: string | null
    granted: boolean | null
  }

  export type RolePermissionCountAggregateOutputType = {
    roleId: number
    permissionId: number
    granted: number
    _all: number
  }


  export type RolePermissionMinAggregateInputType = {
    roleId?: true
    permissionId?: true
    granted?: true
  }

  export type RolePermissionMaxAggregateInputType = {
    roleId?: true
    permissionId?: true
    granted?: true
  }

  export type RolePermissionCountAggregateInputType = {
    roleId?: true
    permissionId?: true
    granted?: true
    _all?: true
  }

  export type RolePermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RolePermission to aggregate.
     */
    where?: RolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolePermissions to fetch.
     */
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RolePermissions
    **/
    _count?: true | RolePermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RolePermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RolePermissionMaxAggregateInputType
  }

  export type GetRolePermissionAggregateType<T extends RolePermissionAggregateArgs> = {
        [P in keyof T & keyof AggregateRolePermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRolePermission[P]>
      : GetScalarType<T[P], AggregateRolePermission[P]>
  }




  export type RolePermissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RolePermissionWhereInput
    orderBy?: RolePermissionOrderByWithAggregationInput | RolePermissionOrderByWithAggregationInput[]
    by: RolePermissionScalarFieldEnum[] | RolePermissionScalarFieldEnum
    having?: RolePermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RolePermissionCountAggregateInputType | true
    _min?: RolePermissionMinAggregateInputType
    _max?: RolePermissionMaxAggregateInputType
  }

  export type RolePermissionGroupByOutputType = {
    roleId: string
    permissionId: string
    granted: boolean
    _count: RolePermissionCountAggregateOutputType | null
    _min: RolePermissionMinAggregateOutputType | null
    _max: RolePermissionMaxAggregateOutputType | null
  }

  type GetRolePermissionGroupByPayload<T extends RolePermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RolePermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RolePermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RolePermissionGroupByOutputType[P]>
            : GetScalarType<T[P], RolePermissionGroupByOutputType[P]>
        }
      >
    >


  export type RolePermissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    roleId?: boolean
    permissionId?: boolean
    granted?: boolean
    role?: boolean | RoleDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rolePermission"]>

  export type RolePermissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    roleId?: boolean
    permissionId?: boolean
    granted?: boolean
    role?: boolean | RoleDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rolePermission"]>

  export type RolePermissionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    roleId?: boolean
    permissionId?: boolean
    granted?: boolean
    role?: boolean | RoleDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rolePermission"]>

  export type RolePermissionSelectScalar = {
    roleId?: boolean
    permissionId?: boolean
    granted?: boolean
  }

  export type RolePermissionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"roleId" | "permissionId" | "granted", ExtArgs["result"]["rolePermission"]>
  export type RolePermissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    role?: boolean | RoleDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }
  export type RolePermissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    role?: boolean | RoleDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }
  export type RolePermissionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    role?: boolean | RoleDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }

  export type $RolePermissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RolePermission"
    objects: {
      role: Prisma.$RolePayload<ExtArgs>
      permission: Prisma.$PermissionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      roleId: string
      permissionId: string
      granted: boolean
    }, ExtArgs["result"]["rolePermission"]>
    composites: {}
  }

  type RolePermissionGetPayload<S extends boolean | null | undefined | RolePermissionDefaultArgs> = $Result.GetResult<Prisma.$RolePermissionPayload, S>

  type RolePermissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RolePermissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RolePermissionCountAggregateInputType | true
    }

  export interface RolePermissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RolePermission'], meta: { name: 'RolePermission' } }
    /**
     * Find zero or one RolePermission that matches the filter.
     * @param {RolePermissionFindUniqueArgs} args - Arguments to find a RolePermission
     * @example
     * // Get one RolePermission
     * const rolePermission = await prisma.rolePermission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RolePermissionFindUniqueArgs>(args: SelectSubset<T, RolePermissionFindUniqueArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RolePermission that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RolePermissionFindUniqueOrThrowArgs} args - Arguments to find a RolePermission
     * @example
     * // Get one RolePermission
     * const rolePermission = await prisma.rolePermission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RolePermissionFindUniqueOrThrowArgs>(args: SelectSubset<T, RolePermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RolePermission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionFindFirstArgs} args - Arguments to find a RolePermission
     * @example
     * // Get one RolePermission
     * const rolePermission = await prisma.rolePermission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RolePermissionFindFirstArgs>(args?: SelectSubset<T, RolePermissionFindFirstArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RolePermission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionFindFirstOrThrowArgs} args - Arguments to find a RolePermission
     * @example
     * // Get one RolePermission
     * const rolePermission = await prisma.rolePermission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RolePermissionFindFirstOrThrowArgs>(args?: SelectSubset<T, RolePermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RolePermissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RolePermissions
     * const rolePermissions = await prisma.rolePermission.findMany()
     * 
     * // Get first 10 RolePermissions
     * const rolePermissions = await prisma.rolePermission.findMany({ take: 10 })
     * 
     * // Only select the `roleId`
     * const rolePermissionWithRoleIdOnly = await prisma.rolePermission.findMany({ select: { roleId: true } })
     * 
     */
    findMany<T extends RolePermissionFindManyArgs>(args?: SelectSubset<T, RolePermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RolePermission.
     * @param {RolePermissionCreateArgs} args - Arguments to create a RolePermission.
     * @example
     * // Create one RolePermission
     * const RolePermission = await prisma.rolePermission.create({
     *   data: {
     *     // ... data to create a RolePermission
     *   }
     * })
     * 
     */
    create<T extends RolePermissionCreateArgs>(args: SelectSubset<T, RolePermissionCreateArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RolePermissions.
     * @param {RolePermissionCreateManyArgs} args - Arguments to create many RolePermissions.
     * @example
     * // Create many RolePermissions
     * const rolePermission = await prisma.rolePermission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RolePermissionCreateManyArgs>(args?: SelectSubset<T, RolePermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RolePermissions and returns the data saved in the database.
     * @param {RolePermissionCreateManyAndReturnArgs} args - Arguments to create many RolePermissions.
     * @example
     * // Create many RolePermissions
     * const rolePermission = await prisma.rolePermission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RolePermissions and only return the `roleId`
     * const rolePermissionWithRoleIdOnly = await prisma.rolePermission.createManyAndReturn({
     *   select: { roleId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RolePermissionCreateManyAndReturnArgs>(args?: SelectSubset<T, RolePermissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RolePermission.
     * @param {RolePermissionDeleteArgs} args - Arguments to delete one RolePermission.
     * @example
     * // Delete one RolePermission
     * const RolePermission = await prisma.rolePermission.delete({
     *   where: {
     *     // ... filter to delete one RolePermission
     *   }
     * })
     * 
     */
    delete<T extends RolePermissionDeleteArgs>(args: SelectSubset<T, RolePermissionDeleteArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RolePermission.
     * @param {RolePermissionUpdateArgs} args - Arguments to update one RolePermission.
     * @example
     * // Update one RolePermission
     * const rolePermission = await prisma.rolePermission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RolePermissionUpdateArgs>(args: SelectSubset<T, RolePermissionUpdateArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RolePermissions.
     * @param {RolePermissionDeleteManyArgs} args - Arguments to filter RolePermissions to delete.
     * @example
     * // Delete a few RolePermissions
     * const { count } = await prisma.rolePermission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RolePermissionDeleteManyArgs>(args?: SelectSubset<T, RolePermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RolePermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RolePermissions
     * const rolePermission = await prisma.rolePermission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RolePermissionUpdateManyArgs>(args: SelectSubset<T, RolePermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RolePermissions and returns the data updated in the database.
     * @param {RolePermissionUpdateManyAndReturnArgs} args - Arguments to update many RolePermissions.
     * @example
     * // Update many RolePermissions
     * const rolePermission = await prisma.rolePermission.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RolePermissions and only return the `roleId`
     * const rolePermissionWithRoleIdOnly = await prisma.rolePermission.updateManyAndReturn({
     *   select: { roleId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RolePermissionUpdateManyAndReturnArgs>(args: SelectSubset<T, RolePermissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RolePermission.
     * @param {RolePermissionUpsertArgs} args - Arguments to update or create a RolePermission.
     * @example
     * // Update or create a RolePermission
     * const rolePermission = await prisma.rolePermission.upsert({
     *   create: {
     *     // ... data to create a RolePermission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RolePermission we want to update
     *   }
     * })
     */
    upsert<T extends RolePermissionUpsertArgs>(args: SelectSubset<T, RolePermissionUpsertArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RolePermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionCountArgs} args - Arguments to filter RolePermissions to count.
     * @example
     * // Count the number of RolePermissions
     * const count = await prisma.rolePermission.count({
     *   where: {
     *     // ... the filter for the RolePermissions we want to count
     *   }
     * })
    **/
    count<T extends RolePermissionCountArgs>(
      args?: Subset<T, RolePermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RolePermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RolePermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RolePermissionAggregateArgs>(args: Subset<T, RolePermissionAggregateArgs>): Prisma.PrismaPromise<GetRolePermissionAggregateType<T>>

    /**
     * Group by RolePermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RolePermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RolePermissionGroupByArgs['orderBy'] }
        : { orderBy?: RolePermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RolePermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRolePermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RolePermission model
   */
  readonly fields: RolePermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RolePermission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RolePermissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    role<T extends RoleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoleDefaultArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    permission<T extends PermissionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PermissionDefaultArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RolePermission model
   */
  interface RolePermissionFieldRefs {
    readonly roleId: FieldRef<"RolePermission", 'String'>
    readonly permissionId: FieldRef<"RolePermission", 'String'>
    readonly granted: FieldRef<"RolePermission", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * RolePermission findUnique
   */
  export type RolePermissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolePermission
     */
    omit?: RolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermission to fetch.
     */
    where: RolePermissionWhereUniqueInput
  }

  /**
   * RolePermission findUniqueOrThrow
   */
  export type RolePermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolePermission
     */
    omit?: RolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermission to fetch.
     */
    where: RolePermissionWhereUniqueInput
  }

  /**
   * RolePermission findFirst
   */
  export type RolePermissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolePermission
     */
    omit?: RolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermission to fetch.
     */
    where?: RolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolePermissions to fetch.
     */
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RolePermissions.
     */
    cursor?: RolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RolePermissions.
     */
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }

  /**
   * RolePermission findFirstOrThrow
   */
  export type RolePermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolePermission
     */
    omit?: RolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermission to fetch.
     */
    where?: RolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolePermissions to fetch.
     */
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RolePermissions.
     */
    cursor?: RolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RolePermissions.
     */
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }

  /**
   * RolePermission findMany
   */
  export type RolePermissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolePermission
     */
    omit?: RolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermissions to fetch.
     */
    where?: RolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolePermissions to fetch.
     */
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RolePermissions.
     */
    cursor?: RolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolePermissions.
     */
    skip?: number
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }

  /**
   * RolePermission create
   */
  export type RolePermissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolePermission
     */
    omit?: RolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a RolePermission.
     */
    data: XOR<RolePermissionCreateInput, RolePermissionUncheckedCreateInput>
  }

  /**
   * RolePermission createMany
   */
  export type RolePermissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RolePermissions.
     */
    data: RolePermissionCreateManyInput | RolePermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RolePermission createManyAndReturn
   */
  export type RolePermissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RolePermission
     */
    omit?: RolePermissionOmit<ExtArgs> | null
    /**
     * The data used to create many RolePermissions.
     */
    data: RolePermissionCreateManyInput | RolePermissionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RolePermission update
   */
  export type RolePermissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolePermission
     */
    omit?: RolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a RolePermission.
     */
    data: XOR<RolePermissionUpdateInput, RolePermissionUncheckedUpdateInput>
    /**
     * Choose, which RolePermission to update.
     */
    where: RolePermissionWhereUniqueInput
  }

  /**
   * RolePermission updateMany
   */
  export type RolePermissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RolePermissions.
     */
    data: XOR<RolePermissionUpdateManyMutationInput, RolePermissionUncheckedUpdateManyInput>
    /**
     * Filter which RolePermissions to update
     */
    where?: RolePermissionWhereInput
    /**
     * Limit how many RolePermissions to update.
     */
    limit?: number
  }

  /**
   * RolePermission updateManyAndReturn
   */
  export type RolePermissionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RolePermission
     */
    omit?: RolePermissionOmit<ExtArgs> | null
    /**
     * The data used to update RolePermissions.
     */
    data: XOR<RolePermissionUpdateManyMutationInput, RolePermissionUncheckedUpdateManyInput>
    /**
     * Filter which RolePermissions to update
     */
    where?: RolePermissionWhereInput
    /**
     * Limit how many RolePermissions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RolePermission upsert
   */
  export type RolePermissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolePermission
     */
    omit?: RolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the RolePermission to update in case it exists.
     */
    where: RolePermissionWhereUniqueInput
    /**
     * In case the RolePermission found by the `where` argument doesn't exist, create a new RolePermission with this data.
     */
    create: XOR<RolePermissionCreateInput, RolePermissionUncheckedCreateInput>
    /**
     * In case the RolePermission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RolePermissionUpdateInput, RolePermissionUncheckedUpdateInput>
  }

  /**
   * RolePermission delete
   */
  export type RolePermissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolePermission
     */
    omit?: RolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter which RolePermission to delete.
     */
    where: RolePermissionWhereUniqueInput
  }

  /**
   * RolePermission deleteMany
   */
  export type RolePermissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RolePermissions to delete
     */
    where?: RolePermissionWhereInput
    /**
     * Limit how many RolePermissions to delete.
     */
    limit?: number
  }

  /**
   * RolePermission without action
   */
  export type RolePermissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolePermission
     */
    omit?: RolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
  }


  /**
   * Model UserRole
   */

  export type AggregateUserRole = {
    _count: UserRoleCountAggregateOutputType | null
    _min: UserRoleMinAggregateOutputType | null
    _max: UserRoleMaxAggregateOutputType | null
  }

  export type UserRoleMinAggregateOutputType = {
    userId: string | null
    roleId: string | null
  }

  export type UserRoleMaxAggregateOutputType = {
    userId: string | null
    roleId: string | null
  }

  export type UserRoleCountAggregateOutputType = {
    userId: number
    roleId: number
    _all: number
  }


  export type UserRoleMinAggregateInputType = {
    userId?: true
    roleId?: true
  }

  export type UserRoleMaxAggregateInputType = {
    userId?: true
    roleId?: true
  }

  export type UserRoleCountAggregateInputType = {
    userId?: true
    roleId?: true
    _all?: true
  }

  export type UserRoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserRole to aggregate.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserRoles
    **/
    _count?: true | UserRoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserRoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserRoleMaxAggregateInputType
  }

  export type GetUserRoleAggregateType<T extends UserRoleAggregateArgs> = {
        [P in keyof T & keyof AggregateUserRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserRole[P]>
      : GetScalarType<T[P], AggregateUserRole[P]>
  }




  export type UserRoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRoleWhereInput
    orderBy?: UserRoleOrderByWithAggregationInput | UserRoleOrderByWithAggregationInput[]
    by: UserRoleScalarFieldEnum[] | UserRoleScalarFieldEnum
    having?: UserRoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserRoleCountAggregateInputType | true
    _min?: UserRoleMinAggregateInputType
    _max?: UserRoleMaxAggregateInputType
  }

  export type UserRoleGroupByOutputType = {
    userId: string
    roleId: string
    _count: UserRoleCountAggregateOutputType | null
    _min: UserRoleMinAggregateOutputType | null
    _max: UserRoleMaxAggregateOutputType | null
  }

  type GetUserRoleGroupByPayload<T extends UserRoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserRoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserRoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserRoleGroupByOutputType[P]>
            : GetScalarType<T[P], UserRoleGroupByOutputType[P]>
        }
      >
    >


  export type UserRoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    roleId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userRole"]>

  export type UserRoleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    roleId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userRole"]>

  export type UserRoleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    roleId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userRole"]>

  export type UserRoleSelectScalar = {
    userId?: boolean
    roleId?: boolean
  }

  export type UserRoleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userId" | "roleId", ExtArgs["result"]["userRole"]>
  export type UserRoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }
  export type UserRoleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }
  export type UserRoleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }

  export type $UserRolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserRole"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      role: Prisma.$RolePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      roleId: string
    }, ExtArgs["result"]["userRole"]>
    composites: {}
  }

  type UserRoleGetPayload<S extends boolean | null | undefined | UserRoleDefaultArgs> = $Result.GetResult<Prisma.$UserRolePayload, S>

  type UserRoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserRoleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserRoleCountAggregateInputType | true
    }

  export interface UserRoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserRole'], meta: { name: 'UserRole' } }
    /**
     * Find zero or one UserRole that matches the filter.
     * @param {UserRoleFindUniqueArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserRoleFindUniqueArgs>(args: SelectSubset<T, UserRoleFindUniqueArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserRole that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserRoleFindUniqueOrThrowArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserRoleFindUniqueOrThrowArgs>(args: SelectSubset<T, UserRoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserRole that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleFindFirstArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserRoleFindFirstArgs>(args?: SelectSubset<T, UserRoleFindFirstArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserRole that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleFindFirstOrThrowArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserRoleFindFirstOrThrowArgs>(args?: SelectSubset<T, UserRoleFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserRoles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserRoles
     * const userRoles = await prisma.userRole.findMany()
     * 
     * // Get first 10 UserRoles
     * const userRoles = await prisma.userRole.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userRoleWithUserIdOnly = await prisma.userRole.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends UserRoleFindManyArgs>(args?: SelectSubset<T, UserRoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserRole.
     * @param {UserRoleCreateArgs} args - Arguments to create a UserRole.
     * @example
     * // Create one UserRole
     * const UserRole = await prisma.userRole.create({
     *   data: {
     *     // ... data to create a UserRole
     *   }
     * })
     * 
     */
    create<T extends UserRoleCreateArgs>(args: SelectSubset<T, UserRoleCreateArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserRoles.
     * @param {UserRoleCreateManyArgs} args - Arguments to create many UserRoles.
     * @example
     * // Create many UserRoles
     * const userRole = await prisma.userRole.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserRoleCreateManyArgs>(args?: SelectSubset<T, UserRoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserRoles and returns the data saved in the database.
     * @param {UserRoleCreateManyAndReturnArgs} args - Arguments to create many UserRoles.
     * @example
     * // Create many UserRoles
     * const userRole = await prisma.userRole.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserRoles and only return the `userId`
     * const userRoleWithUserIdOnly = await prisma.userRole.createManyAndReturn({
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserRoleCreateManyAndReturnArgs>(args?: SelectSubset<T, UserRoleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserRole.
     * @param {UserRoleDeleteArgs} args - Arguments to delete one UserRole.
     * @example
     * // Delete one UserRole
     * const UserRole = await prisma.userRole.delete({
     *   where: {
     *     // ... filter to delete one UserRole
     *   }
     * })
     * 
     */
    delete<T extends UserRoleDeleteArgs>(args: SelectSubset<T, UserRoleDeleteArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserRole.
     * @param {UserRoleUpdateArgs} args - Arguments to update one UserRole.
     * @example
     * // Update one UserRole
     * const userRole = await prisma.userRole.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserRoleUpdateArgs>(args: SelectSubset<T, UserRoleUpdateArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserRoles.
     * @param {UserRoleDeleteManyArgs} args - Arguments to filter UserRoles to delete.
     * @example
     * // Delete a few UserRoles
     * const { count } = await prisma.userRole.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserRoleDeleteManyArgs>(args?: SelectSubset<T, UserRoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserRoles
     * const userRole = await prisma.userRole.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserRoleUpdateManyArgs>(args: SelectSubset<T, UserRoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserRoles and returns the data updated in the database.
     * @param {UserRoleUpdateManyAndReturnArgs} args - Arguments to update many UserRoles.
     * @example
     * // Update many UserRoles
     * const userRole = await prisma.userRole.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserRoles and only return the `userId`
     * const userRoleWithUserIdOnly = await prisma.userRole.updateManyAndReturn({
     *   select: { userId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserRoleUpdateManyAndReturnArgs>(args: SelectSubset<T, UserRoleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserRole.
     * @param {UserRoleUpsertArgs} args - Arguments to update or create a UserRole.
     * @example
     * // Update or create a UserRole
     * const userRole = await prisma.userRole.upsert({
     *   create: {
     *     // ... data to create a UserRole
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserRole we want to update
     *   }
     * })
     */
    upsert<T extends UserRoleUpsertArgs>(args: SelectSubset<T, UserRoleUpsertArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleCountArgs} args - Arguments to filter UserRoles to count.
     * @example
     * // Count the number of UserRoles
     * const count = await prisma.userRole.count({
     *   where: {
     *     // ... the filter for the UserRoles we want to count
     *   }
     * })
    **/
    count<T extends UserRoleCountArgs>(
      args?: Subset<T, UserRoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserRoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserRoleAggregateArgs>(args: Subset<T, UserRoleAggregateArgs>): Prisma.PrismaPromise<GetUserRoleAggregateType<T>>

    /**
     * Group by UserRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserRoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserRoleGroupByArgs['orderBy'] }
        : { orderBy?: UserRoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserRoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserRole model
   */
  readonly fields: UserRoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserRole.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserRoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    role<T extends RoleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoleDefaultArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserRole model
   */
  interface UserRoleFieldRefs {
    readonly userId: FieldRef<"UserRole", 'String'>
    readonly roleId: FieldRef<"UserRole", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserRole findUnique
   */
  export type UserRoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole findUniqueOrThrow
   */
  export type UserRoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole findFirst
   */
  export type UserRoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRoles.
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRoles.
     */
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * UserRole findFirstOrThrow
   */
  export type UserRoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRoles.
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRoles.
     */
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * UserRole findMany
   */
  export type UserRoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRoles to fetch.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserRoles.
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * UserRole create
   */
  export type UserRoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * The data needed to create a UserRole.
     */
    data: XOR<UserRoleCreateInput, UserRoleUncheckedCreateInput>
  }

  /**
   * UserRole createMany
   */
  export type UserRoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserRoles.
     */
    data: UserRoleCreateManyInput | UserRoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserRole createManyAndReturn
   */
  export type UserRoleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * The data used to create many UserRoles.
     */
    data: UserRoleCreateManyInput | UserRoleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserRole update
   */
  export type UserRoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * The data needed to update a UserRole.
     */
    data: XOR<UserRoleUpdateInput, UserRoleUncheckedUpdateInput>
    /**
     * Choose, which UserRole to update.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole updateMany
   */
  export type UserRoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserRoles.
     */
    data: XOR<UserRoleUpdateManyMutationInput, UserRoleUncheckedUpdateManyInput>
    /**
     * Filter which UserRoles to update
     */
    where?: UserRoleWhereInput
    /**
     * Limit how many UserRoles to update.
     */
    limit?: number
  }

  /**
   * UserRole updateManyAndReturn
   */
  export type UserRoleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * The data used to update UserRoles.
     */
    data: XOR<UserRoleUpdateManyMutationInput, UserRoleUncheckedUpdateManyInput>
    /**
     * Filter which UserRoles to update
     */
    where?: UserRoleWhereInput
    /**
     * Limit how many UserRoles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserRole upsert
   */
  export type UserRoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * The filter to search for the UserRole to update in case it exists.
     */
    where: UserRoleWhereUniqueInput
    /**
     * In case the UserRole found by the `where` argument doesn't exist, create a new UserRole with this data.
     */
    create: XOR<UserRoleCreateInput, UserRoleUncheckedCreateInput>
    /**
     * In case the UserRole was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserRoleUpdateInput, UserRoleUncheckedUpdateInput>
  }

  /**
   * UserRole delete
   */
  export type UserRoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter which UserRole to delete.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole deleteMany
   */
  export type UserRoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserRoles to delete
     */
    where?: UserRoleWhereInput
    /**
     * Limit how many UserRoles to delete.
     */
    limit?: number
  }

  /**
   * UserRole without action
   */
  export type UserRoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
  }


  /**
   * Model UserPermission
   */

  export type AggregateUserPermission = {
    _count: UserPermissionCountAggregateOutputType | null
    _min: UserPermissionMinAggregateOutputType | null
    _max: UserPermissionMaxAggregateOutputType | null
  }

  export type UserPermissionMinAggregateOutputType = {
    userId: string | null
    permissionId: string | null
    granted: boolean | null
  }

  export type UserPermissionMaxAggregateOutputType = {
    userId: string | null
    permissionId: string | null
    granted: boolean | null
  }

  export type UserPermissionCountAggregateOutputType = {
    userId: number
    permissionId: number
    granted: number
    _all: number
  }


  export type UserPermissionMinAggregateInputType = {
    userId?: true
    permissionId?: true
    granted?: true
  }

  export type UserPermissionMaxAggregateInputType = {
    userId?: true
    permissionId?: true
    granted?: true
  }

  export type UserPermissionCountAggregateInputType = {
    userId?: true
    permissionId?: true
    granted?: true
    _all?: true
  }

  export type UserPermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPermission to aggregate.
     */
    where?: UserPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPermissions to fetch.
     */
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserPermissions
    **/
    _count?: true | UserPermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserPermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserPermissionMaxAggregateInputType
  }

  export type GetUserPermissionAggregateType<T extends UserPermissionAggregateArgs> = {
        [P in keyof T & keyof AggregateUserPermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserPermission[P]>
      : GetScalarType<T[P], AggregateUserPermission[P]>
  }




  export type UserPermissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPermissionWhereInput
    orderBy?: UserPermissionOrderByWithAggregationInput | UserPermissionOrderByWithAggregationInput[]
    by: UserPermissionScalarFieldEnum[] | UserPermissionScalarFieldEnum
    having?: UserPermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserPermissionCountAggregateInputType | true
    _min?: UserPermissionMinAggregateInputType
    _max?: UserPermissionMaxAggregateInputType
  }

  export type UserPermissionGroupByOutputType = {
    userId: string
    permissionId: string
    granted: boolean
    _count: UserPermissionCountAggregateOutputType | null
    _min: UserPermissionMinAggregateOutputType | null
    _max: UserPermissionMaxAggregateOutputType | null
  }

  type GetUserPermissionGroupByPayload<T extends UserPermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserPermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserPermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserPermissionGroupByOutputType[P]>
            : GetScalarType<T[P], UserPermissionGroupByOutputType[P]>
        }
      >
    >


  export type UserPermissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    permissionId?: boolean
    granted?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPermission"]>

  export type UserPermissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    permissionId?: boolean
    granted?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPermission"]>

  export type UserPermissionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    permissionId?: boolean
    granted?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPermission"]>

  export type UserPermissionSelectScalar = {
    userId?: boolean
    permissionId?: boolean
    granted?: boolean
  }

  export type UserPermissionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userId" | "permissionId" | "granted", ExtArgs["result"]["userPermission"]>
  export type UserPermissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }
  export type UserPermissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }
  export type UserPermissionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }

  export type $UserPermissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserPermission"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      permission: Prisma.$PermissionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      permissionId: string
      granted: boolean
    }, ExtArgs["result"]["userPermission"]>
    composites: {}
  }

  type UserPermissionGetPayload<S extends boolean | null | undefined | UserPermissionDefaultArgs> = $Result.GetResult<Prisma.$UserPermissionPayload, S>

  type UserPermissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserPermissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserPermissionCountAggregateInputType | true
    }

  export interface UserPermissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserPermission'], meta: { name: 'UserPermission' } }
    /**
     * Find zero or one UserPermission that matches the filter.
     * @param {UserPermissionFindUniqueArgs} args - Arguments to find a UserPermission
     * @example
     * // Get one UserPermission
     * const userPermission = await prisma.userPermission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserPermissionFindUniqueArgs>(args: SelectSubset<T, UserPermissionFindUniqueArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserPermission that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserPermissionFindUniqueOrThrowArgs} args - Arguments to find a UserPermission
     * @example
     * // Get one UserPermission
     * const userPermission = await prisma.userPermission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserPermissionFindUniqueOrThrowArgs>(args: SelectSubset<T, UserPermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserPermission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionFindFirstArgs} args - Arguments to find a UserPermission
     * @example
     * // Get one UserPermission
     * const userPermission = await prisma.userPermission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserPermissionFindFirstArgs>(args?: SelectSubset<T, UserPermissionFindFirstArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserPermission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionFindFirstOrThrowArgs} args - Arguments to find a UserPermission
     * @example
     * // Get one UserPermission
     * const userPermission = await prisma.userPermission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserPermissionFindFirstOrThrowArgs>(args?: SelectSubset<T, UserPermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserPermissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserPermissions
     * const userPermissions = await prisma.userPermission.findMany()
     * 
     * // Get first 10 UserPermissions
     * const userPermissions = await prisma.userPermission.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userPermissionWithUserIdOnly = await prisma.userPermission.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends UserPermissionFindManyArgs>(args?: SelectSubset<T, UserPermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserPermission.
     * @param {UserPermissionCreateArgs} args - Arguments to create a UserPermission.
     * @example
     * // Create one UserPermission
     * const UserPermission = await prisma.userPermission.create({
     *   data: {
     *     // ... data to create a UserPermission
     *   }
     * })
     * 
     */
    create<T extends UserPermissionCreateArgs>(args: SelectSubset<T, UserPermissionCreateArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserPermissions.
     * @param {UserPermissionCreateManyArgs} args - Arguments to create many UserPermissions.
     * @example
     * // Create many UserPermissions
     * const userPermission = await prisma.userPermission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserPermissionCreateManyArgs>(args?: SelectSubset<T, UserPermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserPermissions and returns the data saved in the database.
     * @param {UserPermissionCreateManyAndReturnArgs} args - Arguments to create many UserPermissions.
     * @example
     * // Create many UserPermissions
     * const userPermission = await prisma.userPermission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserPermissions and only return the `userId`
     * const userPermissionWithUserIdOnly = await prisma.userPermission.createManyAndReturn({
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserPermissionCreateManyAndReturnArgs>(args?: SelectSubset<T, UserPermissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserPermission.
     * @param {UserPermissionDeleteArgs} args - Arguments to delete one UserPermission.
     * @example
     * // Delete one UserPermission
     * const UserPermission = await prisma.userPermission.delete({
     *   where: {
     *     // ... filter to delete one UserPermission
     *   }
     * })
     * 
     */
    delete<T extends UserPermissionDeleteArgs>(args: SelectSubset<T, UserPermissionDeleteArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserPermission.
     * @param {UserPermissionUpdateArgs} args - Arguments to update one UserPermission.
     * @example
     * // Update one UserPermission
     * const userPermission = await prisma.userPermission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserPermissionUpdateArgs>(args: SelectSubset<T, UserPermissionUpdateArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserPermissions.
     * @param {UserPermissionDeleteManyArgs} args - Arguments to filter UserPermissions to delete.
     * @example
     * // Delete a few UserPermissions
     * const { count } = await prisma.userPermission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserPermissionDeleteManyArgs>(args?: SelectSubset<T, UserPermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserPermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserPermissions
     * const userPermission = await prisma.userPermission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserPermissionUpdateManyArgs>(args: SelectSubset<T, UserPermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserPermissions and returns the data updated in the database.
     * @param {UserPermissionUpdateManyAndReturnArgs} args - Arguments to update many UserPermissions.
     * @example
     * // Update many UserPermissions
     * const userPermission = await prisma.userPermission.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserPermissions and only return the `userId`
     * const userPermissionWithUserIdOnly = await prisma.userPermission.updateManyAndReturn({
     *   select: { userId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserPermissionUpdateManyAndReturnArgs>(args: SelectSubset<T, UserPermissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserPermission.
     * @param {UserPermissionUpsertArgs} args - Arguments to update or create a UserPermission.
     * @example
     * // Update or create a UserPermission
     * const userPermission = await prisma.userPermission.upsert({
     *   create: {
     *     // ... data to create a UserPermission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserPermission we want to update
     *   }
     * })
     */
    upsert<T extends UserPermissionUpsertArgs>(args: SelectSubset<T, UserPermissionUpsertArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserPermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionCountArgs} args - Arguments to filter UserPermissions to count.
     * @example
     * // Count the number of UserPermissions
     * const count = await prisma.userPermission.count({
     *   where: {
     *     // ... the filter for the UserPermissions we want to count
     *   }
     * })
    **/
    count<T extends UserPermissionCountArgs>(
      args?: Subset<T, UserPermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserPermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserPermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserPermissionAggregateArgs>(args: Subset<T, UserPermissionAggregateArgs>): Prisma.PrismaPromise<GetUserPermissionAggregateType<T>>

    /**
     * Group by UserPermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserPermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserPermissionGroupByArgs['orderBy'] }
        : { orderBy?: UserPermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserPermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserPermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserPermission model
   */
  readonly fields: UserPermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserPermission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserPermissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    permission<T extends PermissionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PermissionDefaultArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserPermission model
   */
  interface UserPermissionFieldRefs {
    readonly userId: FieldRef<"UserPermission", 'String'>
    readonly permissionId: FieldRef<"UserPermission", 'String'>
    readonly granted: FieldRef<"UserPermission", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * UserPermission findUnique
   */
  export type UserPermissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermission to fetch.
     */
    where: UserPermissionWhereUniqueInput
  }

  /**
   * UserPermission findUniqueOrThrow
   */
  export type UserPermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermission to fetch.
     */
    where: UserPermissionWhereUniqueInput
  }

  /**
   * UserPermission findFirst
   */
  export type UserPermissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermission to fetch.
     */
    where?: UserPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPermissions to fetch.
     */
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPermissions.
     */
    cursor?: UserPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPermissions.
     */
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }

  /**
   * UserPermission findFirstOrThrow
   */
  export type UserPermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermission to fetch.
     */
    where?: UserPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPermissions to fetch.
     */
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPermissions.
     */
    cursor?: UserPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPermissions.
     */
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }

  /**
   * UserPermission findMany
   */
  export type UserPermissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermissions to fetch.
     */
    where?: UserPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPermissions to fetch.
     */
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserPermissions.
     */
    cursor?: UserPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPermissions.
     */
    skip?: number
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }

  /**
   * UserPermission create
   */
  export type UserPermissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a UserPermission.
     */
    data: XOR<UserPermissionCreateInput, UserPermissionUncheckedCreateInput>
  }

  /**
   * UserPermission createMany
   */
  export type UserPermissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserPermissions.
     */
    data: UserPermissionCreateManyInput | UserPermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserPermission createManyAndReturn
   */
  export type UserPermissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * The data used to create many UserPermissions.
     */
    data: UserPermissionCreateManyInput | UserPermissionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserPermission update
   */
  export type UserPermissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a UserPermission.
     */
    data: XOR<UserPermissionUpdateInput, UserPermissionUncheckedUpdateInput>
    /**
     * Choose, which UserPermission to update.
     */
    where: UserPermissionWhereUniqueInput
  }

  /**
   * UserPermission updateMany
   */
  export type UserPermissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserPermissions.
     */
    data: XOR<UserPermissionUpdateManyMutationInput, UserPermissionUncheckedUpdateManyInput>
    /**
     * Filter which UserPermissions to update
     */
    where?: UserPermissionWhereInput
    /**
     * Limit how many UserPermissions to update.
     */
    limit?: number
  }

  /**
   * UserPermission updateManyAndReturn
   */
  export type UserPermissionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * The data used to update UserPermissions.
     */
    data: XOR<UserPermissionUpdateManyMutationInput, UserPermissionUncheckedUpdateManyInput>
    /**
     * Filter which UserPermissions to update
     */
    where?: UserPermissionWhereInput
    /**
     * Limit how many UserPermissions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserPermission upsert
   */
  export type UserPermissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the UserPermission to update in case it exists.
     */
    where: UserPermissionWhereUniqueInput
    /**
     * In case the UserPermission found by the `where` argument doesn't exist, create a new UserPermission with this data.
     */
    create: XOR<UserPermissionCreateInput, UserPermissionUncheckedCreateInput>
    /**
     * In case the UserPermission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserPermissionUpdateInput, UserPermissionUncheckedUpdateInput>
  }

  /**
   * UserPermission delete
   */
  export type UserPermissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter which UserPermission to delete.
     */
    where: UserPermissionWhereUniqueInput
  }

  /**
   * UserPermission deleteMany
   */
  export type UserPermissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPermissions to delete
     */
    where?: UserPermissionWhereInput
    /**
     * Limit how many UserPermissions to delete.
     */
    limit?: number
  }

  /**
   * UserPermission without action
   */
  export type UserPermissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ExamBoardScalarFieldEnum: {
    id: 'id',
    slug: 'slug',
    name: 'name'
  };

  export type ExamBoardScalarFieldEnum = (typeof ExamBoardScalarFieldEnum)[keyof typeof ExamBoardScalarFieldEnum]


  export const ExamEditionScalarFieldEnum: {
    id: 'id',
    examBoardId: 'examBoardId',
    year: 'year',
    editionLabel: 'editionLabel',
    notes: 'notes'
  };

  export type ExamEditionScalarFieldEnum = (typeof ExamEditionScalarFieldEnum)[keyof typeof ExamEditionScalarFieldEnum]


  export const ExamPhaseScalarFieldEnum: {
    id: 'id',
    examEditionId: 'examEditionId',
    phaseNumber: 'phaseNumber',
    dayNumber: 'dayNumber',
    subjectBlock: 'subjectBlock',
    questionCountExpected: 'questionCountExpected',
    defaultOptionCount: 'defaultOptionCount',
    isDiscursive: 'isDiscursive'
  };

  export type ExamPhaseScalarFieldEnum = (typeof ExamPhaseScalarFieldEnum)[keyof typeof ExamPhaseScalarFieldEnum]


  export const SubjectScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug'
  };

  export type SubjectScalarFieldEnum = (typeof SubjectScalarFieldEnum)[keyof typeof SubjectScalarFieldEnum]


  export const SkillScalarFieldEnum: {
    id: 'id',
    code: 'code',
    label: 'label'
  };

  export type SkillScalarFieldEnum = (typeof SkillScalarFieldEnum)[keyof typeof SkillScalarFieldEnum]


  export const StimulusScalarFieldEnum: {
    id: 'id',
    contentHtml: 'contentHtml',
    contentText: 'contentText',
    sourceRef: 'sourceRef'
  };

  export type StimulusScalarFieldEnum = (typeof StimulusScalarFieldEnum)[keyof typeof StimulusScalarFieldEnum]


  export const StimulusAssetScalarFieldEnum: {
    id: 'id',
    stimulusId: 'stimulusId',
    storageKey: 'storageKey',
    caption: 'caption',
    pageHint: 'pageHint'
  };

  export type StimulusAssetScalarFieldEnum = (typeof StimulusAssetScalarFieldEnum)[keyof typeof StimulusAssetScalarFieldEnum]


  export const QuestionScalarFieldEnum: {
    id: 'id',
    examPhaseId: 'examPhaseId',
    stimulusId: 'stimulusId',
    numberLabel: 'numberLabel',
    isDiscursive: 'isDiscursive',
    difficulty: 'difficulty',
    status: 'status',
    sourcePageStart: 'sourcePageStart',
    sourcePageEnd: 'sourcePageEnd',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type QuestionScalarFieldEnum = (typeof QuestionScalarFieldEnum)[keyof typeof QuestionScalarFieldEnum]


  export const QuestionSubjectScalarFieldEnum: {
    questionId: 'questionId',
    subjectId: 'subjectId'
  };

  export type QuestionSubjectScalarFieldEnum = (typeof QuestionSubjectScalarFieldEnum)[keyof typeof QuestionSubjectScalarFieldEnum]


  export const QuestionSkillScalarFieldEnum: {
    questionId: 'questionId',
    skillId: 'skillId'
  };

  export type QuestionSkillScalarFieldEnum = (typeof QuestionSkillScalarFieldEnum)[keyof typeof QuestionSkillScalarFieldEnum]


  export const McqItemScalarFieldEnum: {
    questionId: 'questionId',
    shuffleOptions: 'shuffleOptions',
    optionCount: 'optionCount',
    correctOptionKey: 'correctOptionKey'
  };

  export type McqItemScalarFieldEnum = (typeof McqItemScalarFieldEnum)[keyof typeof McqItemScalarFieldEnum]


  export const McqOptionScalarFieldEnum: {
    id: 'id',
    questionId: 'questionId',
    label: 'label',
    textHtml: 'textHtml',
    textPlain: 'textPlain'
  };

  export type McqOptionScalarFieldEnum = (typeof McqOptionScalarFieldEnum)[keyof typeof McqOptionScalarFieldEnum]


  export const FrItemScalarFieldEnum: {
    questionId: 'questionId',
    answerGuidanceHtml: 'answerGuidanceHtml',
    maxScore: 'maxScore'
  };

  export type FrItemScalarFieldEnum = (typeof FrItemScalarFieldEnum)[keyof typeof FrItemScalarFieldEnum]


  export const FrAnswerExpectedScalarFieldEnum: {
    id: 'id',
    frItemId: 'frItemId',
    label: 'label',
    answerHtml: 'answerHtml',
    maxScore: 'maxScore'
  };

  export type FrAnswerExpectedScalarFieldEnum = (typeof FrAnswerExpectedScalarFieldEnum)[keyof typeof FrAnswerExpectedScalarFieldEnum]


  export const FrRubricScalarFieldEnum: {
    id: 'id',
    questionId: 'questionId',
    criterion: 'criterion',
    levelsJson: 'levelsJson'
  };

  export type FrRubricScalarFieldEnum = (typeof FrRubricScalarFieldEnum)[keyof typeof FrRubricScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    emailVerified: 'emailVerified',
    image: 'image',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    role: 'role',
    banned: 'banned',
    banReason: 'banReason',
    banExpires: 'banExpires'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    expiresAt: 'expiresAt',
    token: 'token',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    userId: 'userId',
    impersonatedBy: 'impersonatedBy'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    id: 'id',
    accountId: 'accountId',
    providerId: 'providerId',
    userId: 'userId',
    accessToken: 'accessToken',
    refreshToken: 'refreshToken',
    idToken: 'idToken',
    accessTokenExpiresAt: 'accessTokenExpiresAt',
    refreshTokenExpiresAt: 'refreshTokenExpiresAt',
    scope: 'scope',
    password: 'password',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const VerificationScalarFieldEnum: {
    id: 'id',
    identifier: 'identifier',
    value: 'value',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type VerificationScalarFieldEnum = (typeof VerificationScalarFieldEnum)[keyof typeof VerificationScalarFieldEnum]


  export const RoleScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


  export const PermissionScalarFieldEnum: {
    id: 'id',
    resource: 'resource',
    action: 'action',
    key: 'key',
    isActive: 'isActive'
  };

  export type PermissionScalarFieldEnum = (typeof PermissionScalarFieldEnum)[keyof typeof PermissionScalarFieldEnum]


  export const RolePermissionScalarFieldEnum: {
    roleId: 'roleId',
    permissionId: 'permissionId',
    granted: 'granted'
  };

  export type RolePermissionScalarFieldEnum = (typeof RolePermissionScalarFieldEnum)[keyof typeof RolePermissionScalarFieldEnum]


  export const UserRoleScalarFieldEnum: {
    userId: 'userId',
    roleId: 'roleId'
  };

  export type UserRoleScalarFieldEnum = (typeof UserRoleScalarFieldEnum)[keyof typeof UserRoleScalarFieldEnum]


  export const UserPermissionScalarFieldEnum: {
    userId: 'userId',
    permissionId: 'permissionId',
    granted: 'granted'
  };

  export type UserPermissionScalarFieldEnum = (typeof UserPermissionScalarFieldEnum)[keyof typeof UserPermissionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Difficulty'
   */
  export type EnumDifficultyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Difficulty'>
    


  /**
   * Reference to a field of type 'Difficulty[]'
   */
  export type ListEnumDifficultyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Difficulty[]'>
    


  /**
   * Reference to a field of type 'QuestionStatus'
   */
  export type EnumQuestionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QuestionStatus'>
    


  /**
   * Reference to a field of type 'QuestionStatus[]'
   */
  export type ListEnumQuestionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QuestionStatus[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'OptionKey'
   */
  export type EnumOptionKeyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OptionKey'>
    


  /**
   * Reference to a field of type 'OptionKey[]'
   */
  export type ListEnumOptionKeyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OptionKey[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type ExamBoardWhereInput = {
    AND?: ExamBoardWhereInput | ExamBoardWhereInput[]
    OR?: ExamBoardWhereInput[]
    NOT?: ExamBoardWhereInput | ExamBoardWhereInput[]
    id?: IntFilter<"ExamBoard"> | number
    slug?: StringFilter<"ExamBoard"> | string
    name?: StringFilter<"ExamBoard"> | string
    editions?: ExamEditionListRelationFilter
  }

  export type ExamBoardOrderByWithRelationInput = {
    id?: SortOrder
    slug?: SortOrder
    name?: SortOrder
    editions?: ExamEditionOrderByRelationAggregateInput
  }

  export type ExamBoardWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    slug?: string
    AND?: ExamBoardWhereInput | ExamBoardWhereInput[]
    OR?: ExamBoardWhereInput[]
    NOT?: ExamBoardWhereInput | ExamBoardWhereInput[]
    name?: StringFilter<"ExamBoard"> | string
    editions?: ExamEditionListRelationFilter
  }, "id" | "slug">

  export type ExamBoardOrderByWithAggregationInput = {
    id?: SortOrder
    slug?: SortOrder
    name?: SortOrder
    _count?: ExamBoardCountOrderByAggregateInput
    _avg?: ExamBoardAvgOrderByAggregateInput
    _max?: ExamBoardMaxOrderByAggregateInput
    _min?: ExamBoardMinOrderByAggregateInput
    _sum?: ExamBoardSumOrderByAggregateInput
  }

  export type ExamBoardScalarWhereWithAggregatesInput = {
    AND?: ExamBoardScalarWhereWithAggregatesInput | ExamBoardScalarWhereWithAggregatesInput[]
    OR?: ExamBoardScalarWhereWithAggregatesInput[]
    NOT?: ExamBoardScalarWhereWithAggregatesInput | ExamBoardScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ExamBoard"> | number
    slug?: StringWithAggregatesFilter<"ExamBoard"> | string
    name?: StringWithAggregatesFilter<"ExamBoard"> | string
  }

  export type ExamEditionWhereInput = {
    AND?: ExamEditionWhereInput | ExamEditionWhereInput[]
    OR?: ExamEditionWhereInput[]
    NOT?: ExamEditionWhereInput | ExamEditionWhereInput[]
    id?: IntFilter<"ExamEdition"> | number
    examBoardId?: IntFilter<"ExamEdition"> | number
    year?: IntFilter<"ExamEdition"> | number
    editionLabel?: StringFilter<"ExamEdition"> | string
    notes?: StringNullableFilter<"ExamEdition"> | string | null
    board?: XOR<ExamBoardScalarRelationFilter, ExamBoardWhereInput>
    phases?: ExamPhaseListRelationFilter
  }

  export type ExamEditionOrderByWithRelationInput = {
    id?: SortOrder
    examBoardId?: SortOrder
    year?: SortOrder
    editionLabel?: SortOrder
    notes?: SortOrderInput | SortOrder
    board?: ExamBoardOrderByWithRelationInput
    phases?: ExamPhaseOrderByRelationAggregateInput
  }

  export type ExamEditionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    examBoardId_year_editionLabel?: ExamEditionExamBoardIdYearEditionLabelCompoundUniqueInput
    AND?: ExamEditionWhereInput | ExamEditionWhereInput[]
    OR?: ExamEditionWhereInput[]
    NOT?: ExamEditionWhereInput | ExamEditionWhereInput[]
    examBoardId?: IntFilter<"ExamEdition"> | number
    year?: IntFilter<"ExamEdition"> | number
    editionLabel?: StringFilter<"ExamEdition"> | string
    notes?: StringNullableFilter<"ExamEdition"> | string | null
    board?: XOR<ExamBoardScalarRelationFilter, ExamBoardWhereInput>
    phases?: ExamPhaseListRelationFilter
  }, "id" | "examBoardId_year_editionLabel">

  export type ExamEditionOrderByWithAggregationInput = {
    id?: SortOrder
    examBoardId?: SortOrder
    year?: SortOrder
    editionLabel?: SortOrder
    notes?: SortOrderInput | SortOrder
    _count?: ExamEditionCountOrderByAggregateInput
    _avg?: ExamEditionAvgOrderByAggregateInput
    _max?: ExamEditionMaxOrderByAggregateInput
    _min?: ExamEditionMinOrderByAggregateInput
    _sum?: ExamEditionSumOrderByAggregateInput
  }

  export type ExamEditionScalarWhereWithAggregatesInput = {
    AND?: ExamEditionScalarWhereWithAggregatesInput | ExamEditionScalarWhereWithAggregatesInput[]
    OR?: ExamEditionScalarWhereWithAggregatesInput[]
    NOT?: ExamEditionScalarWhereWithAggregatesInput | ExamEditionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ExamEdition"> | number
    examBoardId?: IntWithAggregatesFilter<"ExamEdition"> | number
    year?: IntWithAggregatesFilter<"ExamEdition"> | number
    editionLabel?: StringWithAggregatesFilter<"ExamEdition"> | string
    notes?: StringNullableWithAggregatesFilter<"ExamEdition"> | string | null
  }

  export type ExamPhaseWhereInput = {
    AND?: ExamPhaseWhereInput | ExamPhaseWhereInput[]
    OR?: ExamPhaseWhereInput[]
    NOT?: ExamPhaseWhereInput | ExamPhaseWhereInput[]
    id?: IntFilter<"ExamPhase"> | number
    examEditionId?: IntFilter<"ExamPhase"> | number
    phaseNumber?: IntFilter<"ExamPhase"> | number
    dayNumber?: IntNullableFilter<"ExamPhase"> | number | null
    subjectBlock?: StringNullableFilter<"ExamPhase"> | string | null
    questionCountExpected?: IntNullableFilter<"ExamPhase"> | number | null
    defaultOptionCount?: IntNullableFilter<"ExamPhase"> | number | null
    isDiscursive?: BoolFilter<"ExamPhase"> | boolean
    edition?: XOR<ExamEditionScalarRelationFilter, ExamEditionWhereInput>
    questions?: QuestionListRelationFilter
  }

  export type ExamPhaseOrderByWithRelationInput = {
    id?: SortOrder
    examEditionId?: SortOrder
    phaseNumber?: SortOrder
    dayNumber?: SortOrderInput | SortOrder
    subjectBlock?: SortOrderInput | SortOrder
    questionCountExpected?: SortOrderInput | SortOrder
    defaultOptionCount?: SortOrderInput | SortOrder
    isDiscursive?: SortOrder
    edition?: ExamEditionOrderByWithRelationInput
    questions?: QuestionOrderByRelationAggregateInput
  }

  export type ExamPhaseWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    examEditionId_phaseNumber_dayNumber?: ExamPhaseExamEditionIdPhaseNumberDayNumberCompoundUniqueInput
    AND?: ExamPhaseWhereInput | ExamPhaseWhereInput[]
    OR?: ExamPhaseWhereInput[]
    NOT?: ExamPhaseWhereInput | ExamPhaseWhereInput[]
    examEditionId?: IntFilter<"ExamPhase"> | number
    phaseNumber?: IntFilter<"ExamPhase"> | number
    dayNumber?: IntNullableFilter<"ExamPhase"> | number | null
    subjectBlock?: StringNullableFilter<"ExamPhase"> | string | null
    questionCountExpected?: IntNullableFilter<"ExamPhase"> | number | null
    defaultOptionCount?: IntNullableFilter<"ExamPhase"> | number | null
    isDiscursive?: BoolFilter<"ExamPhase"> | boolean
    edition?: XOR<ExamEditionScalarRelationFilter, ExamEditionWhereInput>
    questions?: QuestionListRelationFilter
  }, "id" | "examEditionId_phaseNumber_dayNumber">

  export type ExamPhaseOrderByWithAggregationInput = {
    id?: SortOrder
    examEditionId?: SortOrder
    phaseNumber?: SortOrder
    dayNumber?: SortOrderInput | SortOrder
    subjectBlock?: SortOrderInput | SortOrder
    questionCountExpected?: SortOrderInput | SortOrder
    defaultOptionCount?: SortOrderInput | SortOrder
    isDiscursive?: SortOrder
    _count?: ExamPhaseCountOrderByAggregateInput
    _avg?: ExamPhaseAvgOrderByAggregateInput
    _max?: ExamPhaseMaxOrderByAggregateInput
    _min?: ExamPhaseMinOrderByAggregateInput
    _sum?: ExamPhaseSumOrderByAggregateInput
  }

  export type ExamPhaseScalarWhereWithAggregatesInput = {
    AND?: ExamPhaseScalarWhereWithAggregatesInput | ExamPhaseScalarWhereWithAggregatesInput[]
    OR?: ExamPhaseScalarWhereWithAggregatesInput[]
    NOT?: ExamPhaseScalarWhereWithAggregatesInput | ExamPhaseScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ExamPhase"> | number
    examEditionId?: IntWithAggregatesFilter<"ExamPhase"> | number
    phaseNumber?: IntWithAggregatesFilter<"ExamPhase"> | number
    dayNumber?: IntNullableWithAggregatesFilter<"ExamPhase"> | number | null
    subjectBlock?: StringNullableWithAggregatesFilter<"ExamPhase"> | string | null
    questionCountExpected?: IntNullableWithAggregatesFilter<"ExamPhase"> | number | null
    defaultOptionCount?: IntNullableWithAggregatesFilter<"ExamPhase"> | number | null
    isDiscursive?: BoolWithAggregatesFilter<"ExamPhase"> | boolean
  }

  export type SubjectWhereInput = {
    AND?: SubjectWhereInput | SubjectWhereInput[]
    OR?: SubjectWhereInput[]
    NOT?: SubjectWhereInput | SubjectWhereInput[]
    id?: IntFilter<"Subject"> | number
    name?: StringFilter<"Subject"> | string
    slug?: StringFilter<"Subject"> | string
    questions?: QuestionSubjectListRelationFilter
  }

  export type SubjectOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    questions?: QuestionSubjectOrderByRelationAggregateInput
  }

  export type SubjectWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    slug?: string
    AND?: SubjectWhereInput | SubjectWhereInput[]
    OR?: SubjectWhereInput[]
    NOT?: SubjectWhereInput | SubjectWhereInput[]
    name?: StringFilter<"Subject"> | string
    questions?: QuestionSubjectListRelationFilter
  }, "id" | "slug">

  export type SubjectOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    _count?: SubjectCountOrderByAggregateInput
    _avg?: SubjectAvgOrderByAggregateInput
    _max?: SubjectMaxOrderByAggregateInput
    _min?: SubjectMinOrderByAggregateInput
    _sum?: SubjectSumOrderByAggregateInput
  }

  export type SubjectScalarWhereWithAggregatesInput = {
    AND?: SubjectScalarWhereWithAggregatesInput | SubjectScalarWhereWithAggregatesInput[]
    OR?: SubjectScalarWhereWithAggregatesInput[]
    NOT?: SubjectScalarWhereWithAggregatesInput | SubjectScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Subject"> | number
    name?: StringWithAggregatesFilter<"Subject"> | string
    slug?: StringWithAggregatesFilter<"Subject"> | string
  }

  export type SkillWhereInput = {
    AND?: SkillWhereInput | SkillWhereInput[]
    OR?: SkillWhereInput[]
    NOT?: SkillWhereInput | SkillWhereInput[]
    id?: IntFilter<"Skill"> | number
    code?: StringNullableFilter<"Skill"> | string | null
    label?: StringFilter<"Skill"> | string
    questions?: QuestionSkillListRelationFilter
  }

  export type SkillOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrderInput | SortOrder
    label?: SortOrder
    questions?: QuestionSkillOrderByRelationAggregateInput
  }

  export type SkillWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    code?: string
    AND?: SkillWhereInput | SkillWhereInput[]
    OR?: SkillWhereInput[]
    NOT?: SkillWhereInput | SkillWhereInput[]
    label?: StringFilter<"Skill"> | string
    questions?: QuestionSkillListRelationFilter
  }, "id" | "code">

  export type SkillOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrderInput | SortOrder
    label?: SortOrder
    _count?: SkillCountOrderByAggregateInput
    _avg?: SkillAvgOrderByAggregateInput
    _max?: SkillMaxOrderByAggregateInput
    _min?: SkillMinOrderByAggregateInput
    _sum?: SkillSumOrderByAggregateInput
  }

  export type SkillScalarWhereWithAggregatesInput = {
    AND?: SkillScalarWhereWithAggregatesInput | SkillScalarWhereWithAggregatesInput[]
    OR?: SkillScalarWhereWithAggregatesInput[]
    NOT?: SkillScalarWhereWithAggregatesInput | SkillScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Skill"> | number
    code?: StringNullableWithAggregatesFilter<"Skill"> | string | null
    label?: StringWithAggregatesFilter<"Skill"> | string
  }

  export type StimulusWhereInput = {
    AND?: StimulusWhereInput | StimulusWhereInput[]
    OR?: StimulusWhereInput[]
    NOT?: StimulusWhereInput | StimulusWhereInput[]
    id?: IntFilter<"Stimulus"> | number
    contentHtml?: StringNullableFilter<"Stimulus"> | string | null
    contentText?: StringNullableFilter<"Stimulus"> | string | null
    sourceRef?: StringNullableFilter<"Stimulus"> | string | null
    assets?: StimulusAssetListRelationFilter
    questions?: QuestionListRelationFilter
  }

  export type StimulusOrderByWithRelationInput = {
    id?: SortOrder
    contentHtml?: SortOrderInput | SortOrder
    contentText?: SortOrderInput | SortOrder
    sourceRef?: SortOrderInput | SortOrder
    assets?: StimulusAssetOrderByRelationAggregateInput
    questions?: QuestionOrderByRelationAggregateInput
  }

  export type StimulusWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: StimulusWhereInput | StimulusWhereInput[]
    OR?: StimulusWhereInput[]
    NOT?: StimulusWhereInput | StimulusWhereInput[]
    contentHtml?: StringNullableFilter<"Stimulus"> | string | null
    contentText?: StringNullableFilter<"Stimulus"> | string | null
    sourceRef?: StringNullableFilter<"Stimulus"> | string | null
    assets?: StimulusAssetListRelationFilter
    questions?: QuestionListRelationFilter
  }, "id">

  export type StimulusOrderByWithAggregationInput = {
    id?: SortOrder
    contentHtml?: SortOrderInput | SortOrder
    contentText?: SortOrderInput | SortOrder
    sourceRef?: SortOrderInput | SortOrder
    _count?: StimulusCountOrderByAggregateInput
    _avg?: StimulusAvgOrderByAggregateInput
    _max?: StimulusMaxOrderByAggregateInput
    _min?: StimulusMinOrderByAggregateInput
    _sum?: StimulusSumOrderByAggregateInput
  }

  export type StimulusScalarWhereWithAggregatesInput = {
    AND?: StimulusScalarWhereWithAggregatesInput | StimulusScalarWhereWithAggregatesInput[]
    OR?: StimulusScalarWhereWithAggregatesInput[]
    NOT?: StimulusScalarWhereWithAggregatesInput | StimulusScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Stimulus"> | number
    contentHtml?: StringNullableWithAggregatesFilter<"Stimulus"> | string | null
    contentText?: StringNullableWithAggregatesFilter<"Stimulus"> | string | null
    sourceRef?: StringNullableWithAggregatesFilter<"Stimulus"> | string | null
  }

  export type StimulusAssetWhereInput = {
    AND?: StimulusAssetWhereInput | StimulusAssetWhereInput[]
    OR?: StimulusAssetWhereInput[]
    NOT?: StimulusAssetWhereInput | StimulusAssetWhereInput[]
    id?: IntFilter<"StimulusAsset"> | number
    stimulusId?: IntFilter<"StimulusAsset"> | number
    storageKey?: StringFilter<"StimulusAsset"> | string
    caption?: StringNullableFilter<"StimulusAsset"> | string | null
    pageHint?: IntNullableFilter<"StimulusAsset"> | number | null
    stimulus?: XOR<StimulusScalarRelationFilter, StimulusWhereInput>
  }

  export type StimulusAssetOrderByWithRelationInput = {
    id?: SortOrder
    stimulusId?: SortOrder
    storageKey?: SortOrder
    caption?: SortOrderInput | SortOrder
    pageHint?: SortOrderInput | SortOrder
    stimulus?: StimulusOrderByWithRelationInput
  }

  export type StimulusAssetWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: StimulusAssetWhereInput | StimulusAssetWhereInput[]
    OR?: StimulusAssetWhereInput[]
    NOT?: StimulusAssetWhereInput | StimulusAssetWhereInput[]
    stimulusId?: IntFilter<"StimulusAsset"> | number
    storageKey?: StringFilter<"StimulusAsset"> | string
    caption?: StringNullableFilter<"StimulusAsset"> | string | null
    pageHint?: IntNullableFilter<"StimulusAsset"> | number | null
    stimulus?: XOR<StimulusScalarRelationFilter, StimulusWhereInput>
  }, "id">

  export type StimulusAssetOrderByWithAggregationInput = {
    id?: SortOrder
    stimulusId?: SortOrder
    storageKey?: SortOrder
    caption?: SortOrderInput | SortOrder
    pageHint?: SortOrderInput | SortOrder
    _count?: StimulusAssetCountOrderByAggregateInput
    _avg?: StimulusAssetAvgOrderByAggregateInput
    _max?: StimulusAssetMaxOrderByAggregateInput
    _min?: StimulusAssetMinOrderByAggregateInput
    _sum?: StimulusAssetSumOrderByAggregateInput
  }

  export type StimulusAssetScalarWhereWithAggregatesInput = {
    AND?: StimulusAssetScalarWhereWithAggregatesInput | StimulusAssetScalarWhereWithAggregatesInput[]
    OR?: StimulusAssetScalarWhereWithAggregatesInput[]
    NOT?: StimulusAssetScalarWhereWithAggregatesInput | StimulusAssetScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"StimulusAsset"> | number
    stimulusId?: IntWithAggregatesFilter<"StimulusAsset"> | number
    storageKey?: StringWithAggregatesFilter<"StimulusAsset"> | string
    caption?: StringNullableWithAggregatesFilter<"StimulusAsset"> | string | null
    pageHint?: IntNullableWithAggregatesFilter<"StimulusAsset"> | number | null
  }

  export type QuestionWhereInput = {
    AND?: QuestionWhereInput | QuestionWhereInput[]
    OR?: QuestionWhereInput[]
    NOT?: QuestionWhereInput | QuestionWhereInput[]
    id?: IntFilter<"Question"> | number
    examPhaseId?: IntFilter<"Question"> | number
    stimulusId?: IntNullableFilter<"Question"> | number | null
    numberLabel?: StringFilter<"Question"> | string
    isDiscursive?: BoolFilter<"Question"> | boolean
    difficulty?: EnumDifficultyNullableFilter<"Question"> | $Enums.Difficulty | null
    status?: EnumQuestionStatusFilter<"Question"> | $Enums.QuestionStatus
    sourcePageStart?: IntNullableFilter<"Question"> | number | null
    sourcePageEnd?: IntNullableFilter<"Question"> | number | null
    createdAt?: DateTimeFilter<"Question"> | Date | string
    updatedAt?: DateTimeFilter<"Question"> | Date | string
    phase?: XOR<ExamPhaseScalarRelationFilter, ExamPhaseWhereInput>
    stimulus?: XOR<StimulusNullableScalarRelationFilter, StimulusWhereInput> | null
    subjects?: QuestionSubjectListRelationFilter
    skills?: QuestionSkillListRelationFilter
    mcq?: XOR<McqItemNullableScalarRelationFilter, McqItemWhereInput> | null
    fr?: XOR<FrItemNullableScalarRelationFilter, FrItemWhereInput> | null
  }

  export type QuestionOrderByWithRelationInput = {
    id?: SortOrder
    examPhaseId?: SortOrder
    stimulusId?: SortOrderInput | SortOrder
    numberLabel?: SortOrder
    isDiscursive?: SortOrder
    difficulty?: SortOrderInput | SortOrder
    status?: SortOrder
    sourcePageStart?: SortOrderInput | SortOrder
    sourcePageEnd?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    phase?: ExamPhaseOrderByWithRelationInput
    stimulus?: StimulusOrderByWithRelationInput
    subjects?: QuestionSubjectOrderByRelationAggregateInput
    skills?: QuestionSkillOrderByRelationAggregateInput
    mcq?: McqItemOrderByWithRelationInput
    fr?: FrItemOrderByWithRelationInput
  }

  export type QuestionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    examPhaseId_numberLabel?: QuestionExamPhaseIdNumberLabelCompoundUniqueInput
    AND?: QuestionWhereInput | QuestionWhereInput[]
    OR?: QuestionWhereInput[]
    NOT?: QuestionWhereInput | QuestionWhereInput[]
    examPhaseId?: IntFilter<"Question"> | number
    stimulusId?: IntNullableFilter<"Question"> | number | null
    numberLabel?: StringFilter<"Question"> | string
    isDiscursive?: BoolFilter<"Question"> | boolean
    difficulty?: EnumDifficultyNullableFilter<"Question"> | $Enums.Difficulty | null
    status?: EnumQuestionStatusFilter<"Question"> | $Enums.QuestionStatus
    sourcePageStart?: IntNullableFilter<"Question"> | number | null
    sourcePageEnd?: IntNullableFilter<"Question"> | number | null
    createdAt?: DateTimeFilter<"Question"> | Date | string
    updatedAt?: DateTimeFilter<"Question"> | Date | string
    phase?: XOR<ExamPhaseScalarRelationFilter, ExamPhaseWhereInput>
    stimulus?: XOR<StimulusNullableScalarRelationFilter, StimulusWhereInput> | null
    subjects?: QuestionSubjectListRelationFilter
    skills?: QuestionSkillListRelationFilter
    mcq?: XOR<McqItemNullableScalarRelationFilter, McqItemWhereInput> | null
    fr?: XOR<FrItemNullableScalarRelationFilter, FrItemWhereInput> | null
  }, "id" | "examPhaseId_numberLabel">

  export type QuestionOrderByWithAggregationInput = {
    id?: SortOrder
    examPhaseId?: SortOrder
    stimulusId?: SortOrderInput | SortOrder
    numberLabel?: SortOrder
    isDiscursive?: SortOrder
    difficulty?: SortOrderInput | SortOrder
    status?: SortOrder
    sourcePageStart?: SortOrderInput | SortOrder
    sourcePageEnd?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: QuestionCountOrderByAggregateInput
    _avg?: QuestionAvgOrderByAggregateInput
    _max?: QuestionMaxOrderByAggregateInput
    _min?: QuestionMinOrderByAggregateInput
    _sum?: QuestionSumOrderByAggregateInput
  }

  export type QuestionScalarWhereWithAggregatesInput = {
    AND?: QuestionScalarWhereWithAggregatesInput | QuestionScalarWhereWithAggregatesInput[]
    OR?: QuestionScalarWhereWithAggregatesInput[]
    NOT?: QuestionScalarWhereWithAggregatesInput | QuestionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Question"> | number
    examPhaseId?: IntWithAggregatesFilter<"Question"> | number
    stimulusId?: IntNullableWithAggregatesFilter<"Question"> | number | null
    numberLabel?: StringWithAggregatesFilter<"Question"> | string
    isDiscursive?: BoolWithAggregatesFilter<"Question"> | boolean
    difficulty?: EnumDifficultyNullableWithAggregatesFilter<"Question"> | $Enums.Difficulty | null
    status?: EnumQuestionStatusWithAggregatesFilter<"Question"> | $Enums.QuestionStatus
    sourcePageStart?: IntNullableWithAggregatesFilter<"Question"> | number | null
    sourcePageEnd?: IntNullableWithAggregatesFilter<"Question"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Question"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Question"> | Date | string
  }

  export type QuestionSubjectWhereInput = {
    AND?: QuestionSubjectWhereInput | QuestionSubjectWhereInput[]
    OR?: QuestionSubjectWhereInput[]
    NOT?: QuestionSubjectWhereInput | QuestionSubjectWhereInput[]
    questionId?: IntFilter<"QuestionSubject"> | number
    subjectId?: IntFilter<"QuestionSubject"> | number
    question?: XOR<QuestionScalarRelationFilter, QuestionWhereInput>
    subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
  }

  export type QuestionSubjectOrderByWithRelationInput = {
    questionId?: SortOrder
    subjectId?: SortOrder
    question?: QuestionOrderByWithRelationInput
    subject?: SubjectOrderByWithRelationInput
  }

  export type QuestionSubjectWhereUniqueInput = Prisma.AtLeast<{
    questionId_subjectId?: QuestionSubjectQuestionIdSubjectIdCompoundUniqueInput
    AND?: QuestionSubjectWhereInput | QuestionSubjectWhereInput[]
    OR?: QuestionSubjectWhereInput[]
    NOT?: QuestionSubjectWhereInput | QuestionSubjectWhereInput[]
    questionId?: IntFilter<"QuestionSubject"> | number
    subjectId?: IntFilter<"QuestionSubject"> | number
    question?: XOR<QuestionScalarRelationFilter, QuestionWhereInput>
    subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
  }, "questionId_subjectId">

  export type QuestionSubjectOrderByWithAggregationInput = {
    questionId?: SortOrder
    subjectId?: SortOrder
    _count?: QuestionSubjectCountOrderByAggregateInput
    _avg?: QuestionSubjectAvgOrderByAggregateInput
    _max?: QuestionSubjectMaxOrderByAggregateInput
    _min?: QuestionSubjectMinOrderByAggregateInput
    _sum?: QuestionSubjectSumOrderByAggregateInput
  }

  export type QuestionSubjectScalarWhereWithAggregatesInput = {
    AND?: QuestionSubjectScalarWhereWithAggregatesInput | QuestionSubjectScalarWhereWithAggregatesInput[]
    OR?: QuestionSubjectScalarWhereWithAggregatesInput[]
    NOT?: QuestionSubjectScalarWhereWithAggregatesInput | QuestionSubjectScalarWhereWithAggregatesInput[]
    questionId?: IntWithAggregatesFilter<"QuestionSubject"> | number
    subjectId?: IntWithAggregatesFilter<"QuestionSubject"> | number
  }

  export type QuestionSkillWhereInput = {
    AND?: QuestionSkillWhereInput | QuestionSkillWhereInput[]
    OR?: QuestionSkillWhereInput[]
    NOT?: QuestionSkillWhereInput | QuestionSkillWhereInput[]
    questionId?: IntFilter<"QuestionSkill"> | number
    skillId?: IntFilter<"QuestionSkill"> | number
    question?: XOR<QuestionScalarRelationFilter, QuestionWhereInput>
    skill?: XOR<SkillScalarRelationFilter, SkillWhereInput>
  }

  export type QuestionSkillOrderByWithRelationInput = {
    questionId?: SortOrder
    skillId?: SortOrder
    question?: QuestionOrderByWithRelationInput
    skill?: SkillOrderByWithRelationInput
  }

  export type QuestionSkillWhereUniqueInput = Prisma.AtLeast<{
    questionId_skillId?: QuestionSkillQuestionIdSkillIdCompoundUniqueInput
    AND?: QuestionSkillWhereInput | QuestionSkillWhereInput[]
    OR?: QuestionSkillWhereInput[]
    NOT?: QuestionSkillWhereInput | QuestionSkillWhereInput[]
    questionId?: IntFilter<"QuestionSkill"> | number
    skillId?: IntFilter<"QuestionSkill"> | number
    question?: XOR<QuestionScalarRelationFilter, QuestionWhereInput>
    skill?: XOR<SkillScalarRelationFilter, SkillWhereInput>
  }, "questionId_skillId">

  export type QuestionSkillOrderByWithAggregationInput = {
    questionId?: SortOrder
    skillId?: SortOrder
    _count?: QuestionSkillCountOrderByAggregateInput
    _avg?: QuestionSkillAvgOrderByAggregateInput
    _max?: QuestionSkillMaxOrderByAggregateInput
    _min?: QuestionSkillMinOrderByAggregateInput
    _sum?: QuestionSkillSumOrderByAggregateInput
  }

  export type QuestionSkillScalarWhereWithAggregatesInput = {
    AND?: QuestionSkillScalarWhereWithAggregatesInput | QuestionSkillScalarWhereWithAggregatesInput[]
    OR?: QuestionSkillScalarWhereWithAggregatesInput[]
    NOT?: QuestionSkillScalarWhereWithAggregatesInput | QuestionSkillScalarWhereWithAggregatesInput[]
    questionId?: IntWithAggregatesFilter<"QuestionSkill"> | number
    skillId?: IntWithAggregatesFilter<"QuestionSkill"> | number
  }

  export type McqItemWhereInput = {
    AND?: McqItemWhereInput | McqItemWhereInput[]
    OR?: McqItemWhereInput[]
    NOT?: McqItemWhereInput | McqItemWhereInput[]
    questionId?: IntFilter<"McqItem"> | number
    shuffleOptions?: BoolFilter<"McqItem"> | boolean
    optionCount?: IntFilter<"McqItem"> | number
    correctOptionKey?: EnumOptionKeyFilter<"McqItem"> | $Enums.OptionKey
    question?: XOR<QuestionScalarRelationFilter, QuestionWhereInput>
    options?: McqOptionListRelationFilter
  }

  export type McqItemOrderByWithRelationInput = {
    questionId?: SortOrder
    shuffleOptions?: SortOrder
    optionCount?: SortOrder
    correctOptionKey?: SortOrder
    question?: QuestionOrderByWithRelationInput
    options?: McqOptionOrderByRelationAggregateInput
  }

  export type McqItemWhereUniqueInput = Prisma.AtLeast<{
    questionId?: number
    AND?: McqItemWhereInput | McqItemWhereInput[]
    OR?: McqItemWhereInput[]
    NOT?: McqItemWhereInput | McqItemWhereInput[]
    shuffleOptions?: BoolFilter<"McqItem"> | boolean
    optionCount?: IntFilter<"McqItem"> | number
    correctOptionKey?: EnumOptionKeyFilter<"McqItem"> | $Enums.OptionKey
    question?: XOR<QuestionScalarRelationFilter, QuestionWhereInput>
    options?: McqOptionListRelationFilter
  }, "questionId">

  export type McqItemOrderByWithAggregationInput = {
    questionId?: SortOrder
    shuffleOptions?: SortOrder
    optionCount?: SortOrder
    correctOptionKey?: SortOrder
    _count?: McqItemCountOrderByAggregateInput
    _avg?: McqItemAvgOrderByAggregateInput
    _max?: McqItemMaxOrderByAggregateInput
    _min?: McqItemMinOrderByAggregateInput
    _sum?: McqItemSumOrderByAggregateInput
  }

  export type McqItemScalarWhereWithAggregatesInput = {
    AND?: McqItemScalarWhereWithAggregatesInput | McqItemScalarWhereWithAggregatesInput[]
    OR?: McqItemScalarWhereWithAggregatesInput[]
    NOT?: McqItemScalarWhereWithAggregatesInput | McqItemScalarWhereWithAggregatesInput[]
    questionId?: IntWithAggregatesFilter<"McqItem"> | number
    shuffleOptions?: BoolWithAggregatesFilter<"McqItem"> | boolean
    optionCount?: IntWithAggregatesFilter<"McqItem"> | number
    correctOptionKey?: EnumOptionKeyWithAggregatesFilter<"McqItem"> | $Enums.OptionKey
  }

  export type McqOptionWhereInput = {
    AND?: McqOptionWhereInput | McqOptionWhereInput[]
    OR?: McqOptionWhereInput[]
    NOT?: McqOptionWhereInput | McqOptionWhereInput[]
    id?: IntFilter<"McqOption"> | number
    questionId?: IntFilter<"McqOption"> | number
    label?: EnumOptionKeyFilter<"McqOption"> | $Enums.OptionKey
    textHtml?: StringNullableFilter<"McqOption"> | string | null
    textPlain?: StringNullableFilter<"McqOption"> | string | null
    mcq?: XOR<McqItemScalarRelationFilter, McqItemWhereInput>
  }

  export type McqOptionOrderByWithRelationInput = {
    id?: SortOrder
    questionId?: SortOrder
    label?: SortOrder
    textHtml?: SortOrderInput | SortOrder
    textPlain?: SortOrderInput | SortOrder
    mcq?: McqItemOrderByWithRelationInput
  }

  export type McqOptionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    questionId_label?: McqOptionQuestionIdLabelCompoundUniqueInput
    AND?: McqOptionWhereInput | McqOptionWhereInput[]
    OR?: McqOptionWhereInput[]
    NOT?: McqOptionWhereInput | McqOptionWhereInput[]
    questionId?: IntFilter<"McqOption"> | number
    label?: EnumOptionKeyFilter<"McqOption"> | $Enums.OptionKey
    textHtml?: StringNullableFilter<"McqOption"> | string | null
    textPlain?: StringNullableFilter<"McqOption"> | string | null
    mcq?: XOR<McqItemScalarRelationFilter, McqItemWhereInput>
  }, "id" | "questionId_label">

  export type McqOptionOrderByWithAggregationInput = {
    id?: SortOrder
    questionId?: SortOrder
    label?: SortOrder
    textHtml?: SortOrderInput | SortOrder
    textPlain?: SortOrderInput | SortOrder
    _count?: McqOptionCountOrderByAggregateInput
    _avg?: McqOptionAvgOrderByAggregateInput
    _max?: McqOptionMaxOrderByAggregateInput
    _min?: McqOptionMinOrderByAggregateInput
    _sum?: McqOptionSumOrderByAggregateInput
  }

  export type McqOptionScalarWhereWithAggregatesInput = {
    AND?: McqOptionScalarWhereWithAggregatesInput | McqOptionScalarWhereWithAggregatesInput[]
    OR?: McqOptionScalarWhereWithAggregatesInput[]
    NOT?: McqOptionScalarWhereWithAggregatesInput | McqOptionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"McqOption"> | number
    questionId?: IntWithAggregatesFilter<"McqOption"> | number
    label?: EnumOptionKeyWithAggregatesFilter<"McqOption"> | $Enums.OptionKey
    textHtml?: StringNullableWithAggregatesFilter<"McqOption"> | string | null
    textPlain?: StringNullableWithAggregatesFilter<"McqOption"> | string | null
  }

  export type FrItemWhereInput = {
    AND?: FrItemWhereInput | FrItemWhereInput[]
    OR?: FrItemWhereInput[]
    NOT?: FrItemWhereInput | FrItemWhereInput[]
    questionId?: IntFilter<"FrItem"> | number
    answerGuidanceHtml?: StringNullableFilter<"FrItem"> | string | null
    maxScore?: DecimalNullableFilter<"FrItem"> | Decimal | DecimalJsLike | number | string | null
    question?: XOR<QuestionScalarRelationFilter, QuestionWhereInput>
    rubrics?: FrRubricListRelationFilter
    expectedAnswers?: FrAnswerExpectedListRelationFilter
  }

  export type FrItemOrderByWithRelationInput = {
    questionId?: SortOrder
    answerGuidanceHtml?: SortOrderInput | SortOrder
    maxScore?: SortOrderInput | SortOrder
    question?: QuestionOrderByWithRelationInput
    rubrics?: FrRubricOrderByRelationAggregateInput
    expectedAnswers?: FrAnswerExpectedOrderByRelationAggregateInput
  }

  export type FrItemWhereUniqueInput = Prisma.AtLeast<{
    questionId?: number
    AND?: FrItemWhereInput | FrItemWhereInput[]
    OR?: FrItemWhereInput[]
    NOT?: FrItemWhereInput | FrItemWhereInput[]
    answerGuidanceHtml?: StringNullableFilter<"FrItem"> | string | null
    maxScore?: DecimalNullableFilter<"FrItem"> | Decimal | DecimalJsLike | number | string | null
    question?: XOR<QuestionScalarRelationFilter, QuestionWhereInput>
    rubrics?: FrRubricListRelationFilter
    expectedAnswers?: FrAnswerExpectedListRelationFilter
  }, "questionId">

  export type FrItemOrderByWithAggregationInput = {
    questionId?: SortOrder
    answerGuidanceHtml?: SortOrderInput | SortOrder
    maxScore?: SortOrderInput | SortOrder
    _count?: FrItemCountOrderByAggregateInput
    _avg?: FrItemAvgOrderByAggregateInput
    _max?: FrItemMaxOrderByAggregateInput
    _min?: FrItemMinOrderByAggregateInput
    _sum?: FrItemSumOrderByAggregateInput
  }

  export type FrItemScalarWhereWithAggregatesInput = {
    AND?: FrItemScalarWhereWithAggregatesInput | FrItemScalarWhereWithAggregatesInput[]
    OR?: FrItemScalarWhereWithAggregatesInput[]
    NOT?: FrItemScalarWhereWithAggregatesInput | FrItemScalarWhereWithAggregatesInput[]
    questionId?: IntWithAggregatesFilter<"FrItem"> | number
    answerGuidanceHtml?: StringNullableWithAggregatesFilter<"FrItem"> | string | null
    maxScore?: DecimalNullableWithAggregatesFilter<"FrItem"> | Decimal | DecimalJsLike | number | string | null
  }

  export type FrAnswerExpectedWhereInput = {
    AND?: FrAnswerExpectedWhereInput | FrAnswerExpectedWhereInput[]
    OR?: FrAnswerExpectedWhereInput[]
    NOT?: FrAnswerExpectedWhereInput | FrAnswerExpectedWhereInput[]
    id?: IntFilter<"FrAnswerExpected"> | number
    frItemId?: IntFilter<"FrAnswerExpected"> | number
    label?: StringNullableFilter<"FrAnswerExpected"> | string | null
    answerHtml?: StringNullableFilter<"FrAnswerExpected"> | string | null
    maxScore?: DecimalNullableFilter<"FrAnswerExpected"> | Decimal | DecimalJsLike | number | string | null
    frItem?: XOR<FrItemScalarRelationFilter, FrItemWhereInput>
  }

  export type FrAnswerExpectedOrderByWithRelationInput = {
    id?: SortOrder
    frItemId?: SortOrder
    label?: SortOrderInput | SortOrder
    answerHtml?: SortOrderInput | SortOrder
    maxScore?: SortOrderInput | SortOrder
    frItem?: FrItemOrderByWithRelationInput
  }

  export type FrAnswerExpectedWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FrAnswerExpectedWhereInput | FrAnswerExpectedWhereInput[]
    OR?: FrAnswerExpectedWhereInput[]
    NOT?: FrAnswerExpectedWhereInput | FrAnswerExpectedWhereInput[]
    frItemId?: IntFilter<"FrAnswerExpected"> | number
    label?: StringNullableFilter<"FrAnswerExpected"> | string | null
    answerHtml?: StringNullableFilter<"FrAnswerExpected"> | string | null
    maxScore?: DecimalNullableFilter<"FrAnswerExpected"> | Decimal | DecimalJsLike | number | string | null
    frItem?: XOR<FrItemScalarRelationFilter, FrItemWhereInput>
  }, "id">

  export type FrAnswerExpectedOrderByWithAggregationInput = {
    id?: SortOrder
    frItemId?: SortOrder
    label?: SortOrderInput | SortOrder
    answerHtml?: SortOrderInput | SortOrder
    maxScore?: SortOrderInput | SortOrder
    _count?: FrAnswerExpectedCountOrderByAggregateInput
    _avg?: FrAnswerExpectedAvgOrderByAggregateInput
    _max?: FrAnswerExpectedMaxOrderByAggregateInput
    _min?: FrAnswerExpectedMinOrderByAggregateInput
    _sum?: FrAnswerExpectedSumOrderByAggregateInput
  }

  export type FrAnswerExpectedScalarWhereWithAggregatesInput = {
    AND?: FrAnswerExpectedScalarWhereWithAggregatesInput | FrAnswerExpectedScalarWhereWithAggregatesInput[]
    OR?: FrAnswerExpectedScalarWhereWithAggregatesInput[]
    NOT?: FrAnswerExpectedScalarWhereWithAggregatesInput | FrAnswerExpectedScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FrAnswerExpected"> | number
    frItemId?: IntWithAggregatesFilter<"FrAnswerExpected"> | number
    label?: StringNullableWithAggregatesFilter<"FrAnswerExpected"> | string | null
    answerHtml?: StringNullableWithAggregatesFilter<"FrAnswerExpected"> | string | null
    maxScore?: DecimalNullableWithAggregatesFilter<"FrAnswerExpected"> | Decimal | DecimalJsLike | number | string | null
  }

  export type FrRubricWhereInput = {
    AND?: FrRubricWhereInput | FrRubricWhereInput[]
    OR?: FrRubricWhereInput[]
    NOT?: FrRubricWhereInput | FrRubricWhereInput[]
    id?: IntFilter<"FrRubric"> | number
    questionId?: IntFilter<"FrRubric"> | number
    criterion?: StringFilter<"FrRubric"> | string
    levelsJson?: JsonFilter<"FrRubric">
    fr?: XOR<FrItemScalarRelationFilter, FrItemWhereInput>
  }

  export type FrRubricOrderByWithRelationInput = {
    id?: SortOrder
    questionId?: SortOrder
    criterion?: SortOrder
    levelsJson?: SortOrder
    fr?: FrItemOrderByWithRelationInput
  }

  export type FrRubricWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FrRubricWhereInput | FrRubricWhereInput[]
    OR?: FrRubricWhereInput[]
    NOT?: FrRubricWhereInput | FrRubricWhereInput[]
    questionId?: IntFilter<"FrRubric"> | number
    criterion?: StringFilter<"FrRubric"> | string
    levelsJson?: JsonFilter<"FrRubric">
    fr?: XOR<FrItemScalarRelationFilter, FrItemWhereInput>
  }, "id">

  export type FrRubricOrderByWithAggregationInput = {
    id?: SortOrder
    questionId?: SortOrder
    criterion?: SortOrder
    levelsJson?: SortOrder
    _count?: FrRubricCountOrderByAggregateInput
    _avg?: FrRubricAvgOrderByAggregateInput
    _max?: FrRubricMaxOrderByAggregateInput
    _min?: FrRubricMinOrderByAggregateInput
    _sum?: FrRubricSumOrderByAggregateInput
  }

  export type FrRubricScalarWhereWithAggregatesInput = {
    AND?: FrRubricScalarWhereWithAggregatesInput | FrRubricScalarWhereWithAggregatesInput[]
    OR?: FrRubricScalarWhereWithAggregatesInput[]
    NOT?: FrRubricScalarWhereWithAggregatesInput | FrRubricScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FrRubric"> | number
    questionId?: IntWithAggregatesFilter<"FrRubric"> | number
    criterion?: StringWithAggregatesFilter<"FrRubric"> | string
    levelsJson?: JsonWithAggregatesFilter<"FrRubric">
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    emailVerified?: BoolFilter<"User"> | boolean
    image?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    role?: StringNullableFilter<"User"> | string | null
    banned?: BoolNullableFilter<"User"> | boolean | null
    banReason?: StringNullableFilter<"User"> | string | null
    banExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    sessions?: SessionListRelationFilter
    accounts?: AccountListRelationFilter
    roles?: UserRoleListRelationFilter
    directPerms?: UserPermissionListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    role?: SortOrderInput | SortOrder
    banned?: SortOrderInput | SortOrder
    banReason?: SortOrderInput | SortOrder
    banExpires?: SortOrderInput | SortOrder
    sessions?: SessionOrderByRelationAggregateInput
    accounts?: AccountOrderByRelationAggregateInput
    roles?: UserRoleOrderByRelationAggregateInput
    directPerms?: UserPermissionOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    emailVerified?: BoolFilter<"User"> | boolean
    image?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    role?: StringNullableFilter<"User"> | string | null
    banned?: BoolNullableFilter<"User"> | boolean | null
    banReason?: StringNullableFilter<"User"> | string | null
    banExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    sessions?: SessionListRelationFilter
    accounts?: AccountListRelationFilter
    roles?: UserRoleListRelationFilter
    directPerms?: UserPermissionListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    role?: SortOrderInput | SortOrder
    banned?: SortOrderInput | SortOrder
    banReason?: SortOrderInput | SortOrder
    banExpires?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    emailVerified?: BoolWithAggregatesFilter<"User"> | boolean
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    role?: StringNullableWithAggregatesFilter<"User"> | string | null
    banned?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
    banReason?: StringNullableWithAggregatesFilter<"User"> | string | null
    banExpires?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    token?: StringFilter<"Session"> | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    ipAddress?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    userId?: StringFilter<"Session"> | string
    impersonatedBy?: StringNullableFilter<"Session"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    userId?: SortOrder
    impersonatedBy?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    ipAddress?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    userId?: StringFilter<"Session"> | string
    impersonatedBy?: StringNullableFilter<"Session"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "token">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    userId?: SortOrder
    impersonatedBy?: SortOrderInput | SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    token?: StringWithAggregatesFilter<"Session"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    ipAddress?: StringNullableWithAggregatesFilter<"Session"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"Session"> | string | null
    userId?: StringWithAggregatesFilter<"Session"> | string
    impersonatedBy?: StringNullableWithAggregatesFilter<"Session"> | string | null
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    accountId?: StringFilter<"Account"> | string
    providerId?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    accessToken?: StringNullableFilter<"Account"> | string | null
    refreshToken?: StringNullableFilter<"Account"> | string | null
    idToken?: StringNullableFilter<"Account"> | string | null
    accessTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    password?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrderInput | SortOrder
    refreshToken?: SortOrderInput | SortOrder
    idToken?: SortOrderInput | SortOrder
    accessTokenExpiresAt?: SortOrderInput | SortOrder
    refreshTokenExpiresAt?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    accountId?: StringFilter<"Account"> | string
    providerId?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    accessToken?: StringNullableFilter<"Account"> | string | null
    refreshToken?: StringNullableFilter<"Account"> | string | null
    idToken?: StringNullableFilter<"Account"> | string | null
    accessTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    password?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrderInput | SortOrder
    refreshToken?: SortOrderInput | SortOrder
    idToken?: SortOrderInput | SortOrder
    accessTokenExpiresAt?: SortOrderInput | SortOrder
    refreshTokenExpiresAt?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AccountCountOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    accountId?: StringWithAggregatesFilter<"Account"> | string
    providerId?: StringWithAggregatesFilter<"Account"> | string
    userId?: StringWithAggregatesFilter<"Account"> | string
    accessToken?: StringNullableWithAggregatesFilter<"Account"> | string | null
    refreshToken?: StringNullableWithAggregatesFilter<"Account"> | string | null
    idToken?: StringNullableWithAggregatesFilter<"Account"> | string | null
    accessTokenExpiresAt?: DateTimeNullableWithAggregatesFilter<"Account"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableWithAggregatesFilter<"Account"> | Date | string | null
    scope?: StringNullableWithAggregatesFilter<"Account"> | string | null
    password?: StringNullableWithAggregatesFilter<"Account"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
  }

  export type VerificationWhereInput = {
    AND?: VerificationWhereInput | VerificationWhereInput[]
    OR?: VerificationWhereInput[]
    NOT?: VerificationWhereInput | VerificationWhereInput[]
    id?: StringFilter<"Verification"> | string
    identifier?: StringFilter<"Verification"> | string
    value?: StringFilter<"Verification"> | string
    expiresAt?: DateTimeFilter<"Verification"> | Date | string
    createdAt?: DateTimeFilter<"Verification"> | Date | string
    updatedAt?: DateTimeFilter<"Verification"> | Date | string
  }

  export type VerificationOrderByWithRelationInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VerificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: VerificationWhereInput | VerificationWhereInput[]
    OR?: VerificationWhereInput[]
    NOT?: VerificationWhereInput | VerificationWhereInput[]
    identifier?: StringFilter<"Verification"> | string
    value?: StringFilter<"Verification"> | string
    expiresAt?: DateTimeFilter<"Verification"> | Date | string
    createdAt?: DateTimeFilter<"Verification"> | Date | string
    updatedAt?: DateTimeFilter<"Verification"> | Date | string
  }, "id">

  export type VerificationOrderByWithAggregationInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: VerificationCountOrderByAggregateInput
    _max?: VerificationMaxOrderByAggregateInput
    _min?: VerificationMinOrderByAggregateInput
  }

  export type VerificationScalarWhereWithAggregatesInput = {
    AND?: VerificationScalarWhereWithAggregatesInput | VerificationScalarWhereWithAggregatesInput[]
    OR?: VerificationScalarWhereWithAggregatesInput[]
    NOT?: VerificationScalarWhereWithAggregatesInput | VerificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Verification"> | string
    identifier?: StringWithAggregatesFilter<"Verification"> | string
    value?: StringWithAggregatesFilter<"Verification"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"Verification"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Verification"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Verification"> | Date | string
  }

  export type RoleWhereInput = {
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    id?: StringFilter<"Role"> | string
    name?: StringFilter<"Role"> | string
    description?: StringNullableFilter<"Role"> | string | null
    isActive?: BoolFilter<"Role"> | boolean
    createdAt?: DateTimeFilter<"Role"> | Date | string
    updatedAt?: DateTimeFilter<"Role"> | Date | string
    users?: UserRoleListRelationFilter
    perms?: RolePermissionListRelationFilter
  }

  export type RoleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    users?: UserRoleOrderByRelationAggregateInput
    perms?: RolePermissionOrderByRelationAggregateInput
  }

  export type RoleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    description?: StringNullableFilter<"Role"> | string | null
    isActive?: BoolFilter<"Role"> | boolean
    createdAt?: DateTimeFilter<"Role"> | Date | string
    updatedAt?: DateTimeFilter<"Role"> | Date | string
    users?: UserRoleListRelationFilter
    perms?: RolePermissionListRelationFilter
  }, "id" | "name">

  export type RoleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RoleCountOrderByAggregateInput
    _max?: RoleMaxOrderByAggregateInput
    _min?: RoleMinOrderByAggregateInput
  }

  export type RoleScalarWhereWithAggregatesInput = {
    AND?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    OR?: RoleScalarWhereWithAggregatesInput[]
    NOT?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Role"> | string
    name?: StringWithAggregatesFilter<"Role"> | string
    description?: StringNullableWithAggregatesFilter<"Role"> | string | null
    isActive?: BoolWithAggregatesFilter<"Role"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Role"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Role"> | Date | string
  }

  export type PermissionWhereInput = {
    AND?: PermissionWhereInput | PermissionWhereInput[]
    OR?: PermissionWhereInput[]
    NOT?: PermissionWhereInput | PermissionWhereInput[]
    id?: StringFilter<"Permission"> | string
    resource?: StringFilter<"Permission"> | string
    action?: StringFilter<"Permission"> | string
    key?: StringFilter<"Permission"> | string
    isActive?: BoolFilter<"Permission"> | boolean
    roles?: RolePermissionListRelationFilter
    users?: UserPermissionListRelationFilter
  }

  export type PermissionOrderByWithRelationInput = {
    id?: SortOrder
    resource?: SortOrder
    action?: SortOrder
    key?: SortOrder
    isActive?: SortOrder
    roles?: RolePermissionOrderByRelationAggregateInput
    users?: UserPermissionOrderByRelationAggregateInput
  }

  export type PermissionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    key?: string
    AND?: PermissionWhereInput | PermissionWhereInput[]
    OR?: PermissionWhereInput[]
    NOT?: PermissionWhereInput | PermissionWhereInput[]
    resource?: StringFilter<"Permission"> | string
    action?: StringFilter<"Permission"> | string
    isActive?: BoolFilter<"Permission"> | boolean
    roles?: RolePermissionListRelationFilter
    users?: UserPermissionListRelationFilter
  }, "id" | "key">

  export type PermissionOrderByWithAggregationInput = {
    id?: SortOrder
    resource?: SortOrder
    action?: SortOrder
    key?: SortOrder
    isActive?: SortOrder
    _count?: PermissionCountOrderByAggregateInput
    _max?: PermissionMaxOrderByAggregateInput
    _min?: PermissionMinOrderByAggregateInput
  }

  export type PermissionScalarWhereWithAggregatesInput = {
    AND?: PermissionScalarWhereWithAggregatesInput | PermissionScalarWhereWithAggregatesInput[]
    OR?: PermissionScalarWhereWithAggregatesInput[]
    NOT?: PermissionScalarWhereWithAggregatesInput | PermissionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Permission"> | string
    resource?: StringWithAggregatesFilter<"Permission"> | string
    action?: StringWithAggregatesFilter<"Permission"> | string
    key?: StringWithAggregatesFilter<"Permission"> | string
    isActive?: BoolWithAggregatesFilter<"Permission"> | boolean
  }

  export type RolePermissionWhereInput = {
    AND?: RolePermissionWhereInput | RolePermissionWhereInput[]
    OR?: RolePermissionWhereInput[]
    NOT?: RolePermissionWhereInput | RolePermissionWhereInput[]
    roleId?: StringFilter<"RolePermission"> | string
    permissionId?: StringFilter<"RolePermission"> | string
    granted?: BoolFilter<"RolePermission"> | boolean
    role?: XOR<RoleScalarRelationFilter, RoleWhereInput>
    permission?: XOR<PermissionScalarRelationFilter, PermissionWhereInput>
  }

  export type RolePermissionOrderByWithRelationInput = {
    roleId?: SortOrder
    permissionId?: SortOrder
    granted?: SortOrder
    role?: RoleOrderByWithRelationInput
    permission?: PermissionOrderByWithRelationInput
  }

  export type RolePermissionWhereUniqueInput = Prisma.AtLeast<{
    roleId_permissionId?: RolePermissionRoleIdPermissionIdCompoundUniqueInput
    AND?: RolePermissionWhereInput | RolePermissionWhereInput[]
    OR?: RolePermissionWhereInput[]
    NOT?: RolePermissionWhereInput | RolePermissionWhereInput[]
    roleId?: StringFilter<"RolePermission"> | string
    permissionId?: StringFilter<"RolePermission"> | string
    granted?: BoolFilter<"RolePermission"> | boolean
    role?: XOR<RoleScalarRelationFilter, RoleWhereInput>
    permission?: XOR<PermissionScalarRelationFilter, PermissionWhereInput>
  }, "roleId_permissionId">

  export type RolePermissionOrderByWithAggregationInput = {
    roleId?: SortOrder
    permissionId?: SortOrder
    granted?: SortOrder
    _count?: RolePermissionCountOrderByAggregateInput
    _max?: RolePermissionMaxOrderByAggregateInput
    _min?: RolePermissionMinOrderByAggregateInput
  }

  export type RolePermissionScalarWhereWithAggregatesInput = {
    AND?: RolePermissionScalarWhereWithAggregatesInput | RolePermissionScalarWhereWithAggregatesInput[]
    OR?: RolePermissionScalarWhereWithAggregatesInput[]
    NOT?: RolePermissionScalarWhereWithAggregatesInput | RolePermissionScalarWhereWithAggregatesInput[]
    roleId?: StringWithAggregatesFilter<"RolePermission"> | string
    permissionId?: StringWithAggregatesFilter<"RolePermission"> | string
    granted?: BoolWithAggregatesFilter<"RolePermission"> | boolean
  }

  export type UserRoleWhereInput = {
    AND?: UserRoleWhereInput | UserRoleWhereInput[]
    OR?: UserRoleWhereInput[]
    NOT?: UserRoleWhereInput | UserRoleWhereInput[]
    userId?: StringFilter<"UserRole"> | string
    roleId?: StringFilter<"UserRole"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    role?: XOR<RoleScalarRelationFilter, RoleWhereInput>
  }

  export type UserRoleOrderByWithRelationInput = {
    userId?: SortOrder
    roleId?: SortOrder
    user?: UserOrderByWithRelationInput
    role?: RoleOrderByWithRelationInput
  }

  export type UserRoleWhereUniqueInput = Prisma.AtLeast<{
    userId_roleId?: UserRoleUserIdRoleIdCompoundUniqueInput
    AND?: UserRoleWhereInput | UserRoleWhereInput[]
    OR?: UserRoleWhereInput[]
    NOT?: UserRoleWhereInput | UserRoleWhereInput[]
    userId?: StringFilter<"UserRole"> | string
    roleId?: StringFilter<"UserRole"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    role?: XOR<RoleScalarRelationFilter, RoleWhereInput>
  }, "userId_roleId">

  export type UserRoleOrderByWithAggregationInput = {
    userId?: SortOrder
    roleId?: SortOrder
    _count?: UserRoleCountOrderByAggregateInput
    _max?: UserRoleMaxOrderByAggregateInput
    _min?: UserRoleMinOrderByAggregateInput
  }

  export type UserRoleScalarWhereWithAggregatesInput = {
    AND?: UserRoleScalarWhereWithAggregatesInput | UserRoleScalarWhereWithAggregatesInput[]
    OR?: UserRoleScalarWhereWithAggregatesInput[]
    NOT?: UserRoleScalarWhereWithAggregatesInput | UserRoleScalarWhereWithAggregatesInput[]
    userId?: StringWithAggregatesFilter<"UserRole"> | string
    roleId?: StringWithAggregatesFilter<"UserRole"> | string
  }

  export type UserPermissionWhereInput = {
    AND?: UserPermissionWhereInput | UserPermissionWhereInput[]
    OR?: UserPermissionWhereInput[]
    NOT?: UserPermissionWhereInput | UserPermissionWhereInput[]
    userId?: StringFilter<"UserPermission"> | string
    permissionId?: StringFilter<"UserPermission"> | string
    granted?: BoolFilter<"UserPermission"> | boolean
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    permission?: XOR<PermissionScalarRelationFilter, PermissionWhereInput>
  }

  export type UserPermissionOrderByWithRelationInput = {
    userId?: SortOrder
    permissionId?: SortOrder
    granted?: SortOrder
    user?: UserOrderByWithRelationInput
    permission?: PermissionOrderByWithRelationInput
  }

  export type UserPermissionWhereUniqueInput = Prisma.AtLeast<{
    userId_permissionId?: UserPermissionUserIdPermissionIdCompoundUniqueInput
    AND?: UserPermissionWhereInput | UserPermissionWhereInput[]
    OR?: UserPermissionWhereInput[]
    NOT?: UserPermissionWhereInput | UserPermissionWhereInput[]
    userId?: StringFilter<"UserPermission"> | string
    permissionId?: StringFilter<"UserPermission"> | string
    granted?: BoolFilter<"UserPermission"> | boolean
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    permission?: XOR<PermissionScalarRelationFilter, PermissionWhereInput>
  }, "userId_permissionId">

  export type UserPermissionOrderByWithAggregationInput = {
    userId?: SortOrder
    permissionId?: SortOrder
    granted?: SortOrder
    _count?: UserPermissionCountOrderByAggregateInput
    _max?: UserPermissionMaxOrderByAggregateInput
    _min?: UserPermissionMinOrderByAggregateInput
  }

  export type UserPermissionScalarWhereWithAggregatesInput = {
    AND?: UserPermissionScalarWhereWithAggregatesInput | UserPermissionScalarWhereWithAggregatesInput[]
    OR?: UserPermissionScalarWhereWithAggregatesInput[]
    NOT?: UserPermissionScalarWhereWithAggregatesInput | UserPermissionScalarWhereWithAggregatesInput[]
    userId?: StringWithAggregatesFilter<"UserPermission"> | string
    permissionId?: StringWithAggregatesFilter<"UserPermission"> | string
    granted?: BoolWithAggregatesFilter<"UserPermission"> | boolean
  }

  export type ExamBoardCreateInput = {
    slug: string
    name: string
    editions?: ExamEditionCreateNestedManyWithoutBoardInput
  }

  export type ExamBoardUncheckedCreateInput = {
    id?: number
    slug: string
    name: string
    editions?: ExamEditionUncheckedCreateNestedManyWithoutBoardInput
  }

  export type ExamBoardUpdateInput = {
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    editions?: ExamEditionUpdateManyWithoutBoardNestedInput
  }

  export type ExamBoardUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    editions?: ExamEditionUncheckedUpdateManyWithoutBoardNestedInput
  }

  export type ExamBoardCreateManyInput = {
    id?: number
    slug: string
    name: string
  }

  export type ExamBoardUpdateManyMutationInput = {
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ExamBoardUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ExamEditionCreateInput = {
    year: number
    editionLabel: string
    notes?: string | null
    board: ExamBoardCreateNestedOneWithoutEditionsInput
    phases?: ExamPhaseCreateNestedManyWithoutEditionInput
  }

  export type ExamEditionUncheckedCreateInput = {
    id?: number
    examBoardId: number
    year: number
    editionLabel: string
    notes?: string | null
    phases?: ExamPhaseUncheckedCreateNestedManyWithoutEditionInput
  }

  export type ExamEditionUpdateInput = {
    year?: IntFieldUpdateOperationsInput | number
    editionLabel?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    board?: ExamBoardUpdateOneRequiredWithoutEditionsNestedInput
    phases?: ExamPhaseUpdateManyWithoutEditionNestedInput
  }

  export type ExamEditionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    examBoardId?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    editionLabel?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    phases?: ExamPhaseUncheckedUpdateManyWithoutEditionNestedInput
  }

  export type ExamEditionCreateManyInput = {
    id?: number
    examBoardId: number
    year: number
    editionLabel: string
    notes?: string | null
  }

  export type ExamEditionUpdateManyMutationInput = {
    year?: IntFieldUpdateOperationsInput | number
    editionLabel?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ExamEditionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    examBoardId?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    editionLabel?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ExamPhaseCreateInput = {
    phaseNumber: number
    dayNumber?: number | null
    subjectBlock?: string | null
    questionCountExpected?: number | null
    defaultOptionCount?: number | null
    isDiscursive?: boolean
    edition: ExamEditionCreateNestedOneWithoutPhasesInput
    questions?: QuestionCreateNestedManyWithoutPhaseInput
  }

  export type ExamPhaseUncheckedCreateInput = {
    id?: number
    examEditionId: number
    phaseNumber: number
    dayNumber?: number | null
    subjectBlock?: string | null
    questionCountExpected?: number | null
    defaultOptionCount?: number | null
    isDiscursive?: boolean
    questions?: QuestionUncheckedCreateNestedManyWithoutPhaseInput
  }

  export type ExamPhaseUpdateInput = {
    phaseNumber?: IntFieldUpdateOperationsInput | number
    dayNumber?: NullableIntFieldUpdateOperationsInput | number | null
    subjectBlock?: NullableStringFieldUpdateOperationsInput | string | null
    questionCountExpected?: NullableIntFieldUpdateOperationsInput | number | null
    defaultOptionCount?: NullableIntFieldUpdateOperationsInput | number | null
    isDiscursive?: BoolFieldUpdateOperationsInput | boolean
    edition?: ExamEditionUpdateOneRequiredWithoutPhasesNestedInput
    questions?: QuestionUpdateManyWithoutPhaseNestedInput
  }

  export type ExamPhaseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    examEditionId?: IntFieldUpdateOperationsInput | number
    phaseNumber?: IntFieldUpdateOperationsInput | number
    dayNumber?: NullableIntFieldUpdateOperationsInput | number | null
    subjectBlock?: NullableStringFieldUpdateOperationsInput | string | null
    questionCountExpected?: NullableIntFieldUpdateOperationsInput | number | null
    defaultOptionCount?: NullableIntFieldUpdateOperationsInput | number | null
    isDiscursive?: BoolFieldUpdateOperationsInput | boolean
    questions?: QuestionUncheckedUpdateManyWithoutPhaseNestedInput
  }

  export type ExamPhaseCreateManyInput = {
    id?: number
    examEditionId: number
    phaseNumber: number
    dayNumber?: number | null
    subjectBlock?: string | null
    questionCountExpected?: number | null
    defaultOptionCount?: number | null
    isDiscursive?: boolean
  }

  export type ExamPhaseUpdateManyMutationInput = {
    phaseNumber?: IntFieldUpdateOperationsInput | number
    dayNumber?: NullableIntFieldUpdateOperationsInput | number | null
    subjectBlock?: NullableStringFieldUpdateOperationsInput | string | null
    questionCountExpected?: NullableIntFieldUpdateOperationsInput | number | null
    defaultOptionCount?: NullableIntFieldUpdateOperationsInput | number | null
    isDiscursive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ExamPhaseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    examEditionId?: IntFieldUpdateOperationsInput | number
    phaseNumber?: IntFieldUpdateOperationsInput | number
    dayNumber?: NullableIntFieldUpdateOperationsInput | number | null
    subjectBlock?: NullableStringFieldUpdateOperationsInput | string | null
    questionCountExpected?: NullableIntFieldUpdateOperationsInput | number | null
    defaultOptionCount?: NullableIntFieldUpdateOperationsInput | number | null
    isDiscursive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SubjectCreateInput = {
    name: string
    slug: string
    questions?: QuestionSubjectCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateInput = {
    id?: number
    name: string
    slug: string
    questions?: QuestionSubjectUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    questions?: QuestionSubjectUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    questions?: QuestionSubjectUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectCreateManyInput = {
    id?: number
    name: string
    slug: string
  }

  export type SubjectUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
  }

  export type SubjectUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
  }

  export type SkillCreateInput = {
    code?: string | null
    label: string
    questions?: QuestionSkillCreateNestedManyWithoutSkillInput
  }

  export type SkillUncheckedCreateInput = {
    id?: number
    code?: string | null
    label: string
    questions?: QuestionSkillUncheckedCreateNestedManyWithoutSkillInput
  }

  export type SkillUpdateInput = {
    code?: NullableStringFieldUpdateOperationsInput | string | null
    label?: StringFieldUpdateOperationsInput | string
    questions?: QuestionSkillUpdateManyWithoutSkillNestedInput
  }

  export type SkillUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: NullableStringFieldUpdateOperationsInput | string | null
    label?: StringFieldUpdateOperationsInput | string
    questions?: QuestionSkillUncheckedUpdateManyWithoutSkillNestedInput
  }

  export type SkillCreateManyInput = {
    id?: number
    code?: string | null
    label: string
  }

  export type SkillUpdateManyMutationInput = {
    code?: NullableStringFieldUpdateOperationsInput | string | null
    label?: StringFieldUpdateOperationsInput | string
  }

  export type SkillUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: NullableStringFieldUpdateOperationsInput | string | null
    label?: StringFieldUpdateOperationsInput | string
  }

  export type StimulusCreateInput = {
    contentHtml?: string | null
    contentText?: string | null
    sourceRef?: string | null
    assets?: StimulusAssetCreateNestedManyWithoutStimulusInput
    questions?: QuestionCreateNestedManyWithoutStimulusInput
  }

  export type StimulusUncheckedCreateInput = {
    id?: number
    contentHtml?: string | null
    contentText?: string | null
    sourceRef?: string | null
    assets?: StimulusAssetUncheckedCreateNestedManyWithoutStimulusInput
    questions?: QuestionUncheckedCreateNestedManyWithoutStimulusInput
  }

  export type StimulusUpdateInput = {
    contentHtml?: NullableStringFieldUpdateOperationsInput | string | null
    contentText?: NullableStringFieldUpdateOperationsInput | string | null
    sourceRef?: NullableStringFieldUpdateOperationsInput | string | null
    assets?: StimulusAssetUpdateManyWithoutStimulusNestedInput
    questions?: QuestionUpdateManyWithoutStimulusNestedInput
  }

  export type StimulusUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    contentHtml?: NullableStringFieldUpdateOperationsInput | string | null
    contentText?: NullableStringFieldUpdateOperationsInput | string | null
    sourceRef?: NullableStringFieldUpdateOperationsInput | string | null
    assets?: StimulusAssetUncheckedUpdateManyWithoutStimulusNestedInput
    questions?: QuestionUncheckedUpdateManyWithoutStimulusNestedInput
  }

  export type StimulusCreateManyInput = {
    id?: number
    contentHtml?: string | null
    contentText?: string | null
    sourceRef?: string | null
  }

  export type StimulusUpdateManyMutationInput = {
    contentHtml?: NullableStringFieldUpdateOperationsInput | string | null
    contentText?: NullableStringFieldUpdateOperationsInput | string | null
    sourceRef?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StimulusUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    contentHtml?: NullableStringFieldUpdateOperationsInput | string | null
    contentText?: NullableStringFieldUpdateOperationsInput | string | null
    sourceRef?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StimulusAssetCreateInput = {
    storageKey: string
    caption?: string | null
    pageHint?: number | null
    stimulus: StimulusCreateNestedOneWithoutAssetsInput
  }

  export type StimulusAssetUncheckedCreateInput = {
    id?: number
    stimulusId: number
    storageKey: string
    caption?: string | null
    pageHint?: number | null
  }

  export type StimulusAssetUpdateInput = {
    storageKey?: StringFieldUpdateOperationsInput | string
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    pageHint?: NullableIntFieldUpdateOperationsInput | number | null
    stimulus?: StimulusUpdateOneRequiredWithoutAssetsNestedInput
  }

  export type StimulusAssetUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    stimulusId?: IntFieldUpdateOperationsInput | number
    storageKey?: StringFieldUpdateOperationsInput | string
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    pageHint?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type StimulusAssetCreateManyInput = {
    id?: number
    stimulusId: number
    storageKey: string
    caption?: string | null
    pageHint?: number | null
  }

  export type StimulusAssetUpdateManyMutationInput = {
    storageKey?: StringFieldUpdateOperationsInput | string
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    pageHint?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type StimulusAssetUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    stimulusId?: IntFieldUpdateOperationsInput | number
    storageKey?: StringFieldUpdateOperationsInput | string
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    pageHint?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type QuestionCreateInput = {
    numberLabel: string
    isDiscursive?: boolean
    difficulty?: $Enums.Difficulty | null
    status?: $Enums.QuestionStatus
    sourcePageStart?: number | null
    sourcePageEnd?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    phase: ExamPhaseCreateNestedOneWithoutQuestionsInput
    stimulus?: StimulusCreateNestedOneWithoutQuestionsInput
    subjects?: QuestionSubjectCreateNestedManyWithoutQuestionInput
    skills?: QuestionSkillCreateNestedManyWithoutQuestionInput
    mcq?: McqItemCreateNestedOneWithoutQuestionInput
    fr?: FrItemCreateNestedOneWithoutQuestionInput
  }

  export type QuestionUncheckedCreateInput = {
    id?: number
    examPhaseId: number
    stimulusId?: number | null
    numberLabel: string
    isDiscursive?: boolean
    difficulty?: $Enums.Difficulty | null
    status?: $Enums.QuestionStatus
    sourcePageStart?: number | null
    sourcePageEnd?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subjects?: QuestionSubjectUncheckedCreateNestedManyWithoutQuestionInput
    skills?: QuestionSkillUncheckedCreateNestedManyWithoutQuestionInput
    mcq?: McqItemUncheckedCreateNestedOneWithoutQuestionInput
    fr?: FrItemUncheckedCreateNestedOneWithoutQuestionInput
  }

  export type QuestionUpdateInput = {
    numberLabel?: StringFieldUpdateOperationsInput | string
    isDiscursive?: BoolFieldUpdateOperationsInput | boolean
    difficulty?: NullableEnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty | null
    status?: EnumQuestionStatusFieldUpdateOperationsInput | $Enums.QuestionStatus
    sourcePageStart?: NullableIntFieldUpdateOperationsInput | number | null
    sourcePageEnd?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phase?: ExamPhaseUpdateOneRequiredWithoutQuestionsNestedInput
    stimulus?: StimulusUpdateOneWithoutQuestionsNestedInput
    subjects?: QuestionSubjectUpdateManyWithoutQuestionNestedInput
    skills?: QuestionSkillUpdateManyWithoutQuestionNestedInput
    mcq?: McqItemUpdateOneWithoutQuestionNestedInput
    fr?: FrItemUpdateOneWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    examPhaseId?: IntFieldUpdateOperationsInput | number
    stimulusId?: NullableIntFieldUpdateOperationsInput | number | null
    numberLabel?: StringFieldUpdateOperationsInput | string
    isDiscursive?: BoolFieldUpdateOperationsInput | boolean
    difficulty?: NullableEnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty | null
    status?: EnumQuestionStatusFieldUpdateOperationsInput | $Enums.QuestionStatus
    sourcePageStart?: NullableIntFieldUpdateOperationsInput | number | null
    sourcePageEnd?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subjects?: QuestionSubjectUncheckedUpdateManyWithoutQuestionNestedInput
    skills?: QuestionSkillUncheckedUpdateManyWithoutQuestionNestedInput
    mcq?: McqItemUncheckedUpdateOneWithoutQuestionNestedInput
    fr?: FrItemUncheckedUpdateOneWithoutQuestionNestedInput
  }

  export type QuestionCreateManyInput = {
    id?: number
    examPhaseId: number
    stimulusId?: number | null
    numberLabel: string
    isDiscursive?: boolean
    difficulty?: $Enums.Difficulty | null
    status?: $Enums.QuestionStatus
    sourcePageStart?: number | null
    sourcePageEnd?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionUpdateManyMutationInput = {
    numberLabel?: StringFieldUpdateOperationsInput | string
    isDiscursive?: BoolFieldUpdateOperationsInput | boolean
    difficulty?: NullableEnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty | null
    status?: EnumQuestionStatusFieldUpdateOperationsInput | $Enums.QuestionStatus
    sourcePageStart?: NullableIntFieldUpdateOperationsInput | number | null
    sourcePageEnd?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    examPhaseId?: IntFieldUpdateOperationsInput | number
    stimulusId?: NullableIntFieldUpdateOperationsInput | number | null
    numberLabel?: StringFieldUpdateOperationsInput | string
    isDiscursive?: BoolFieldUpdateOperationsInput | boolean
    difficulty?: NullableEnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty | null
    status?: EnumQuestionStatusFieldUpdateOperationsInput | $Enums.QuestionStatus
    sourcePageStart?: NullableIntFieldUpdateOperationsInput | number | null
    sourcePageEnd?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionSubjectCreateInput = {
    question: QuestionCreateNestedOneWithoutSubjectsInput
    subject: SubjectCreateNestedOneWithoutQuestionsInput
  }

  export type QuestionSubjectUncheckedCreateInput = {
    questionId: number
    subjectId: number
  }

  export type QuestionSubjectUpdateInput = {
    question?: QuestionUpdateOneRequiredWithoutSubjectsNestedInput
    subject?: SubjectUpdateOneRequiredWithoutQuestionsNestedInput
  }

  export type QuestionSubjectUncheckedUpdateInput = {
    questionId?: IntFieldUpdateOperationsInput | number
    subjectId?: IntFieldUpdateOperationsInput | number
  }

  export type QuestionSubjectCreateManyInput = {
    questionId: number
    subjectId: number
  }

  export type QuestionSubjectUpdateManyMutationInput = {

  }

  export type QuestionSubjectUncheckedUpdateManyInput = {
    questionId?: IntFieldUpdateOperationsInput | number
    subjectId?: IntFieldUpdateOperationsInput | number
  }

  export type QuestionSkillCreateInput = {
    question: QuestionCreateNestedOneWithoutSkillsInput
    skill: SkillCreateNestedOneWithoutQuestionsInput
  }

  export type QuestionSkillUncheckedCreateInput = {
    questionId: number
    skillId: number
  }

  export type QuestionSkillUpdateInput = {
    question?: QuestionUpdateOneRequiredWithoutSkillsNestedInput
    skill?: SkillUpdateOneRequiredWithoutQuestionsNestedInput
  }

  export type QuestionSkillUncheckedUpdateInput = {
    questionId?: IntFieldUpdateOperationsInput | number
    skillId?: IntFieldUpdateOperationsInput | number
  }

  export type QuestionSkillCreateManyInput = {
    questionId: number
    skillId: number
  }

  export type QuestionSkillUpdateManyMutationInput = {

  }

  export type QuestionSkillUncheckedUpdateManyInput = {
    questionId?: IntFieldUpdateOperationsInput | number
    skillId?: IntFieldUpdateOperationsInput | number
  }

  export type McqItemCreateInput = {
    shuffleOptions?: boolean
    optionCount: number
    correctOptionKey: $Enums.OptionKey
    question: QuestionCreateNestedOneWithoutMcqInput
    options?: McqOptionCreateNestedManyWithoutMcqInput
  }

  export type McqItemUncheckedCreateInput = {
    questionId: number
    shuffleOptions?: boolean
    optionCount: number
    correctOptionKey: $Enums.OptionKey
    options?: McqOptionUncheckedCreateNestedManyWithoutMcqInput
  }

  export type McqItemUpdateInput = {
    shuffleOptions?: BoolFieldUpdateOperationsInput | boolean
    optionCount?: IntFieldUpdateOperationsInput | number
    correctOptionKey?: EnumOptionKeyFieldUpdateOperationsInput | $Enums.OptionKey
    question?: QuestionUpdateOneRequiredWithoutMcqNestedInput
    options?: McqOptionUpdateManyWithoutMcqNestedInput
  }

  export type McqItemUncheckedUpdateInput = {
    questionId?: IntFieldUpdateOperationsInput | number
    shuffleOptions?: BoolFieldUpdateOperationsInput | boolean
    optionCount?: IntFieldUpdateOperationsInput | number
    correctOptionKey?: EnumOptionKeyFieldUpdateOperationsInput | $Enums.OptionKey
    options?: McqOptionUncheckedUpdateManyWithoutMcqNestedInput
  }

  export type McqItemCreateManyInput = {
    questionId: number
    shuffleOptions?: boolean
    optionCount: number
    correctOptionKey: $Enums.OptionKey
  }

  export type McqItemUpdateManyMutationInput = {
    shuffleOptions?: BoolFieldUpdateOperationsInput | boolean
    optionCount?: IntFieldUpdateOperationsInput | number
    correctOptionKey?: EnumOptionKeyFieldUpdateOperationsInput | $Enums.OptionKey
  }

  export type McqItemUncheckedUpdateManyInput = {
    questionId?: IntFieldUpdateOperationsInput | number
    shuffleOptions?: BoolFieldUpdateOperationsInput | boolean
    optionCount?: IntFieldUpdateOperationsInput | number
    correctOptionKey?: EnumOptionKeyFieldUpdateOperationsInput | $Enums.OptionKey
  }

  export type McqOptionCreateInput = {
    label: $Enums.OptionKey
    textHtml?: string | null
    textPlain?: string | null
    mcq: McqItemCreateNestedOneWithoutOptionsInput
  }

  export type McqOptionUncheckedCreateInput = {
    id?: number
    questionId: number
    label: $Enums.OptionKey
    textHtml?: string | null
    textPlain?: string | null
  }

  export type McqOptionUpdateInput = {
    label?: EnumOptionKeyFieldUpdateOperationsInput | $Enums.OptionKey
    textHtml?: NullableStringFieldUpdateOperationsInput | string | null
    textPlain?: NullableStringFieldUpdateOperationsInput | string | null
    mcq?: McqItemUpdateOneRequiredWithoutOptionsNestedInput
  }

  export type McqOptionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    questionId?: IntFieldUpdateOperationsInput | number
    label?: EnumOptionKeyFieldUpdateOperationsInput | $Enums.OptionKey
    textHtml?: NullableStringFieldUpdateOperationsInput | string | null
    textPlain?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type McqOptionCreateManyInput = {
    id?: number
    questionId: number
    label: $Enums.OptionKey
    textHtml?: string | null
    textPlain?: string | null
  }

  export type McqOptionUpdateManyMutationInput = {
    label?: EnumOptionKeyFieldUpdateOperationsInput | $Enums.OptionKey
    textHtml?: NullableStringFieldUpdateOperationsInput | string | null
    textPlain?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type McqOptionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    questionId?: IntFieldUpdateOperationsInput | number
    label?: EnumOptionKeyFieldUpdateOperationsInput | $Enums.OptionKey
    textHtml?: NullableStringFieldUpdateOperationsInput | string | null
    textPlain?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FrItemCreateInput = {
    answerGuidanceHtml?: string | null
    maxScore?: Decimal | DecimalJsLike | number | string | null
    question: QuestionCreateNestedOneWithoutFrInput
    rubrics?: FrRubricCreateNestedManyWithoutFrInput
    expectedAnswers?: FrAnswerExpectedCreateNestedManyWithoutFrItemInput
  }

  export type FrItemUncheckedCreateInput = {
    questionId: number
    answerGuidanceHtml?: string | null
    maxScore?: Decimal | DecimalJsLike | number | string | null
    rubrics?: FrRubricUncheckedCreateNestedManyWithoutFrInput
    expectedAnswers?: FrAnswerExpectedUncheckedCreateNestedManyWithoutFrItemInput
  }

  export type FrItemUpdateInput = {
    answerGuidanceHtml?: NullableStringFieldUpdateOperationsInput | string | null
    maxScore?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    question?: QuestionUpdateOneRequiredWithoutFrNestedInput
    rubrics?: FrRubricUpdateManyWithoutFrNestedInput
    expectedAnswers?: FrAnswerExpectedUpdateManyWithoutFrItemNestedInput
  }

  export type FrItemUncheckedUpdateInput = {
    questionId?: IntFieldUpdateOperationsInput | number
    answerGuidanceHtml?: NullableStringFieldUpdateOperationsInput | string | null
    maxScore?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    rubrics?: FrRubricUncheckedUpdateManyWithoutFrNestedInput
    expectedAnswers?: FrAnswerExpectedUncheckedUpdateManyWithoutFrItemNestedInput
  }

  export type FrItemCreateManyInput = {
    questionId: number
    answerGuidanceHtml?: string | null
    maxScore?: Decimal | DecimalJsLike | number | string | null
  }

  export type FrItemUpdateManyMutationInput = {
    answerGuidanceHtml?: NullableStringFieldUpdateOperationsInput | string | null
    maxScore?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type FrItemUncheckedUpdateManyInput = {
    questionId?: IntFieldUpdateOperationsInput | number
    answerGuidanceHtml?: NullableStringFieldUpdateOperationsInput | string | null
    maxScore?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type FrAnswerExpectedCreateInput = {
    label?: string | null
    answerHtml?: string | null
    maxScore?: Decimal | DecimalJsLike | number | string | null
    frItem: FrItemCreateNestedOneWithoutExpectedAnswersInput
  }

  export type FrAnswerExpectedUncheckedCreateInput = {
    id?: number
    frItemId: number
    label?: string | null
    answerHtml?: string | null
    maxScore?: Decimal | DecimalJsLike | number | string | null
  }

  export type FrAnswerExpectedUpdateInput = {
    label?: NullableStringFieldUpdateOperationsInput | string | null
    answerHtml?: NullableStringFieldUpdateOperationsInput | string | null
    maxScore?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    frItem?: FrItemUpdateOneRequiredWithoutExpectedAnswersNestedInput
  }

  export type FrAnswerExpectedUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    frItemId?: IntFieldUpdateOperationsInput | number
    label?: NullableStringFieldUpdateOperationsInput | string | null
    answerHtml?: NullableStringFieldUpdateOperationsInput | string | null
    maxScore?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type FrAnswerExpectedCreateManyInput = {
    id?: number
    frItemId: number
    label?: string | null
    answerHtml?: string | null
    maxScore?: Decimal | DecimalJsLike | number | string | null
  }

  export type FrAnswerExpectedUpdateManyMutationInput = {
    label?: NullableStringFieldUpdateOperationsInput | string | null
    answerHtml?: NullableStringFieldUpdateOperationsInput | string | null
    maxScore?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type FrAnswerExpectedUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    frItemId?: IntFieldUpdateOperationsInput | number
    label?: NullableStringFieldUpdateOperationsInput | string | null
    answerHtml?: NullableStringFieldUpdateOperationsInput | string | null
    maxScore?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type FrRubricCreateInput = {
    criterion: string
    levelsJson: JsonNullValueInput | InputJsonValue
    fr: FrItemCreateNestedOneWithoutRubricsInput
  }

  export type FrRubricUncheckedCreateInput = {
    id?: number
    questionId: number
    criterion: string
    levelsJson: JsonNullValueInput | InputJsonValue
  }

  export type FrRubricUpdateInput = {
    criterion?: StringFieldUpdateOperationsInput | string
    levelsJson?: JsonNullValueInput | InputJsonValue
    fr?: FrItemUpdateOneRequiredWithoutRubricsNestedInput
  }

  export type FrRubricUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    questionId?: IntFieldUpdateOperationsInput | number
    criterion?: StringFieldUpdateOperationsInput | string
    levelsJson?: JsonNullValueInput | InputJsonValue
  }

  export type FrRubricCreateManyInput = {
    id?: number
    questionId: number
    criterion: string
    levelsJson: JsonNullValueInput | InputJsonValue
  }

  export type FrRubricUpdateManyMutationInput = {
    criterion?: StringFieldUpdateOperationsInput | string
    levelsJson?: JsonNullValueInput | InputJsonValue
  }

  export type FrRubricUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    questionId?: IntFieldUpdateOperationsInput | number
    criterion?: StringFieldUpdateOperationsInput | string
    levelsJson?: JsonNullValueInput | InputJsonValue
  }

  export type UserCreateInput = {
    id: string
    name: string
    email: string
    emailVerified?: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: string | null
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
    sessions?: SessionCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    directPerms?: UserPermissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id: string
    name: string
    email: string
    emailVerified?: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: string | null
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    directPerms?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    directPerms?: UserPermissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    directPerms?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id: string
    name: string
    email: string
    emailVerified?: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: string | null
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionCreateInput = {
    id: string
    expiresAt: Date | string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    impersonatedBy?: string | null
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id: string
    expiresAt: Date | string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    userId: string
    impersonatedBy?: string | null
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    impersonatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    impersonatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionCreateManyInput = {
    id: string
    expiresAt: Date | string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    userId: string
    impersonatedBy?: string | null
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    impersonatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    impersonatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountCreateInput = {
    id: string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    id: string
    accountId: string
    providerId: string
    userId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountCreateManyInput = {
    id: string
    accountId: string
    providerId: string
    userId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationCreateInput = {
    id: string
    identifier: string
    value: string
    expiresAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VerificationUncheckedCreateInput = {
    id: string
    identifier: string
    value: string
    expiresAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VerificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationCreateManyInput = {
    id: string
    identifier: string
    value: string
    expiresAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VerificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleCreateInput = {
    id?: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserRoleCreateNestedManyWithoutRoleInput
    perms?: RolePermissionCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserRoleUncheckedCreateNestedManyWithoutRoleInput
    perms?: RolePermissionUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserRoleUpdateManyWithoutRoleNestedInput
    perms?: RolePermissionUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserRoleUncheckedUpdateManyWithoutRoleNestedInput
    perms?: RolePermissionUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type RoleCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PermissionCreateInput = {
    id?: string
    resource: string
    action: string
    key: string
    isActive?: boolean
    roles?: RolePermissionCreateNestedManyWithoutPermissionInput
    users?: UserPermissionCreateNestedManyWithoutPermissionInput
  }

  export type PermissionUncheckedCreateInput = {
    id?: string
    resource: string
    action: string
    key: string
    isActive?: boolean
    roles?: RolePermissionUncheckedCreateNestedManyWithoutPermissionInput
    users?: UserPermissionUncheckedCreateNestedManyWithoutPermissionInput
  }

  export type PermissionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    roles?: RolePermissionUpdateManyWithoutPermissionNestedInput
    users?: UserPermissionUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    roles?: RolePermissionUncheckedUpdateManyWithoutPermissionNestedInput
    users?: UserPermissionUncheckedUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionCreateManyInput = {
    id?: string
    resource: string
    action: string
    key: string
    isActive?: boolean
  }

  export type PermissionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PermissionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RolePermissionCreateInput = {
    granted?: boolean
    role: RoleCreateNestedOneWithoutPermsInput
    permission: PermissionCreateNestedOneWithoutRolesInput
  }

  export type RolePermissionUncheckedCreateInput = {
    roleId: string
    permissionId: string
    granted?: boolean
  }

  export type RolePermissionUpdateInput = {
    granted?: BoolFieldUpdateOperationsInput | boolean
    role?: RoleUpdateOneRequiredWithoutPermsNestedInput
    permission?: PermissionUpdateOneRequiredWithoutRolesNestedInput
  }

  export type RolePermissionUncheckedUpdateInput = {
    roleId?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
    granted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RolePermissionCreateManyInput = {
    roleId: string
    permissionId: string
    granted?: boolean
  }

  export type RolePermissionUpdateManyMutationInput = {
    granted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RolePermissionUncheckedUpdateManyInput = {
    roleId?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
    granted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserRoleCreateInput = {
    user: UserCreateNestedOneWithoutRolesInput
    role: RoleCreateNestedOneWithoutUsersInput
  }

  export type UserRoleUncheckedCreateInput = {
    userId: string
    roleId: string
  }

  export type UserRoleUpdateInput = {
    user?: UserUpdateOneRequiredWithoutRolesNestedInput
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserRoleUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
  }

  export type UserRoleCreateManyInput = {
    userId: string
    roleId: string
  }

  export type UserRoleUpdateManyMutationInput = {

  }

  export type UserRoleUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
  }

  export type UserPermissionCreateInput = {
    granted?: boolean
    user: UserCreateNestedOneWithoutDirectPermsInput
    permission: PermissionCreateNestedOneWithoutUsersInput
  }

  export type UserPermissionUncheckedCreateInput = {
    userId: string
    permissionId: string
    granted?: boolean
  }

  export type UserPermissionUpdateInput = {
    granted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutDirectPermsNestedInput
    permission?: PermissionUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserPermissionUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
    granted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserPermissionCreateManyInput = {
    userId: string
    permissionId: string
    granted?: boolean
  }

  export type UserPermissionUpdateManyMutationInput = {
    granted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserPermissionUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
    granted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type ExamEditionListRelationFilter = {
    every?: ExamEditionWhereInput
    some?: ExamEditionWhereInput
    none?: ExamEditionWhereInput
  }

  export type ExamEditionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExamBoardCountOrderByAggregateInput = {
    id?: SortOrder
    slug?: SortOrder
    name?: SortOrder
  }

  export type ExamBoardAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ExamBoardMaxOrderByAggregateInput = {
    id?: SortOrder
    slug?: SortOrder
    name?: SortOrder
  }

  export type ExamBoardMinOrderByAggregateInput = {
    id?: SortOrder
    slug?: SortOrder
    name?: SortOrder
  }

  export type ExamBoardSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type ExamBoardScalarRelationFilter = {
    is?: ExamBoardWhereInput
    isNot?: ExamBoardWhereInput
  }

  export type ExamPhaseListRelationFilter = {
    every?: ExamPhaseWhereInput
    some?: ExamPhaseWhereInput
    none?: ExamPhaseWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ExamPhaseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExamEditionExamBoardIdYearEditionLabelCompoundUniqueInput = {
    examBoardId: number
    year: number
    editionLabel: string
  }

  export type ExamEditionCountOrderByAggregateInput = {
    id?: SortOrder
    examBoardId?: SortOrder
    year?: SortOrder
    editionLabel?: SortOrder
    notes?: SortOrder
  }

  export type ExamEditionAvgOrderByAggregateInput = {
    id?: SortOrder
    examBoardId?: SortOrder
    year?: SortOrder
  }

  export type ExamEditionMaxOrderByAggregateInput = {
    id?: SortOrder
    examBoardId?: SortOrder
    year?: SortOrder
    editionLabel?: SortOrder
    notes?: SortOrder
  }

  export type ExamEditionMinOrderByAggregateInput = {
    id?: SortOrder
    examBoardId?: SortOrder
    year?: SortOrder
    editionLabel?: SortOrder
    notes?: SortOrder
  }

  export type ExamEditionSumOrderByAggregateInput = {
    id?: SortOrder
    examBoardId?: SortOrder
    year?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type ExamEditionScalarRelationFilter = {
    is?: ExamEditionWhereInput
    isNot?: ExamEditionWhereInput
  }

  export type QuestionListRelationFilter = {
    every?: QuestionWhereInput
    some?: QuestionWhereInput
    none?: QuestionWhereInput
  }

  export type QuestionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExamPhaseExamEditionIdPhaseNumberDayNumberCompoundUniqueInput = {
    examEditionId: number
    phaseNumber: number
    dayNumber: number
  }

  export type ExamPhaseCountOrderByAggregateInput = {
    id?: SortOrder
    examEditionId?: SortOrder
    phaseNumber?: SortOrder
    dayNumber?: SortOrder
    subjectBlock?: SortOrder
    questionCountExpected?: SortOrder
    defaultOptionCount?: SortOrder
    isDiscursive?: SortOrder
  }

  export type ExamPhaseAvgOrderByAggregateInput = {
    id?: SortOrder
    examEditionId?: SortOrder
    phaseNumber?: SortOrder
    dayNumber?: SortOrder
    questionCountExpected?: SortOrder
    defaultOptionCount?: SortOrder
  }

  export type ExamPhaseMaxOrderByAggregateInput = {
    id?: SortOrder
    examEditionId?: SortOrder
    phaseNumber?: SortOrder
    dayNumber?: SortOrder
    subjectBlock?: SortOrder
    questionCountExpected?: SortOrder
    defaultOptionCount?: SortOrder
    isDiscursive?: SortOrder
  }

  export type ExamPhaseMinOrderByAggregateInput = {
    id?: SortOrder
    examEditionId?: SortOrder
    phaseNumber?: SortOrder
    dayNumber?: SortOrder
    subjectBlock?: SortOrder
    questionCountExpected?: SortOrder
    defaultOptionCount?: SortOrder
    isDiscursive?: SortOrder
  }

  export type ExamPhaseSumOrderByAggregateInput = {
    id?: SortOrder
    examEditionId?: SortOrder
    phaseNumber?: SortOrder
    dayNumber?: SortOrder
    questionCountExpected?: SortOrder
    defaultOptionCount?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type QuestionSubjectListRelationFilter = {
    every?: QuestionSubjectWhereInput
    some?: QuestionSubjectWhereInput
    none?: QuestionSubjectWhereInput
  }

  export type QuestionSubjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubjectCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
  }

  export type SubjectAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SubjectMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
  }

  export type SubjectMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
  }

  export type SubjectSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type QuestionSkillListRelationFilter = {
    every?: QuestionSkillWhereInput
    some?: QuestionSkillWhereInput
    none?: QuestionSkillWhereInput
  }

  export type QuestionSkillOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SkillCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    label?: SortOrder
  }

  export type SkillAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SkillMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    label?: SortOrder
  }

  export type SkillMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    label?: SortOrder
  }

  export type SkillSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StimulusAssetListRelationFilter = {
    every?: StimulusAssetWhereInput
    some?: StimulusAssetWhereInput
    none?: StimulusAssetWhereInput
  }

  export type StimulusAssetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StimulusCountOrderByAggregateInput = {
    id?: SortOrder
    contentHtml?: SortOrder
    contentText?: SortOrder
    sourceRef?: SortOrder
  }

  export type StimulusAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StimulusMaxOrderByAggregateInput = {
    id?: SortOrder
    contentHtml?: SortOrder
    contentText?: SortOrder
    sourceRef?: SortOrder
  }

  export type StimulusMinOrderByAggregateInput = {
    id?: SortOrder
    contentHtml?: SortOrder
    contentText?: SortOrder
    sourceRef?: SortOrder
  }

  export type StimulusSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StimulusScalarRelationFilter = {
    is?: StimulusWhereInput
    isNot?: StimulusWhereInput
  }

  export type StimulusAssetCountOrderByAggregateInput = {
    id?: SortOrder
    stimulusId?: SortOrder
    storageKey?: SortOrder
    caption?: SortOrder
    pageHint?: SortOrder
  }

  export type StimulusAssetAvgOrderByAggregateInput = {
    id?: SortOrder
    stimulusId?: SortOrder
    pageHint?: SortOrder
  }

  export type StimulusAssetMaxOrderByAggregateInput = {
    id?: SortOrder
    stimulusId?: SortOrder
    storageKey?: SortOrder
    caption?: SortOrder
    pageHint?: SortOrder
  }

  export type StimulusAssetMinOrderByAggregateInput = {
    id?: SortOrder
    stimulusId?: SortOrder
    storageKey?: SortOrder
    caption?: SortOrder
    pageHint?: SortOrder
  }

  export type StimulusAssetSumOrderByAggregateInput = {
    id?: SortOrder
    stimulusId?: SortOrder
    pageHint?: SortOrder
  }

  export type EnumDifficultyNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Difficulty | EnumDifficultyFieldRefInput<$PrismaModel> | null
    in?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel> | null
    not?: NestedEnumDifficultyNullableFilter<$PrismaModel> | $Enums.Difficulty | null
  }

  export type EnumQuestionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionStatus | EnumQuestionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionStatus[] | ListEnumQuestionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestionStatus[] | ListEnumQuestionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestionStatusFilter<$PrismaModel> | $Enums.QuestionStatus
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ExamPhaseScalarRelationFilter = {
    is?: ExamPhaseWhereInput
    isNot?: ExamPhaseWhereInput
  }

  export type StimulusNullableScalarRelationFilter = {
    is?: StimulusWhereInput | null
    isNot?: StimulusWhereInput | null
  }

  export type McqItemNullableScalarRelationFilter = {
    is?: McqItemWhereInput | null
    isNot?: McqItemWhereInput | null
  }

  export type FrItemNullableScalarRelationFilter = {
    is?: FrItemWhereInput | null
    isNot?: FrItemWhereInput | null
  }

  export type QuestionExamPhaseIdNumberLabelCompoundUniqueInput = {
    examPhaseId: number
    numberLabel: string
  }

  export type QuestionCountOrderByAggregateInput = {
    id?: SortOrder
    examPhaseId?: SortOrder
    stimulusId?: SortOrder
    numberLabel?: SortOrder
    isDiscursive?: SortOrder
    difficulty?: SortOrder
    status?: SortOrder
    sourcePageStart?: SortOrder
    sourcePageEnd?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuestionAvgOrderByAggregateInput = {
    id?: SortOrder
    examPhaseId?: SortOrder
    stimulusId?: SortOrder
    sourcePageStart?: SortOrder
    sourcePageEnd?: SortOrder
  }

  export type QuestionMaxOrderByAggregateInput = {
    id?: SortOrder
    examPhaseId?: SortOrder
    stimulusId?: SortOrder
    numberLabel?: SortOrder
    isDiscursive?: SortOrder
    difficulty?: SortOrder
    status?: SortOrder
    sourcePageStart?: SortOrder
    sourcePageEnd?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuestionMinOrderByAggregateInput = {
    id?: SortOrder
    examPhaseId?: SortOrder
    stimulusId?: SortOrder
    numberLabel?: SortOrder
    isDiscursive?: SortOrder
    difficulty?: SortOrder
    status?: SortOrder
    sourcePageStart?: SortOrder
    sourcePageEnd?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuestionSumOrderByAggregateInput = {
    id?: SortOrder
    examPhaseId?: SortOrder
    stimulusId?: SortOrder
    sourcePageStart?: SortOrder
    sourcePageEnd?: SortOrder
  }

  export type EnumDifficultyNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Difficulty | EnumDifficultyFieldRefInput<$PrismaModel> | null
    in?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel> | null
    not?: NestedEnumDifficultyNullableWithAggregatesFilter<$PrismaModel> | $Enums.Difficulty | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumDifficultyNullableFilter<$PrismaModel>
    _max?: NestedEnumDifficultyNullableFilter<$PrismaModel>
  }

  export type EnumQuestionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionStatus | EnumQuestionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionStatus[] | ListEnumQuestionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestionStatus[] | ListEnumQuestionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestionStatusWithAggregatesFilter<$PrismaModel> | $Enums.QuestionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumQuestionStatusFilter<$PrismaModel>
    _max?: NestedEnumQuestionStatusFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type QuestionScalarRelationFilter = {
    is?: QuestionWhereInput
    isNot?: QuestionWhereInput
  }

  export type SubjectScalarRelationFilter = {
    is?: SubjectWhereInput
    isNot?: SubjectWhereInput
  }

  export type QuestionSubjectQuestionIdSubjectIdCompoundUniqueInput = {
    questionId: number
    subjectId: number
  }

  export type QuestionSubjectCountOrderByAggregateInput = {
    questionId?: SortOrder
    subjectId?: SortOrder
  }

  export type QuestionSubjectAvgOrderByAggregateInput = {
    questionId?: SortOrder
    subjectId?: SortOrder
  }

  export type QuestionSubjectMaxOrderByAggregateInput = {
    questionId?: SortOrder
    subjectId?: SortOrder
  }

  export type QuestionSubjectMinOrderByAggregateInput = {
    questionId?: SortOrder
    subjectId?: SortOrder
  }

  export type QuestionSubjectSumOrderByAggregateInput = {
    questionId?: SortOrder
    subjectId?: SortOrder
  }

  export type SkillScalarRelationFilter = {
    is?: SkillWhereInput
    isNot?: SkillWhereInput
  }

  export type QuestionSkillQuestionIdSkillIdCompoundUniqueInput = {
    questionId: number
    skillId: number
  }

  export type QuestionSkillCountOrderByAggregateInput = {
    questionId?: SortOrder
    skillId?: SortOrder
  }

  export type QuestionSkillAvgOrderByAggregateInput = {
    questionId?: SortOrder
    skillId?: SortOrder
  }

  export type QuestionSkillMaxOrderByAggregateInput = {
    questionId?: SortOrder
    skillId?: SortOrder
  }

  export type QuestionSkillMinOrderByAggregateInput = {
    questionId?: SortOrder
    skillId?: SortOrder
  }

  export type QuestionSkillSumOrderByAggregateInput = {
    questionId?: SortOrder
    skillId?: SortOrder
  }

  export type EnumOptionKeyFilter<$PrismaModel = never> = {
    equals?: $Enums.OptionKey | EnumOptionKeyFieldRefInput<$PrismaModel>
    in?: $Enums.OptionKey[] | ListEnumOptionKeyFieldRefInput<$PrismaModel>
    notIn?: $Enums.OptionKey[] | ListEnumOptionKeyFieldRefInput<$PrismaModel>
    not?: NestedEnumOptionKeyFilter<$PrismaModel> | $Enums.OptionKey
  }

  export type McqOptionListRelationFilter = {
    every?: McqOptionWhereInput
    some?: McqOptionWhereInput
    none?: McqOptionWhereInput
  }

  export type McqOptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type McqItemCountOrderByAggregateInput = {
    questionId?: SortOrder
    shuffleOptions?: SortOrder
    optionCount?: SortOrder
    correctOptionKey?: SortOrder
  }

  export type McqItemAvgOrderByAggregateInput = {
    questionId?: SortOrder
    optionCount?: SortOrder
  }

  export type McqItemMaxOrderByAggregateInput = {
    questionId?: SortOrder
    shuffleOptions?: SortOrder
    optionCount?: SortOrder
    correctOptionKey?: SortOrder
  }

  export type McqItemMinOrderByAggregateInput = {
    questionId?: SortOrder
    shuffleOptions?: SortOrder
    optionCount?: SortOrder
    correctOptionKey?: SortOrder
  }

  export type McqItemSumOrderByAggregateInput = {
    questionId?: SortOrder
    optionCount?: SortOrder
  }

  export type EnumOptionKeyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OptionKey | EnumOptionKeyFieldRefInput<$PrismaModel>
    in?: $Enums.OptionKey[] | ListEnumOptionKeyFieldRefInput<$PrismaModel>
    notIn?: $Enums.OptionKey[] | ListEnumOptionKeyFieldRefInput<$PrismaModel>
    not?: NestedEnumOptionKeyWithAggregatesFilter<$PrismaModel> | $Enums.OptionKey
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOptionKeyFilter<$PrismaModel>
    _max?: NestedEnumOptionKeyFilter<$PrismaModel>
  }

  export type McqItemScalarRelationFilter = {
    is?: McqItemWhereInput
    isNot?: McqItemWhereInput
  }

  export type McqOptionQuestionIdLabelCompoundUniqueInput = {
    questionId: number
    label: $Enums.OptionKey
  }

  export type McqOptionCountOrderByAggregateInput = {
    id?: SortOrder
    questionId?: SortOrder
    label?: SortOrder
    textHtml?: SortOrder
    textPlain?: SortOrder
  }

  export type McqOptionAvgOrderByAggregateInput = {
    id?: SortOrder
    questionId?: SortOrder
  }

  export type McqOptionMaxOrderByAggregateInput = {
    id?: SortOrder
    questionId?: SortOrder
    label?: SortOrder
    textHtml?: SortOrder
    textPlain?: SortOrder
  }

  export type McqOptionMinOrderByAggregateInput = {
    id?: SortOrder
    questionId?: SortOrder
    label?: SortOrder
    textHtml?: SortOrder
    textPlain?: SortOrder
  }

  export type McqOptionSumOrderByAggregateInput = {
    id?: SortOrder
    questionId?: SortOrder
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type FrRubricListRelationFilter = {
    every?: FrRubricWhereInput
    some?: FrRubricWhereInput
    none?: FrRubricWhereInput
  }

  export type FrAnswerExpectedListRelationFilter = {
    every?: FrAnswerExpectedWhereInput
    some?: FrAnswerExpectedWhereInput
    none?: FrAnswerExpectedWhereInput
  }

  export type FrRubricOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FrAnswerExpectedOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FrItemCountOrderByAggregateInput = {
    questionId?: SortOrder
    answerGuidanceHtml?: SortOrder
    maxScore?: SortOrder
  }

  export type FrItemAvgOrderByAggregateInput = {
    questionId?: SortOrder
    maxScore?: SortOrder
  }

  export type FrItemMaxOrderByAggregateInput = {
    questionId?: SortOrder
    answerGuidanceHtml?: SortOrder
    maxScore?: SortOrder
  }

  export type FrItemMinOrderByAggregateInput = {
    questionId?: SortOrder
    answerGuidanceHtml?: SortOrder
    maxScore?: SortOrder
  }

  export type FrItemSumOrderByAggregateInput = {
    questionId?: SortOrder
    maxScore?: SortOrder
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type FrItemScalarRelationFilter = {
    is?: FrItemWhereInput
    isNot?: FrItemWhereInput
  }

  export type FrAnswerExpectedCountOrderByAggregateInput = {
    id?: SortOrder
    frItemId?: SortOrder
    label?: SortOrder
    answerHtml?: SortOrder
    maxScore?: SortOrder
  }

  export type FrAnswerExpectedAvgOrderByAggregateInput = {
    id?: SortOrder
    frItemId?: SortOrder
    maxScore?: SortOrder
  }

  export type FrAnswerExpectedMaxOrderByAggregateInput = {
    id?: SortOrder
    frItemId?: SortOrder
    label?: SortOrder
    answerHtml?: SortOrder
    maxScore?: SortOrder
  }

  export type FrAnswerExpectedMinOrderByAggregateInput = {
    id?: SortOrder
    frItemId?: SortOrder
    label?: SortOrder
    answerHtml?: SortOrder
    maxScore?: SortOrder
  }

  export type FrAnswerExpectedSumOrderByAggregateInput = {
    id?: SortOrder
    frItemId?: SortOrder
    maxScore?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type FrRubricCountOrderByAggregateInput = {
    id?: SortOrder
    questionId?: SortOrder
    criterion?: SortOrder
    levelsJson?: SortOrder
  }

  export type FrRubricAvgOrderByAggregateInput = {
    id?: SortOrder
    questionId?: SortOrder
  }

  export type FrRubricMaxOrderByAggregateInput = {
    id?: SortOrder
    questionId?: SortOrder
    criterion?: SortOrder
  }

  export type FrRubricMinOrderByAggregateInput = {
    id?: SortOrder
    questionId?: SortOrder
    criterion?: SortOrder
  }

  export type FrRubricSumOrderByAggregateInput = {
    id?: SortOrder
    questionId?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type UserRoleListRelationFilter = {
    every?: UserRoleWhereInput
    some?: UserRoleWhereInput
    none?: UserRoleWhereInput
  }

  export type UserPermissionListRelationFilter = {
    every?: UserPermissionWhereInput
    some?: UserPermissionWhereInput
    none?: UserPermissionWhereInput
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserRoleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserPermissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    role?: SortOrder
    banned?: SortOrder
    banReason?: SortOrder
    banExpires?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    role?: SortOrder
    banned?: SortOrder
    banReason?: SortOrder
    banExpires?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    role?: SortOrder
    banned?: SortOrder
    banReason?: SortOrder
    banExpires?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    userId?: SortOrder
    impersonatedBy?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    userId?: SortOrder
    impersonatedBy?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    userId?: SortOrder
    impersonatedBy?: SortOrder
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    idToken?: SortOrder
    accessTokenExpiresAt?: SortOrder
    refreshTokenExpiresAt?: SortOrder
    scope?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    idToken?: SortOrder
    accessTokenExpiresAt?: SortOrder
    refreshTokenExpiresAt?: SortOrder
    scope?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    idToken?: SortOrder
    accessTokenExpiresAt?: SortOrder
    refreshTokenExpiresAt?: SortOrder
    scope?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VerificationCountOrderByAggregateInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VerificationMaxOrderByAggregateInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VerificationMinOrderByAggregateInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RolePermissionListRelationFilter = {
    every?: RolePermissionWhereInput
    some?: RolePermissionWhereInput
    none?: RolePermissionWhereInput
  }

  export type RolePermissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PermissionCountOrderByAggregateInput = {
    id?: SortOrder
    resource?: SortOrder
    action?: SortOrder
    key?: SortOrder
    isActive?: SortOrder
  }

  export type PermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    resource?: SortOrder
    action?: SortOrder
    key?: SortOrder
    isActive?: SortOrder
  }

  export type PermissionMinOrderByAggregateInput = {
    id?: SortOrder
    resource?: SortOrder
    action?: SortOrder
    key?: SortOrder
    isActive?: SortOrder
  }

  export type RoleScalarRelationFilter = {
    is?: RoleWhereInput
    isNot?: RoleWhereInput
  }

  export type PermissionScalarRelationFilter = {
    is?: PermissionWhereInput
    isNot?: PermissionWhereInput
  }

  export type RolePermissionRoleIdPermissionIdCompoundUniqueInput = {
    roleId: string
    permissionId: string
  }

  export type RolePermissionCountOrderByAggregateInput = {
    roleId?: SortOrder
    permissionId?: SortOrder
    granted?: SortOrder
  }

  export type RolePermissionMaxOrderByAggregateInput = {
    roleId?: SortOrder
    permissionId?: SortOrder
    granted?: SortOrder
  }

  export type RolePermissionMinOrderByAggregateInput = {
    roleId?: SortOrder
    permissionId?: SortOrder
    granted?: SortOrder
  }

  export type UserRoleUserIdRoleIdCompoundUniqueInput = {
    userId: string
    roleId: string
  }

  export type UserRoleCountOrderByAggregateInput = {
    userId?: SortOrder
    roleId?: SortOrder
  }

  export type UserRoleMaxOrderByAggregateInput = {
    userId?: SortOrder
    roleId?: SortOrder
  }

  export type UserRoleMinOrderByAggregateInput = {
    userId?: SortOrder
    roleId?: SortOrder
  }

  export type UserPermissionUserIdPermissionIdCompoundUniqueInput = {
    userId: string
    permissionId: string
  }

  export type UserPermissionCountOrderByAggregateInput = {
    userId?: SortOrder
    permissionId?: SortOrder
    granted?: SortOrder
  }

  export type UserPermissionMaxOrderByAggregateInput = {
    userId?: SortOrder
    permissionId?: SortOrder
    granted?: SortOrder
  }

  export type UserPermissionMinOrderByAggregateInput = {
    userId?: SortOrder
    permissionId?: SortOrder
    granted?: SortOrder
  }

  export type ExamEditionCreateNestedManyWithoutBoardInput = {
    create?: XOR<ExamEditionCreateWithoutBoardInput, ExamEditionUncheckedCreateWithoutBoardInput> | ExamEditionCreateWithoutBoardInput[] | ExamEditionUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: ExamEditionCreateOrConnectWithoutBoardInput | ExamEditionCreateOrConnectWithoutBoardInput[]
    createMany?: ExamEditionCreateManyBoardInputEnvelope
    connect?: ExamEditionWhereUniqueInput | ExamEditionWhereUniqueInput[]
  }

  export type ExamEditionUncheckedCreateNestedManyWithoutBoardInput = {
    create?: XOR<ExamEditionCreateWithoutBoardInput, ExamEditionUncheckedCreateWithoutBoardInput> | ExamEditionCreateWithoutBoardInput[] | ExamEditionUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: ExamEditionCreateOrConnectWithoutBoardInput | ExamEditionCreateOrConnectWithoutBoardInput[]
    createMany?: ExamEditionCreateManyBoardInputEnvelope
    connect?: ExamEditionWhereUniqueInput | ExamEditionWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type ExamEditionUpdateManyWithoutBoardNestedInput = {
    create?: XOR<ExamEditionCreateWithoutBoardInput, ExamEditionUncheckedCreateWithoutBoardInput> | ExamEditionCreateWithoutBoardInput[] | ExamEditionUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: ExamEditionCreateOrConnectWithoutBoardInput | ExamEditionCreateOrConnectWithoutBoardInput[]
    upsert?: ExamEditionUpsertWithWhereUniqueWithoutBoardInput | ExamEditionUpsertWithWhereUniqueWithoutBoardInput[]
    createMany?: ExamEditionCreateManyBoardInputEnvelope
    set?: ExamEditionWhereUniqueInput | ExamEditionWhereUniqueInput[]
    disconnect?: ExamEditionWhereUniqueInput | ExamEditionWhereUniqueInput[]
    delete?: ExamEditionWhereUniqueInput | ExamEditionWhereUniqueInput[]
    connect?: ExamEditionWhereUniqueInput | ExamEditionWhereUniqueInput[]
    update?: ExamEditionUpdateWithWhereUniqueWithoutBoardInput | ExamEditionUpdateWithWhereUniqueWithoutBoardInput[]
    updateMany?: ExamEditionUpdateManyWithWhereWithoutBoardInput | ExamEditionUpdateManyWithWhereWithoutBoardInput[]
    deleteMany?: ExamEditionScalarWhereInput | ExamEditionScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ExamEditionUncheckedUpdateManyWithoutBoardNestedInput = {
    create?: XOR<ExamEditionCreateWithoutBoardInput, ExamEditionUncheckedCreateWithoutBoardInput> | ExamEditionCreateWithoutBoardInput[] | ExamEditionUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: ExamEditionCreateOrConnectWithoutBoardInput | ExamEditionCreateOrConnectWithoutBoardInput[]
    upsert?: ExamEditionUpsertWithWhereUniqueWithoutBoardInput | ExamEditionUpsertWithWhereUniqueWithoutBoardInput[]
    createMany?: ExamEditionCreateManyBoardInputEnvelope
    set?: ExamEditionWhereUniqueInput | ExamEditionWhereUniqueInput[]
    disconnect?: ExamEditionWhereUniqueInput | ExamEditionWhereUniqueInput[]
    delete?: ExamEditionWhereUniqueInput | ExamEditionWhereUniqueInput[]
    connect?: ExamEditionWhereUniqueInput | ExamEditionWhereUniqueInput[]
    update?: ExamEditionUpdateWithWhereUniqueWithoutBoardInput | ExamEditionUpdateWithWhereUniqueWithoutBoardInput[]
    updateMany?: ExamEditionUpdateManyWithWhereWithoutBoardInput | ExamEditionUpdateManyWithWhereWithoutBoardInput[]
    deleteMany?: ExamEditionScalarWhereInput | ExamEditionScalarWhereInput[]
  }

  export type ExamBoardCreateNestedOneWithoutEditionsInput = {
    create?: XOR<ExamBoardCreateWithoutEditionsInput, ExamBoardUncheckedCreateWithoutEditionsInput>
    connectOrCreate?: ExamBoardCreateOrConnectWithoutEditionsInput
    connect?: ExamBoardWhereUniqueInput
  }

  export type ExamPhaseCreateNestedManyWithoutEditionInput = {
    create?: XOR<ExamPhaseCreateWithoutEditionInput, ExamPhaseUncheckedCreateWithoutEditionInput> | ExamPhaseCreateWithoutEditionInput[] | ExamPhaseUncheckedCreateWithoutEditionInput[]
    connectOrCreate?: ExamPhaseCreateOrConnectWithoutEditionInput | ExamPhaseCreateOrConnectWithoutEditionInput[]
    createMany?: ExamPhaseCreateManyEditionInputEnvelope
    connect?: ExamPhaseWhereUniqueInput | ExamPhaseWhereUniqueInput[]
  }

  export type ExamPhaseUncheckedCreateNestedManyWithoutEditionInput = {
    create?: XOR<ExamPhaseCreateWithoutEditionInput, ExamPhaseUncheckedCreateWithoutEditionInput> | ExamPhaseCreateWithoutEditionInput[] | ExamPhaseUncheckedCreateWithoutEditionInput[]
    connectOrCreate?: ExamPhaseCreateOrConnectWithoutEditionInput | ExamPhaseCreateOrConnectWithoutEditionInput[]
    createMany?: ExamPhaseCreateManyEditionInputEnvelope
    connect?: ExamPhaseWhereUniqueInput | ExamPhaseWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type ExamBoardUpdateOneRequiredWithoutEditionsNestedInput = {
    create?: XOR<ExamBoardCreateWithoutEditionsInput, ExamBoardUncheckedCreateWithoutEditionsInput>
    connectOrCreate?: ExamBoardCreateOrConnectWithoutEditionsInput
    upsert?: ExamBoardUpsertWithoutEditionsInput
    connect?: ExamBoardWhereUniqueInput
    update?: XOR<XOR<ExamBoardUpdateToOneWithWhereWithoutEditionsInput, ExamBoardUpdateWithoutEditionsInput>, ExamBoardUncheckedUpdateWithoutEditionsInput>
  }

  export type ExamPhaseUpdateManyWithoutEditionNestedInput = {
    create?: XOR<ExamPhaseCreateWithoutEditionInput, ExamPhaseUncheckedCreateWithoutEditionInput> | ExamPhaseCreateWithoutEditionInput[] | ExamPhaseUncheckedCreateWithoutEditionInput[]
    connectOrCreate?: ExamPhaseCreateOrConnectWithoutEditionInput | ExamPhaseCreateOrConnectWithoutEditionInput[]
    upsert?: ExamPhaseUpsertWithWhereUniqueWithoutEditionInput | ExamPhaseUpsertWithWhereUniqueWithoutEditionInput[]
    createMany?: ExamPhaseCreateManyEditionInputEnvelope
    set?: ExamPhaseWhereUniqueInput | ExamPhaseWhereUniqueInput[]
    disconnect?: ExamPhaseWhereUniqueInput | ExamPhaseWhereUniqueInput[]
    delete?: ExamPhaseWhereUniqueInput | ExamPhaseWhereUniqueInput[]
    connect?: ExamPhaseWhereUniqueInput | ExamPhaseWhereUniqueInput[]
    update?: ExamPhaseUpdateWithWhereUniqueWithoutEditionInput | ExamPhaseUpdateWithWhereUniqueWithoutEditionInput[]
    updateMany?: ExamPhaseUpdateManyWithWhereWithoutEditionInput | ExamPhaseUpdateManyWithWhereWithoutEditionInput[]
    deleteMany?: ExamPhaseScalarWhereInput | ExamPhaseScalarWhereInput[]
  }

  export type ExamPhaseUncheckedUpdateManyWithoutEditionNestedInput = {
    create?: XOR<ExamPhaseCreateWithoutEditionInput, ExamPhaseUncheckedCreateWithoutEditionInput> | ExamPhaseCreateWithoutEditionInput[] | ExamPhaseUncheckedCreateWithoutEditionInput[]
    connectOrCreate?: ExamPhaseCreateOrConnectWithoutEditionInput | ExamPhaseCreateOrConnectWithoutEditionInput[]
    upsert?: ExamPhaseUpsertWithWhereUniqueWithoutEditionInput | ExamPhaseUpsertWithWhereUniqueWithoutEditionInput[]
    createMany?: ExamPhaseCreateManyEditionInputEnvelope
    set?: ExamPhaseWhereUniqueInput | ExamPhaseWhereUniqueInput[]
    disconnect?: ExamPhaseWhereUniqueInput | ExamPhaseWhereUniqueInput[]
    delete?: ExamPhaseWhereUniqueInput | ExamPhaseWhereUniqueInput[]
    connect?: ExamPhaseWhereUniqueInput | ExamPhaseWhereUniqueInput[]
    update?: ExamPhaseUpdateWithWhereUniqueWithoutEditionInput | ExamPhaseUpdateWithWhereUniqueWithoutEditionInput[]
    updateMany?: ExamPhaseUpdateManyWithWhereWithoutEditionInput | ExamPhaseUpdateManyWithWhereWithoutEditionInput[]
    deleteMany?: ExamPhaseScalarWhereInput | ExamPhaseScalarWhereInput[]
  }

  export type ExamEditionCreateNestedOneWithoutPhasesInput = {
    create?: XOR<ExamEditionCreateWithoutPhasesInput, ExamEditionUncheckedCreateWithoutPhasesInput>
    connectOrCreate?: ExamEditionCreateOrConnectWithoutPhasesInput
    connect?: ExamEditionWhereUniqueInput
  }

  export type QuestionCreateNestedManyWithoutPhaseInput = {
    create?: XOR<QuestionCreateWithoutPhaseInput, QuestionUncheckedCreateWithoutPhaseInput> | QuestionCreateWithoutPhaseInput[] | QuestionUncheckedCreateWithoutPhaseInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutPhaseInput | QuestionCreateOrConnectWithoutPhaseInput[]
    createMany?: QuestionCreateManyPhaseInputEnvelope
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
  }

  export type QuestionUncheckedCreateNestedManyWithoutPhaseInput = {
    create?: XOR<QuestionCreateWithoutPhaseInput, QuestionUncheckedCreateWithoutPhaseInput> | QuestionCreateWithoutPhaseInput[] | QuestionUncheckedCreateWithoutPhaseInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutPhaseInput | QuestionCreateOrConnectWithoutPhaseInput[]
    createMany?: QuestionCreateManyPhaseInputEnvelope
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type ExamEditionUpdateOneRequiredWithoutPhasesNestedInput = {
    create?: XOR<ExamEditionCreateWithoutPhasesInput, ExamEditionUncheckedCreateWithoutPhasesInput>
    connectOrCreate?: ExamEditionCreateOrConnectWithoutPhasesInput
    upsert?: ExamEditionUpsertWithoutPhasesInput
    connect?: ExamEditionWhereUniqueInput
    update?: XOR<XOR<ExamEditionUpdateToOneWithWhereWithoutPhasesInput, ExamEditionUpdateWithoutPhasesInput>, ExamEditionUncheckedUpdateWithoutPhasesInput>
  }

  export type QuestionUpdateManyWithoutPhaseNestedInput = {
    create?: XOR<QuestionCreateWithoutPhaseInput, QuestionUncheckedCreateWithoutPhaseInput> | QuestionCreateWithoutPhaseInput[] | QuestionUncheckedCreateWithoutPhaseInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutPhaseInput | QuestionCreateOrConnectWithoutPhaseInput[]
    upsert?: QuestionUpsertWithWhereUniqueWithoutPhaseInput | QuestionUpsertWithWhereUniqueWithoutPhaseInput[]
    createMany?: QuestionCreateManyPhaseInputEnvelope
    set?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    disconnect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    delete?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    update?: QuestionUpdateWithWhereUniqueWithoutPhaseInput | QuestionUpdateWithWhereUniqueWithoutPhaseInput[]
    updateMany?: QuestionUpdateManyWithWhereWithoutPhaseInput | QuestionUpdateManyWithWhereWithoutPhaseInput[]
    deleteMany?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
  }

  export type QuestionUncheckedUpdateManyWithoutPhaseNestedInput = {
    create?: XOR<QuestionCreateWithoutPhaseInput, QuestionUncheckedCreateWithoutPhaseInput> | QuestionCreateWithoutPhaseInput[] | QuestionUncheckedCreateWithoutPhaseInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutPhaseInput | QuestionCreateOrConnectWithoutPhaseInput[]
    upsert?: QuestionUpsertWithWhereUniqueWithoutPhaseInput | QuestionUpsertWithWhereUniqueWithoutPhaseInput[]
    createMany?: QuestionCreateManyPhaseInputEnvelope
    set?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    disconnect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    delete?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    update?: QuestionUpdateWithWhereUniqueWithoutPhaseInput | QuestionUpdateWithWhereUniqueWithoutPhaseInput[]
    updateMany?: QuestionUpdateManyWithWhereWithoutPhaseInput | QuestionUpdateManyWithWhereWithoutPhaseInput[]
    deleteMany?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
  }

  export type QuestionSubjectCreateNestedManyWithoutSubjectInput = {
    create?: XOR<QuestionSubjectCreateWithoutSubjectInput, QuestionSubjectUncheckedCreateWithoutSubjectInput> | QuestionSubjectCreateWithoutSubjectInput[] | QuestionSubjectUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: QuestionSubjectCreateOrConnectWithoutSubjectInput | QuestionSubjectCreateOrConnectWithoutSubjectInput[]
    createMany?: QuestionSubjectCreateManySubjectInputEnvelope
    connect?: QuestionSubjectWhereUniqueInput | QuestionSubjectWhereUniqueInput[]
  }

  export type QuestionSubjectUncheckedCreateNestedManyWithoutSubjectInput = {
    create?: XOR<QuestionSubjectCreateWithoutSubjectInput, QuestionSubjectUncheckedCreateWithoutSubjectInput> | QuestionSubjectCreateWithoutSubjectInput[] | QuestionSubjectUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: QuestionSubjectCreateOrConnectWithoutSubjectInput | QuestionSubjectCreateOrConnectWithoutSubjectInput[]
    createMany?: QuestionSubjectCreateManySubjectInputEnvelope
    connect?: QuestionSubjectWhereUniqueInput | QuestionSubjectWhereUniqueInput[]
  }

  export type QuestionSubjectUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<QuestionSubjectCreateWithoutSubjectInput, QuestionSubjectUncheckedCreateWithoutSubjectInput> | QuestionSubjectCreateWithoutSubjectInput[] | QuestionSubjectUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: QuestionSubjectCreateOrConnectWithoutSubjectInput | QuestionSubjectCreateOrConnectWithoutSubjectInput[]
    upsert?: QuestionSubjectUpsertWithWhereUniqueWithoutSubjectInput | QuestionSubjectUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: QuestionSubjectCreateManySubjectInputEnvelope
    set?: QuestionSubjectWhereUniqueInput | QuestionSubjectWhereUniqueInput[]
    disconnect?: QuestionSubjectWhereUniqueInput | QuestionSubjectWhereUniqueInput[]
    delete?: QuestionSubjectWhereUniqueInput | QuestionSubjectWhereUniqueInput[]
    connect?: QuestionSubjectWhereUniqueInput | QuestionSubjectWhereUniqueInput[]
    update?: QuestionSubjectUpdateWithWhereUniqueWithoutSubjectInput | QuestionSubjectUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: QuestionSubjectUpdateManyWithWhereWithoutSubjectInput | QuestionSubjectUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: QuestionSubjectScalarWhereInput | QuestionSubjectScalarWhereInput[]
  }

  export type QuestionSubjectUncheckedUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<QuestionSubjectCreateWithoutSubjectInput, QuestionSubjectUncheckedCreateWithoutSubjectInput> | QuestionSubjectCreateWithoutSubjectInput[] | QuestionSubjectUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: QuestionSubjectCreateOrConnectWithoutSubjectInput | QuestionSubjectCreateOrConnectWithoutSubjectInput[]
    upsert?: QuestionSubjectUpsertWithWhereUniqueWithoutSubjectInput | QuestionSubjectUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: QuestionSubjectCreateManySubjectInputEnvelope
    set?: QuestionSubjectWhereUniqueInput | QuestionSubjectWhereUniqueInput[]
    disconnect?: QuestionSubjectWhereUniqueInput | QuestionSubjectWhereUniqueInput[]
    delete?: QuestionSubjectWhereUniqueInput | QuestionSubjectWhereUniqueInput[]
    connect?: QuestionSubjectWhereUniqueInput | QuestionSubjectWhereUniqueInput[]
    update?: QuestionSubjectUpdateWithWhereUniqueWithoutSubjectInput | QuestionSubjectUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: QuestionSubjectUpdateManyWithWhereWithoutSubjectInput | QuestionSubjectUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: QuestionSubjectScalarWhereInput | QuestionSubjectScalarWhereInput[]
  }

  export type QuestionSkillCreateNestedManyWithoutSkillInput = {
    create?: XOR<QuestionSkillCreateWithoutSkillInput, QuestionSkillUncheckedCreateWithoutSkillInput> | QuestionSkillCreateWithoutSkillInput[] | QuestionSkillUncheckedCreateWithoutSkillInput[]
    connectOrCreate?: QuestionSkillCreateOrConnectWithoutSkillInput | QuestionSkillCreateOrConnectWithoutSkillInput[]
    createMany?: QuestionSkillCreateManySkillInputEnvelope
    connect?: QuestionSkillWhereUniqueInput | QuestionSkillWhereUniqueInput[]
  }

  export type QuestionSkillUncheckedCreateNestedManyWithoutSkillInput = {
    create?: XOR<QuestionSkillCreateWithoutSkillInput, QuestionSkillUncheckedCreateWithoutSkillInput> | QuestionSkillCreateWithoutSkillInput[] | QuestionSkillUncheckedCreateWithoutSkillInput[]
    connectOrCreate?: QuestionSkillCreateOrConnectWithoutSkillInput | QuestionSkillCreateOrConnectWithoutSkillInput[]
    createMany?: QuestionSkillCreateManySkillInputEnvelope
    connect?: QuestionSkillWhereUniqueInput | QuestionSkillWhereUniqueInput[]
  }

  export type QuestionSkillUpdateManyWithoutSkillNestedInput = {
    create?: XOR<QuestionSkillCreateWithoutSkillInput, QuestionSkillUncheckedCreateWithoutSkillInput> | QuestionSkillCreateWithoutSkillInput[] | QuestionSkillUncheckedCreateWithoutSkillInput[]
    connectOrCreate?: QuestionSkillCreateOrConnectWithoutSkillInput | QuestionSkillCreateOrConnectWithoutSkillInput[]
    upsert?: QuestionSkillUpsertWithWhereUniqueWithoutSkillInput | QuestionSkillUpsertWithWhereUniqueWithoutSkillInput[]
    createMany?: QuestionSkillCreateManySkillInputEnvelope
    set?: QuestionSkillWhereUniqueInput | QuestionSkillWhereUniqueInput[]
    disconnect?: QuestionSkillWhereUniqueInput | QuestionSkillWhereUniqueInput[]
    delete?: QuestionSkillWhereUniqueInput | QuestionSkillWhereUniqueInput[]
    connect?: QuestionSkillWhereUniqueInput | QuestionSkillWhereUniqueInput[]
    update?: QuestionSkillUpdateWithWhereUniqueWithoutSkillInput | QuestionSkillUpdateWithWhereUniqueWithoutSkillInput[]
    updateMany?: QuestionSkillUpdateManyWithWhereWithoutSkillInput | QuestionSkillUpdateManyWithWhereWithoutSkillInput[]
    deleteMany?: QuestionSkillScalarWhereInput | QuestionSkillScalarWhereInput[]
  }

  export type QuestionSkillUncheckedUpdateManyWithoutSkillNestedInput = {
    create?: XOR<QuestionSkillCreateWithoutSkillInput, QuestionSkillUncheckedCreateWithoutSkillInput> | QuestionSkillCreateWithoutSkillInput[] | QuestionSkillUncheckedCreateWithoutSkillInput[]
    connectOrCreate?: QuestionSkillCreateOrConnectWithoutSkillInput | QuestionSkillCreateOrConnectWithoutSkillInput[]
    upsert?: QuestionSkillUpsertWithWhereUniqueWithoutSkillInput | QuestionSkillUpsertWithWhereUniqueWithoutSkillInput[]
    createMany?: QuestionSkillCreateManySkillInputEnvelope
    set?: QuestionSkillWhereUniqueInput | QuestionSkillWhereUniqueInput[]
    disconnect?: QuestionSkillWhereUniqueInput | QuestionSkillWhereUniqueInput[]
    delete?: QuestionSkillWhereUniqueInput | QuestionSkillWhereUniqueInput[]
    connect?: QuestionSkillWhereUniqueInput | QuestionSkillWhereUniqueInput[]
    update?: QuestionSkillUpdateWithWhereUniqueWithoutSkillInput | QuestionSkillUpdateWithWhereUniqueWithoutSkillInput[]
    updateMany?: QuestionSkillUpdateManyWithWhereWithoutSkillInput | QuestionSkillUpdateManyWithWhereWithoutSkillInput[]
    deleteMany?: QuestionSkillScalarWhereInput | QuestionSkillScalarWhereInput[]
  }

  export type StimulusAssetCreateNestedManyWithoutStimulusInput = {
    create?: XOR<StimulusAssetCreateWithoutStimulusInput, StimulusAssetUncheckedCreateWithoutStimulusInput> | StimulusAssetCreateWithoutStimulusInput[] | StimulusAssetUncheckedCreateWithoutStimulusInput[]
    connectOrCreate?: StimulusAssetCreateOrConnectWithoutStimulusInput | StimulusAssetCreateOrConnectWithoutStimulusInput[]
    createMany?: StimulusAssetCreateManyStimulusInputEnvelope
    connect?: StimulusAssetWhereUniqueInput | StimulusAssetWhereUniqueInput[]
  }

  export type QuestionCreateNestedManyWithoutStimulusInput = {
    create?: XOR<QuestionCreateWithoutStimulusInput, QuestionUncheckedCreateWithoutStimulusInput> | QuestionCreateWithoutStimulusInput[] | QuestionUncheckedCreateWithoutStimulusInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutStimulusInput | QuestionCreateOrConnectWithoutStimulusInput[]
    createMany?: QuestionCreateManyStimulusInputEnvelope
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
  }

  export type StimulusAssetUncheckedCreateNestedManyWithoutStimulusInput = {
    create?: XOR<StimulusAssetCreateWithoutStimulusInput, StimulusAssetUncheckedCreateWithoutStimulusInput> | StimulusAssetCreateWithoutStimulusInput[] | StimulusAssetUncheckedCreateWithoutStimulusInput[]
    connectOrCreate?: StimulusAssetCreateOrConnectWithoutStimulusInput | StimulusAssetCreateOrConnectWithoutStimulusInput[]
    createMany?: StimulusAssetCreateManyStimulusInputEnvelope
    connect?: StimulusAssetWhereUniqueInput | StimulusAssetWhereUniqueInput[]
  }

  export type QuestionUncheckedCreateNestedManyWithoutStimulusInput = {
    create?: XOR<QuestionCreateWithoutStimulusInput, QuestionUncheckedCreateWithoutStimulusInput> | QuestionCreateWithoutStimulusInput[] | QuestionUncheckedCreateWithoutStimulusInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutStimulusInput | QuestionCreateOrConnectWithoutStimulusInput[]
    createMany?: QuestionCreateManyStimulusInputEnvelope
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
  }

  export type StimulusAssetUpdateManyWithoutStimulusNestedInput = {
    create?: XOR<StimulusAssetCreateWithoutStimulusInput, StimulusAssetUncheckedCreateWithoutStimulusInput> | StimulusAssetCreateWithoutStimulusInput[] | StimulusAssetUncheckedCreateWithoutStimulusInput[]
    connectOrCreate?: StimulusAssetCreateOrConnectWithoutStimulusInput | StimulusAssetCreateOrConnectWithoutStimulusInput[]
    upsert?: StimulusAssetUpsertWithWhereUniqueWithoutStimulusInput | StimulusAssetUpsertWithWhereUniqueWithoutStimulusInput[]
    createMany?: StimulusAssetCreateManyStimulusInputEnvelope
    set?: StimulusAssetWhereUniqueInput | StimulusAssetWhereUniqueInput[]
    disconnect?: StimulusAssetWhereUniqueInput | StimulusAssetWhereUniqueInput[]
    delete?: StimulusAssetWhereUniqueInput | StimulusAssetWhereUniqueInput[]
    connect?: StimulusAssetWhereUniqueInput | StimulusAssetWhereUniqueInput[]
    update?: StimulusAssetUpdateWithWhereUniqueWithoutStimulusInput | StimulusAssetUpdateWithWhereUniqueWithoutStimulusInput[]
    updateMany?: StimulusAssetUpdateManyWithWhereWithoutStimulusInput | StimulusAssetUpdateManyWithWhereWithoutStimulusInput[]
    deleteMany?: StimulusAssetScalarWhereInput | StimulusAssetScalarWhereInput[]
  }

  export type QuestionUpdateManyWithoutStimulusNestedInput = {
    create?: XOR<QuestionCreateWithoutStimulusInput, QuestionUncheckedCreateWithoutStimulusInput> | QuestionCreateWithoutStimulusInput[] | QuestionUncheckedCreateWithoutStimulusInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutStimulusInput | QuestionCreateOrConnectWithoutStimulusInput[]
    upsert?: QuestionUpsertWithWhereUniqueWithoutStimulusInput | QuestionUpsertWithWhereUniqueWithoutStimulusInput[]
    createMany?: QuestionCreateManyStimulusInputEnvelope
    set?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    disconnect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    delete?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    update?: QuestionUpdateWithWhereUniqueWithoutStimulusInput | QuestionUpdateWithWhereUniqueWithoutStimulusInput[]
    updateMany?: QuestionUpdateManyWithWhereWithoutStimulusInput | QuestionUpdateManyWithWhereWithoutStimulusInput[]
    deleteMany?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
  }

  export type StimulusAssetUncheckedUpdateManyWithoutStimulusNestedInput = {
    create?: XOR<StimulusAssetCreateWithoutStimulusInput, StimulusAssetUncheckedCreateWithoutStimulusInput> | StimulusAssetCreateWithoutStimulusInput[] | StimulusAssetUncheckedCreateWithoutStimulusInput[]
    connectOrCreate?: StimulusAssetCreateOrConnectWithoutStimulusInput | StimulusAssetCreateOrConnectWithoutStimulusInput[]
    upsert?: StimulusAssetUpsertWithWhereUniqueWithoutStimulusInput | StimulusAssetUpsertWithWhereUniqueWithoutStimulusInput[]
    createMany?: StimulusAssetCreateManyStimulusInputEnvelope
    set?: StimulusAssetWhereUniqueInput | StimulusAssetWhereUniqueInput[]
    disconnect?: StimulusAssetWhereUniqueInput | StimulusAssetWhereUniqueInput[]
    delete?: StimulusAssetWhereUniqueInput | StimulusAssetWhereUniqueInput[]
    connect?: StimulusAssetWhereUniqueInput | StimulusAssetWhereUniqueInput[]
    update?: StimulusAssetUpdateWithWhereUniqueWithoutStimulusInput | StimulusAssetUpdateWithWhereUniqueWithoutStimulusInput[]
    updateMany?: StimulusAssetUpdateManyWithWhereWithoutStimulusInput | StimulusAssetUpdateManyWithWhereWithoutStimulusInput[]
    deleteMany?: StimulusAssetScalarWhereInput | StimulusAssetScalarWhereInput[]
  }

  export type QuestionUncheckedUpdateManyWithoutStimulusNestedInput = {
    create?: XOR<QuestionCreateWithoutStimulusInput, QuestionUncheckedCreateWithoutStimulusInput> | QuestionCreateWithoutStimulusInput[] | QuestionUncheckedCreateWithoutStimulusInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutStimulusInput | QuestionCreateOrConnectWithoutStimulusInput[]
    upsert?: QuestionUpsertWithWhereUniqueWithoutStimulusInput | QuestionUpsertWithWhereUniqueWithoutStimulusInput[]
    createMany?: QuestionCreateManyStimulusInputEnvelope
    set?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    disconnect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    delete?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    update?: QuestionUpdateWithWhereUniqueWithoutStimulusInput | QuestionUpdateWithWhereUniqueWithoutStimulusInput[]
    updateMany?: QuestionUpdateManyWithWhereWithoutStimulusInput | QuestionUpdateManyWithWhereWithoutStimulusInput[]
    deleteMany?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
  }

  export type StimulusCreateNestedOneWithoutAssetsInput = {
    create?: XOR<StimulusCreateWithoutAssetsInput, StimulusUncheckedCreateWithoutAssetsInput>
    connectOrCreate?: StimulusCreateOrConnectWithoutAssetsInput
    connect?: StimulusWhereUniqueInput
  }

  export type StimulusUpdateOneRequiredWithoutAssetsNestedInput = {
    create?: XOR<StimulusCreateWithoutAssetsInput, StimulusUncheckedCreateWithoutAssetsInput>
    connectOrCreate?: StimulusCreateOrConnectWithoutAssetsInput
    upsert?: StimulusUpsertWithoutAssetsInput
    connect?: StimulusWhereUniqueInput
    update?: XOR<XOR<StimulusUpdateToOneWithWhereWithoutAssetsInput, StimulusUpdateWithoutAssetsInput>, StimulusUncheckedUpdateWithoutAssetsInput>
  }

  export type ExamPhaseCreateNestedOneWithoutQuestionsInput = {
    create?: XOR<ExamPhaseCreateWithoutQuestionsInput, ExamPhaseUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: ExamPhaseCreateOrConnectWithoutQuestionsInput
    connect?: ExamPhaseWhereUniqueInput
  }

  export type StimulusCreateNestedOneWithoutQuestionsInput = {
    create?: XOR<StimulusCreateWithoutQuestionsInput, StimulusUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: StimulusCreateOrConnectWithoutQuestionsInput
    connect?: StimulusWhereUniqueInput
  }

  export type QuestionSubjectCreateNestedManyWithoutQuestionInput = {
    create?: XOR<QuestionSubjectCreateWithoutQuestionInput, QuestionSubjectUncheckedCreateWithoutQuestionInput> | QuestionSubjectCreateWithoutQuestionInput[] | QuestionSubjectUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionSubjectCreateOrConnectWithoutQuestionInput | QuestionSubjectCreateOrConnectWithoutQuestionInput[]
    createMany?: QuestionSubjectCreateManyQuestionInputEnvelope
    connect?: QuestionSubjectWhereUniqueInput | QuestionSubjectWhereUniqueInput[]
  }

  export type QuestionSkillCreateNestedManyWithoutQuestionInput = {
    create?: XOR<QuestionSkillCreateWithoutQuestionInput, QuestionSkillUncheckedCreateWithoutQuestionInput> | QuestionSkillCreateWithoutQuestionInput[] | QuestionSkillUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionSkillCreateOrConnectWithoutQuestionInput | QuestionSkillCreateOrConnectWithoutQuestionInput[]
    createMany?: QuestionSkillCreateManyQuestionInputEnvelope
    connect?: QuestionSkillWhereUniqueInput | QuestionSkillWhereUniqueInput[]
  }

  export type McqItemCreateNestedOneWithoutQuestionInput = {
    create?: XOR<McqItemCreateWithoutQuestionInput, McqItemUncheckedCreateWithoutQuestionInput>
    connectOrCreate?: McqItemCreateOrConnectWithoutQuestionInput
    connect?: McqItemWhereUniqueInput
  }

  export type FrItemCreateNestedOneWithoutQuestionInput = {
    create?: XOR<FrItemCreateWithoutQuestionInput, FrItemUncheckedCreateWithoutQuestionInput>
    connectOrCreate?: FrItemCreateOrConnectWithoutQuestionInput
    connect?: FrItemWhereUniqueInput
  }

  export type QuestionSubjectUncheckedCreateNestedManyWithoutQuestionInput = {
    create?: XOR<QuestionSubjectCreateWithoutQuestionInput, QuestionSubjectUncheckedCreateWithoutQuestionInput> | QuestionSubjectCreateWithoutQuestionInput[] | QuestionSubjectUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionSubjectCreateOrConnectWithoutQuestionInput | QuestionSubjectCreateOrConnectWithoutQuestionInput[]
    createMany?: QuestionSubjectCreateManyQuestionInputEnvelope
    connect?: QuestionSubjectWhereUniqueInput | QuestionSubjectWhereUniqueInput[]
  }

  export type QuestionSkillUncheckedCreateNestedManyWithoutQuestionInput = {
    create?: XOR<QuestionSkillCreateWithoutQuestionInput, QuestionSkillUncheckedCreateWithoutQuestionInput> | QuestionSkillCreateWithoutQuestionInput[] | QuestionSkillUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionSkillCreateOrConnectWithoutQuestionInput | QuestionSkillCreateOrConnectWithoutQuestionInput[]
    createMany?: QuestionSkillCreateManyQuestionInputEnvelope
    connect?: QuestionSkillWhereUniqueInput | QuestionSkillWhereUniqueInput[]
  }

  export type McqItemUncheckedCreateNestedOneWithoutQuestionInput = {
    create?: XOR<McqItemCreateWithoutQuestionInput, McqItemUncheckedCreateWithoutQuestionInput>
    connectOrCreate?: McqItemCreateOrConnectWithoutQuestionInput
    connect?: McqItemWhereUniqueInput
  }

  export type FrItemUncheckedCreateNestedOneWithoutQuestionInput = {
    create?: XOR<FrItemCreateWithoutQuestionInput, FrItemUncheckedCreateWithoutQuestionInput>
    connectOrCreate?: FrItemCreateOrConnectWithoutQuestionInput
    connect?: FrItemWhereUniqueInput
  }

  export type NullableEnumDifficultyFieldUpdateOperationsInput = {
    set?: $Enums.Difficulty | null
  }

  export type EnumQuestionStatusFieldUpdateOperationsInput = {
    set?: $Enums.QuestionStatus
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ExamPhaseUpdateOneRequiredWithoutQuestionsNestedInput = {
    create?: XOR<ExamPhaseCreateWithoutQuestionsInput, ExamPhaseUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: ExamPhaseCreateOrConnectWithoutQuestionsInput
    upsert?: ExamPhaseUpsertWithoutQuestionsInput
    connect?: ExamPhaseWhereUniqueInput
    update?: XOR<XOR<ExamPhaseUpdateToOneWithWhereWithoutQuestionsInput, ExamPhaseUpdateWithoutQuestionsInput>, ExamPhaseUncheckedUpdateWithoutQuestionsInput>
  }

  export type StimulusUpdateOneWithoutQuestionsNestedInput = {
    create?: XOR<StimulusCreateWithoutQuestionsInput, StimulusUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: StimulusCreateOrConnectWithoutQuestionsInput
    upsert?: StimulusUpsertWithoutQuestionsInput
    disconnect?: StimulusWhereInput | boolean
    delete?: StimulusWhereInput | boolean
    connect?: StimulusWhereUniqueInput
    update?: XOR<XOR<StimulusUpdateToOneWithWhereWithoutQuestionsInput, StimulusUpdateWithoutQuestionsInput>, StimulusUncheckedUpdateWithoutQuestionsInput>
  }

  export type QuestionSubjectUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<QuestionSubjectCreateWithoutQuestionInput, QuestionSubjectUncheckedCreateWithoutQuestionInput> | QuestionSubjectCreateWithoutQuestionInput[] | QuestionSubjectUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionSubjectCreateOrConnectWithoutQuestionInput | QuestionSubjectCreateOrConnectWithoutQuestionInput[]
    upsert?: QuestionSubjectUpsertWithWhereUniqueWithoutQuestionInput | QuestionSubjectUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: QuestionSubjectCreateManyQuestionInputEnvelope
    set?: QuestionSubjectWhereUniqueInput | QuestionSubjectWhereUniqueInput[]
    disconnect?: QuestionSubjectWhereUniqueInput | QuestionSubjectWhereUniqueInput[]
    delete?: QuestionSubjectWhereUniqueInput | QuestionSubjectWhereUniqueInput[]
    connect?: QuestionSubjectWhereUniqueInput | QuestionSubjectWhereUniqueInput[]
    update?: QuestionSubjectUpdateWithWhereUniqueWithoutQuestionInput | QuestionSubjectUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: QuestionSubjectUpdateManyWithWhereWithoutQuestionInput | QuestionSubjectUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: QuestionSubjectScalarWhereInput | QuestionSubjectScalarWhereInput[]
  }

  export type QuestionSkillUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<QuestionSkillCreateWithoutQuestionInput, QuestionSkillUncheckedCreateWithoutQuestionInput> | QuestionSkillCreateWithoutQuestionInput[] | QuestionSkillUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionSkillCreateOrConnectWithoutQuestionInput | QuestionSkillCreateOrConnectWithoutQuestionInput[]
    upsert?: QuestionSkillUpsertWithWhereUniqueWithoutQuestionInput | QuestionSkillUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: QuestionSkillCreateManyQuestionInputEnvelope
    set?: QuestionSkillWhereUniqueInput | QuestionSkillWhereUniqueInput[]
    disconnect?: QuestionSkillWhereUniqueInput | QuestionSkillWhereUniqueInput[]
    delete?: QuestionSkillWhereUniqueInput | QuestionSkillWhereUniqueInput[]
    connect?: QuestionSkillWhereUniqueInput | QuestionSkillWhereUniqueInput[]
    update?: QuestionSkillUpdateWithWhereUniqueWithoutQuestionInput | QuestionSkillUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: QuestionSkillUpdateManyWithWhereWithoutQuestionInput | QuestionSkillUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: QuestionSkillScalarWhereInput | QuestionSkillScalarWhereInput[]
  }

  export type McqItemUpdateOneWithoutQuestionNestedInput = {
    create?: XOR<McqItemCreateWithoutQuestionInput, McqItemUncheckedCreateWithoutQuestionInput>
    connectOrCreate?: McqItemCreateOrConnectWithoutQuestionInput
    upsert?: McqItemUpsertWithoutQuestionInput
    disconnect?: McqItemWhereInput | boolean
    delete?: McqItemWhereInput | boolean
    connect?: McqItemWhereUniqueInput
    update?: XOR<XOR<McqItemUpdateToOneWithWhereWithoutQuestionInput, McqItemUpdateWithoutQuestionInput>, McqItemUncheckedUpdateWithoutQuestionInput>
  }

  export type FrItemUpdateOneWithoutQuestionNestedInput = {
    create?: XOR<FrItemCreateWithoutQuestionInput, FrItemUncheckedCreateWithoutQuestionInput>
    connectOrCreate?: FrItemCreateOrConnectWithoutQuestionInput
    upsert?: FrItemUpsertWithoutQuestionInput
    disconnect?: FrItemWhereInput | boolean
    delete?: FrItemWhereInput | boolean
    connect?: FrItemWhereUniqueInput
    update?: XOR<XOR<FrItemUpdateToOneWithWhereWithoutQuestionInput, FrItemUpdateWithoutQuestionInput>, FrItemUncheckedUpdateWithoutQuestionInput>
  }

  export type QuestionSubjectUncheckedUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<QuestionSubjectCreateWithoutQuestionInput, QuestionSubjectUncheckedCreateWithoutQuestionInput> | QuestionSubjectCreateWithoutQuestionInput[] | QuestionSubjectUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionSubjectCreateOrConnectWithoutQuestionInput | QuestionSubjectCreateOrConnectWithoutQuestionInput[]
    upsert?: QuestionSubjectUpsertWithWhereUniqueWithoutQuestionInput | QuestionSubjectUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: QuestionSubjectCreateManyQuestionInputEnvelope
    set?: QuestionSubjectWhereUniqueInput | QuestionSubjectWhereUniqueInput[]
    disconnect?: QuestionSubjectWhereUniqueInput | QuestionSubjectWhereUniqueInput[]
    delete?: QuestionSubjectWhereUniqueInput | QuestionSubjectWhereUniqueInput[]
    connect?: QuestionSubjectWhereUniqueInput | QuestionSubjectWhereUniqueInput[]
    update?: QuestionSubjectUpdateWithWhereUniqueWithoutQuestionInput | QuestionSubjectUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: QuestionSubjectUpdateManyWithWhereWithoutQuestionInput | QuestionSubjectUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: QuestionSubjectScalarWhereInput | QuestionSubjectScalarWhereInput[]
  }

  export type QuestionSkillUncheckedUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<QuestionSkillCreateWithoutQuestionInput, QuestionSkillUncheckedCreateWithoutQuestionInput> | QuestionSkillCreateWithoutQuestionInput[] | QuestionSkillUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionSkillCreateOrConnectWithoutQuestionInput | QuestionSkillCreateOrConnectWithoutQuestionInput[]
    upsert?: QuestionSkillUpsertWithWhereUniqueWithoutQuestionInput | QuestionSkillUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: QuestionSkillCreateManyQuestionInputEnvelope
    set?: QuestionSkillWhereUniqueInput | QuestionSkillWhereUniqueInput[]
    disconnect?: QuestionSkillWhereUniqueInput | QuestionSkillWhereUniqueInput[]
    delete?: QuestionSkillWhereUniqueInput | QuestionSkillWhereUniqueInput[]
    connect?: QuestionSkillWhereUniqueInput | QuestionSkillWhereUniqueInput[]
    update?: QuestionSkillUpdateWithWhereUniqueWithoutQuestionInput | QuestionSkillUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: QuestionSkillUpdateManyWithWhereWithoutQuestionInput | QuestionSkillUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: QuestionSkillScalarWhereInput | QuestionSkillScalarWhereInput[]
  }

  export type McqItemUncheckedUpdateOneWithoutQuestionNestedInput = {
    create?: XOR<McqItemCreateWithoutQuestionInput, McqItemUncheckedCreateWithoutQuestionInput>
    connectOrCreate?: McqItemCreateOrConnectWithoutQuestionInput
    upsert?: McqItemUpsertWithoutQuestionInput
    disconnect?: McqItemWhereInput | boolean
    delete?: McqItemWhereInput | boolean
    connect?: McqItemWhereUniqueInput
    update?: XOR<XOR<McqItemUpdateToOneWithWhereWithoutQuestionInput, McqItemUpdateWithoutQuestionInput>, McqItemUncheckedUpdateWithoutQuestionInput>
  }

  export type FrItemUncheckedUpdateOneWithoutQuestionNestedInput = {
    create?: XOR<FrItemCreateWithoutQuestionInput, FrItemUncheckedCreateWithoutQuestionInput>
    connectOrCreate?: FrItemCreateOrConnectWithoutQuestionInput
    upsert?: FrItemUpsertWithoutQuestionInput
    disconnect?: FrItemWhereInput | boolean
    delete?: FrItemWhereInput | boolean
    connect?: FrItemWhereUniqueInput
    update?: XOR<XOR<FrItemUpdateToOneWithWhereWithoutQuestionInput, FrItemUpdateWithoutQuestionInput>, FrItemUncheckedUpdateWithoutQuestionInput>
  }

  export type QuestionCreateNestedOneWithoutSubjectsInput = {
    create?: XOR<QuestionCreateWithoutSubjectsInput, QuestionUncheckedCreateWithoutSubjectsInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutSubjectsInput
    connect?: QuestionWhereUniqueInput
  }

  export type SubjectCreateNestedOneWithoutQuestionsInput = {
    create?: XOR<SubjectCreateWithoutQuestionsInput, SubjectUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutQuestionsInput
    connect?: SubjectWhereUniqueInput
  }

  export type QuestionUpdateOneRequiredWithoutSubjectsNestedInput = {
    create?: XOR<QuestionCreateWithoutSubjectsInput, QuestionUncheckedCreateWithoutSubjectsInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutSubjectsInput
    upsert?: QuestionUpsertWithoutSubjectsInput
    connect?: QuestionWhereUniqueInput
    update?: XOR<XOR<QuestionUpdateToOneWithWhereWithoutSubjectsInput, QuestionUpdateWithoutSubjectsInput>, QuestionUncheckedUpdateWithoutSubjectsInput>
  }

  export type SubjectUpdateOneRequiredWithoutQuestionsNestedInput = {
    create?: XOR<SubjectCreateWithoutQuestionsInput, SubjectUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutQuestionsInput
    upsert?: SubjectUpsertWithoutQuestionsInput
    connect?: SubjectWhereUniqueInput
    update?: XOR<XOR<SubjectUpdateToOneWithWhereWithoutQuestionsInput, SubjectUpdateWithoutQuestionsInput>, SubjectUncheckedUpdateWithoutQuestionsInput>
  }

  export type QuestionCreateNestedOneWithoutSkillsInput = {
    create?: XOR<QuestionCreateWithoutSkillsInput, QuestionUncheckedCreateWithoutSkillsInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutSkillsInput
    connect?: QuestionWhereUniqueInput
  }

  export type SkillCreateNestedOneWithoutQuestionsInput = {
    create?: XOR<SkillCreateWithoutQuestionsInput, SkillUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: SkillCreateOrConnectWithoutQuestionsInput
    connect?: SkillWhereUniqueInput
  }

  export type QuestionUpdateOneRequiredWithoutSkillsNestedInput = {
    create?: XOR<QuestionCreateWithoutSkillsInput, QuestionUncheckedCreateWithoutSkillsInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutSkillsInput
    upsert?: QuestionUpsertWithoutSkillsInput
    connect?: QuestionWhereUniqueInput
    update?: XOR<XOR<QuestionUpdateToOneWithWhereWithoutSkillsInput, QuestionUpdateWithoutSkillsInput>, QuestionUncheckedUpdateWithoutSkillsInput>
  }

  export type SkillUpdateOneRequiredWithoutQuestionsNestedInput = {
    create?: XOR<SkillCreateWithoutQuestionsInput, SkillUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: SkillCreateOrConnectWithoutQuestionsInput
    upsert?: SkillUpsertWithoutQuestionsInput
    connect?: SkillWhereUniqueInput
    update?: XOR<XOR<SkillUpdateToOneWithWhereWithoutQuestionsInput, SkillUpdateWithoutQuestionsInput>, SkillUncheckedUpdateWithoutQuestionsInput>
  }

  export type QuestionCreateNestedOneWithoutMcqInput = {
    create?: XOR<QuestionCreateWithoutMcqInput, QuestionUncheckedCreateWithoutMcqInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutMcqInput
    connect?: QuestionWhereUniqueInput
  }

  export type McqOptionCreateNestedManyWithoutMcqInput = {
    create?: XOR<McqOptionCreateWithoutMcqInput, McqOptionUncheckedCreateWithoutMcqInput> | McqOptionCreateWithoutMcqInput[] | McqOptionUncheckedCreateWithoutMcqInput[]
    connectOrCreate?: McqOptionCreateOrConnectWithoutMcqInput | McqOptionCreateOrConnectWithoutMcqInput[]
    createMany?: McqOptionCreateManyMcqInputEnvelope
    connect?: McqOptionWhereUniqueInput | McqOptionWhereUniqueInput[]
  }

  export type McqOptionUncheckedCreateNestedManyWithoutMcqInput = {
    create?: XOR<McqOptionCreateWithoutMcqInput, McqOptionUncheckedCreateWithoutMcqInput> | McqOptionCreateWithoutMcqInput[] | McqOptionUncheckedCreateWithoutMcqInput[]
    connectOrCreate?: McqOptionCreateOrConnectWithoutMcqInput | McqOptionCreateOrConnectWithoutMcqInput[]
    createMany?: McqOptionCreateManyMcqInputEnvelope
    connect?: McqOptionWhereUniqueInput | McqOptionWhereUniqueInput[]
  }

  export type EnumOptionKeyFieldUpdateOperationsInput = {
    set?: $Enums.OptionKey
  }

  export type QuestionUpdateOneRequiredWithoutMcqNestedInput = {
    create?: XOR<QuestionCreateWithoutMcqInput, QuestionUncheckedCreateWithoutMcqInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutMcqInput
    upsert?: QuestionUpsertWithoutMcqInput
    connect?: QuestionWhereUniqueInput
    update?: XOR<XOR<QuestionUpdateToOneWithWhereWithoutMcqInput, QuestionUpdateWithoutMcqInput>, QuestionUncheckedUpdateWithoutMcqInput>
  }

  export type McqOptionUpdateManyWithoutMcqNestedInput = {
    create?: XOR<McqOptionCreateWithoutMcqInput, McqOptionUncheckedCreateWithoutMcqInput> | McqOptionCreateWithoutMcqInput[] | McqOptionUncheckedCreateWithoutMcqInput[]
    connectOrCreate?: McqOptionCreateOrConnectWithoutMcqInput | McqOptionCreateOrConnectWithoutMcqInput[]
    upsert?: McqOptionUpsertWithWhereUniqueWithoutMcqInput | McqOptionUpsertWithWhereUniqueWithoutMcqInput[]
    createMany?: McqOptionCreateManyMcqInputEnvelope
    set?: McqOptionWhereUniqueInput | McqOptionWhereUniqueInput[]
    disconnect?: McqOptionWhereUniqueInput | McqOptionWhereUniqueInput[]
    delete?: McqOptionWhereUniqueInput | McqOptionWhereUniqueInput[]
    connect?: McqOptionWhereUniqueInput | McqOptionWhereUniqueInput[]
    update?: McqOptionUpdateWithWhereUniqueWithoutMcqInput | McqOptionUpdateWithWhereUniqueWithoutMcqInput[]
    updateMany?: McqOptionUpdateManyWithWhereWithoutMcqInput | McqOptionUpdateManyWithWhereWithoutMcqInput[]
    deleteMany?: McqOptionScalarWhereInput | McqOptionScalarWhereInput[]
  }

  export type McqOptionUncheckedUpdateManyWithoutMcqNestedInput = {
    create?: XOR<McqOptionCreateWithoutMcqInput, McqOptionUncheckedCreateWithoutMcqInput> | McqOptionCreateWithoutMcqInput[] | McqOptionUncheckedCreateWithoutMcqInput[]
    connectOrCreate?: McqOptionCreateOrConnectWithoutMcqInput | McqOptionCreateOrConnectWithoutMcqInput[]
    upsert?: McqOptionUpsertWithWhereUniqueWithoutMcqInput | McqOptionUpsertWithWhereUniqueWithoutMcqInput[]
    createMany?: McqOptionCreateManyMcqInputEnvelope
    set?: McqOptionWhereUniqueInput | McqOptionWhereUniqueInput[]
    disconnect?: McqOptionWhereUniqueInput | McqOptionWhereUniqueInput[]
    delete?: McqOptionWhereUniqueInput | McqOptionWhereUniqueInput[]
    connect?: McqOptionWhereUniqueInput | McqOptionWhereUniqueInput[]
    update?: McqOptionUpdateWithWhereUniqueWithoutMcqInput | McqOptionUpdateWithWhereUniqueWithoutMcqInput[]
    updateMany?: McqOptionUpdateManyWithWhereWithoutMcqInput | McqOptionUpdateManyWithWhereWithoutMcqInput[]
    deleteMany?: McqOptionScalarWhereInput | McqOptionScalarWhereInput[]
  }

  export type McqItemCreateNestedOneWithoutOptionsInput = {
    create?: XOR<McqItemCreateWithoutOptionsInput, McqItemUncheckedCreateWithoutOptionsInput>
    connectOrCreate?: McqItemCreateOrConnectWithoutOptionsInput
    connect?: McqItemWhereUniqueInput
  }

  export type McqItemUpdateOneRequiredWithoutOptionsNestedInput = {
    create?: XOR<McqItemCreateWithoutOptionsInput, McqItemUncheckedCreateWithoutOptionsInput>
    connectOrCreate?: McqItemCreateOrConnectWithoutOptionsInput
    upsert?: McqItemUpsertWithoutOptionsInput
    connect?: McqItemWhereUniqueInput
    update?: XOR<XOR<McqItemUpdateToOneWithWhereWithoutOptionsInput, McqItemUpdateWithoutOptionsInput>, McqItemUncheckedUpdateWithoutOptionsInput>
  }

  export type QuestionCreateNestedOneWithoutFrInput = {
    create?: XOR<QuestionCreateWithoutFrInput, QuestionUncheckedCreateWithoutFrInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutFrInput
    connect?: QuestionWhereUniqueInput
  }

  export type FrRubricCreateNestedManyWithoutFrInput = {
    create?: XOR<FrRubricCreateWithoutFrInput, FrRubricUncheckedCreateWithoutFrInput> | FrRubricCreateWithoutFrInput[] | FrRubricUncheckedCreateWithoutFrInput[]
    connectOrCreate?: FrRubricCreateOrConnectWithoutFrInput | FrRubricCreateOrConnectWithoutFrInput[]
    createMany?: FrRubricCreateManyFrInputEnvelope
    connect?: FrRubricWhereUniqueInput | FrRubricWhereUniqueInput[]
  }

  export type FrAnswerExpectedCreateNestedManyWithoutFrItemInput = {
    create?: XOR<FrAnswerExpectedCreateWithoutFrItemInput, FrAnswerExpectedUncheckedCreateWithoutFrItemInput> | FrAnswerExpectedCreateWithoutFrItemInput[] | FrAnswerExpectedUncheckedCreateWithoutFrItemInput[]
    connectOrCreate?: FrAnswerExpectedCreateOrConnectWithoutFrItemInput | FrAnswerExpectedCreateOrConnectWithoutFrItemInput[]
    createMany?: FrAnswerExpectedCreateManyFrItemInputEnvelope
    connect?: FrAnswerExpectedWhereUniqueInput | FrAnswerExpectedWhereUniqueInput[]
  }

  export type FrRubricUncheckedCreateNestedManyWithoutFrInput = {
    create?: XOR<FrRubricCreateWithoutFrInput, FrRubricUncheckedCreateWithoutFrInput> | FrRubricCreateWithoutFrInput[] | FrRubricUncheckedCreateWithoutFrInput[]
    connectOrCreate?: FrRubricCreateOrConnectWithoutFrInput | FrRubricCreateOrConnectWithoutFrInput[]
    createMany?: FrRubricCreateManyFrInputEnvelope
    connect?: FrRubricWhereUniqueInput | FrRubricWhereUniqueInput[]
  }

  export type FrAnswerExpectedUncheckedCreateNestedManyWithoutFrItemInput = {
    create?: XOR<FrAnswerExpectedCreateWithoutFrItemInput, FrAnswerExpectedUncheckedCreateWithoutFrItemInput> | FrAnswerExpectedCreateWithoutFrItemInput[] | FrAnswerExpectedUncheckedCreateWithoutFrItemInput[]
    connectOrCreate?: FrAnswerExpectedCreateOrConnectWithoutFrItemInput | FrAnswerExpectedCreateOrConnectWithoutFrItemInput[]
    createMany?: FrAnswerExpectedCreateManyFrItemInputEnvelope
    connect?: FrAnswerExpectedWhereUniqueInput | FrAnswerExpectedWhereUniqueInput[]
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type QuestionUpdateOneRequiredWithoutFrNestedInput = {
    create?: XOR<QuestionCreateWithoutFrInput, QuestionUncheckedCreateWithoutFrInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutFrInput
    upsert?: QuestionUpsertWithoutFrInput
    connect?: QuestionWhereUniqueInput
    update?: XOR<XOR<QuestionUpdateToOneWithWhereWithoutFrInput, QuestionUpdateWithoutFrInput>, QuestionUncheckedUpdateWithoutFrInput>
  }

  export type FrRubricUpdateManyWithoutFrNestedInput = {
    create?: XOR<FrRubricCreateWithoutFrInput, FrRubricUncheckedCreateWithoutFrInput> | FrRubricCreateWithoutFrInput[] | FrRubricUncheckedCreateWithoutFrInput[]
    connectOrCreate?: FrRubricCreateOrConnectWithoutFrInput | FrRubricCreateOrConnectWithoutFrInput[]
    upsert?: FrRubricUpsertWithWhereUniqueWithoutFrInput | FrRubricUpsertWithWhereUniqueWithoutFrInput[]
    createMany?: FrRubricCreateManyFrInputEnvelope
    set?: FrRubricWhereUniqueInput | FrRubricWhereUniqueInput[]
    disconnect?: FrRubricWhereUniqueInput | FrRubricWhereUniqueInput[]
    delete?: FrRubricWhereUniqueInput | FrRubricWhereUniqueInput[]
    connect?: FrRubricWhereUniqueInput | FrRubricWhereUniqueInput[]
    update?: FrRubricUpdateWithWhereUniqueWithoutFrInput | FrRubricUpdateWithWhereUniqueWithoutFrInput[]
    updateMany?: FrRubricUpdateManyWithWhereWithoutFrInput | FrRubricUpdateManyWithWhereWithoutFrInput[]
    deleteMany?: FrRubricScalarWhereInput | FrRubricScalarWhereInput[]
  }

  export type FrAnswerExpectedUpdateManyWithoutFrItemNestedInput = {
    create?: XOR<FrAnswerExpectedCreateWithoutFrItemInput, FrAnswerExpectedUncheckedCreateWithoutFrItemInput> | FrAnswerExpectedCreateWithoutFrItemInput[] | FrAnswerExpectedUncheckedCreateWithoutFrItemInput[]
    connectOrCreate?: FrAnswerExpectedCreateOrConnectWithoutFrItemInput | FrAnswerExpectedCreateOrConnectWithoutFrItemInput[]
    upsert?: FrAnswerExpectedUpsertWithWhereUniqueWithoutFrItemInput | FrAnswerExpectedUpsertWithWhereUniqueWithoutFrItemInput[]
    createMany?: FrAnswerExpectedCreateManyFrItemInputEnvelope
    set?: FrAnswerExpectedWhereUniqueInput | FrAnswerExpectedWhereUniqueInput[]
    disconnect?: FrAnswerExpectedWhereUniqueInput | FrAnswerExpectedWhereUniqueInput[]
    delete?: FrAnswerExpectedWhereUniqueInput | FrAnswerExpectedWhereUniqueInput[]
    connect?: FrAnswerExpectedWhereUniqueInput | FrAnswerExpectedWhereUniqueInput[]
    update?: FrAnswerExpectedUpdateWithWhereUniqueWithoutFrItemInput | FrAnswerExpectedUpdateWithWhereUniqueWithoutFrItemInput[]
    updateMany?: FrAnswerExpectedUpdateManyWithWhereWithoutFrItemInput | FrAnswerExpectedUpdateManyWithWhereWithoutFrItemInput[]
    deleteMany?: FrAnswerExpectedScalarWhereInput | FrAnswerExpectedScalarWhereInput[]
  }

  export type FrRubricUncheckedUpdateManyWithoutFrNestedInput = {
    create?: XOR<FrRubricCreateWithoutFrInput, FrRubricUncheckedCreateWithoutFrInput> | FrRubricCreateWithoutFrInput[] | FrRubricUncheckedCreateWithoutFrInput[]
    connectOrCreate?: FrRubricCreateOrConnectWithoutFrInput | FrRubricCreateOrConnectWithoutFrInput[]
    upsert?: FrRubricUpsertWithWhereUniqueWithoutFrInput | FrRubricUpsertWithWhereUniqueWithoutFrInput[]
    createMany?: FrRubricCreateManyFrInputEnvelope
    set?: FrRubricWhereUniqueInput | FrRubricWhereUniqueInput[]
    disconnect?: FrRubricWhereUniqueInput | FrRubricWhereUniqueInput[]
    delete?: FrRubricWhereUniqueInput | FrRubricWhereUniqueInput[]
    connect?: FrRubricWhereUniqueInput | FrRubricWhereUniqueInput[]
    update?: FrRubricUpdateWithWhereUniqueWithoutFrInput | FrRubricUpdateWithWhereUniqueWithoutFrInput[]
    updateMany?: FrRubricUpdateManyWithWhereWithoutFrInput | FrRubricUpdateManyWithWhereWithoutFrInput[]
    deleteMany?: FrRubricScalarWhereInput | FrRubricScalarWhereInput[]
  }

  export type FrAnswerExpectedUncheckedUpdateManyWithoutFrItemNestedInput = {
    create?: XOR<FrAnswerExpectedCreateWithoutFrItemInput, FrAnswerExpectedUncheckedCreateWithoutFrItemInput> | FrAnswerExpectedCreateWithoutFrItemInput[] | FrAnswerExpectedUncheckedCreateWithoutFrItemInput[]
    connectOrCreate?: FrAnswerExpectedCreateOrConnectWithoutFrItemInput | FrAnswerExpectedCreateOrConnectWithoutFrItemInput[]
    upsert?: FrAnswerExpectedUpsertWithWhereUniqueWithoutFrItemInput | FrAnswerExpectedUpsertWithWhereUniqueWithoutFrItemInput[]
    createMany?: FrAnswerExpectedCreateManyFrItemInputEnvelope
    set?: FrAnswerExpectedWhereUniqueInput | FrAnswerExpectedWhereUniqueInput[]
    disconnect?: FrAnswerExpectedWhereUniqueInput | FrAnswerExpectedWhereUniqueInput[]
    delete?: FrAnswerExpectedWhereUniqueInput | FrAnswerExpectedWhereUniqueInput[]
    connect?: FrAnswerExpectedWhereUniqueInput | FrAnswerExpectedWhereUniqueInput[]
    update?: FrAnswerExpectedUpdateWithWhereUniqueWithoutFrItemInput | FrAnswerExpectedUpdateWithWhereUniqueWithoutFrItemInput[]
    updateMany?: FrAnswerExpectedUpdateManyWithWhereWithoutFrItemInput | FrAnswerExpectedUpdateManyWithWhereWithoutFrItemInput[]
    deleteMany?: FrAnswerExpectedScalarWhereInput | FrAnswerExpectedScalarWhereInput[]
  }

  export type FrItemCreateNestedOneWithoutExpectedAnswersInput = {
    create?: XOR<FrItemCreateWithoutExpectedAnswersInput, FrItemUncheckedCreateWithoutExpectedAnswersInput>
    connectOrCreate?: FrItemCreateOrConnectWithoutExpectedAnswersInput
    connect?: FrItemWhereUniqueInput
  }

  export type FrItemUpdateOneRequiredWithoutExpectedAnswersNestedInput = {
    create?: XOR<FrItemCreateWithoutExpectedAnswersInput, FrItemUncheckedCreateWithoutExpectedAnswersInput>
    connectOrCreate?: FrItemCreateOrConnectWithoutExpectedAnswersInput
    upsert?: FrItemUpsertWithoutExpectedAnswersInput
    connect?: FrItemWhereUniqueInput
    update?: XOR<XOR<FrItemUpdateToOneWithWhereWithoutExpectedAnswersInput, FrItemUpdateWithoutExpectedAnswersInput>, FrItemUncheckedUpdateWithoutExpectedAnswersInput>
  }

  export type FrItemCreateNestedOneWithoutRubricsInput = {
    create?: XOR<FrItemCreateWithoutRubricsInput, FrItemUncheckedCreateWithoutRubricsInput>
    connectOrCreate?: FrItemCreateOrConnectWithoutRubricsInput
    connect?: FrItemWhereUniqueInput
  }

  export type FrItemUpdateOneRequiredWithoutRubricsNestedInput = {
    create?: XOR<FrItemCreateWithoutRubricsInput, FrItemUncheckedCreateWithoutRubricsInput>
    connectOrCreate?: FrItemCreateOrConnectWithoutRubricsInput
    upsert?: FrItemUpsertWithoutRubricsInput
    connect?: FrItemWhereUniqueInput
    update?: XOR<XOR<FrItemUpdateToOneWithWhereWithoutRubricsInput, FrItemUpdateWithoutRubricsInput>, FrItemUncheckedUpdateWithoutRubricsInput>
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type UserRoleCreateNestedManyWithoutUserInput = {
    create?: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput> | UserRoleCreateWithoutUserInput[] | UserRoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutUserInput | UserRoleCreateOrConnectWithoutUserInput[]
    createMany?: UserRoleCreateManyUserInputEnvelope
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
  }

  export type UserPermissionCreateNestedManyWithoutUserInput = {
    create?: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput> | UserPermissionCreateWithoutUserInput[] | UserPermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutUserInput | UserPermissionCreateOrConnectWithoutUserInput[]
    createMany?: UserPermissionCreateManyUserInputEnvelope
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type UserRoleUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput> | UserRoleCreateWithoutUserInput[] | UserRoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutUserInput | UserRoleCreateOrConnectWithoutUserInput[]
    createMany?: UserRoleCreateManyUserInputEnvelope
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
  }

  export type UserPermissionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput> | UserPermissionCreateWithoutUserInput[] | UserPermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutUserInput | UserPermissionCreateOrConnectWithoutUserInput[]
    createMany?: UserPermissionCreateManyUserInputEnvelope
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type UserRoleUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput> | UserRoleCreateWithoutUserInput[] | UserRoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutUserInput | UserRoleCreateOrConnectWithoutUserInput[]
    upsert?: UserRoleUpsertWithWhereUniqueWithoutUserInput | UserRoleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserRoleCreateManyUserInputEnvelope
    set?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    disconnect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    delete?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    update?: UserRoleUpdateWithWhereUniqueWithoutUserInput | UserRoleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserRoleUpdateManyWithWhereWithoutUserInput | UserRoleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
  }

  export type UserPermissionUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput> | UserPermissionCreateWithoutUserInput[] | UserPermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutUserInput | UserPermissionCreateOrConnectWithoutUserInput[]
    upsert?: UserPermissionUpsertWithWhereUniqueWithoutUserInput | UserPermissionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserPermissionCreateManyUserInputEnvelope
    set?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    disconnect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    delete?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    update?: UserPermissionUpdateWithWhereUniqueWithoutUserInput | UserPermissionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserPermissionUpdateManyWithWhereWithoutUserInput | UserPermissionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type UserRoleUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput> | UserRoleCreateWithoutUserInput[] | UserRoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutUserInput | UserRoleCreateOrConnectWithoutUserInput[]
    upsert?: UserRoleUpsertWithWhereUniqueWithoutUserInput | UserRoleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserRoleCreateManyUserInputEnvelope
    set?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    disconnect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    delete?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    update?: UserRoleUpdateWithWhereUniqueWithoutUserInput | UserRoleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserRoleUpdateManyWithWhereWithoutUserInput | UserRoleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
  }

  export type UserPermissionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput> | UserPermissionCreateWithoutUserInput[] | UserPermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutUserInput | UserPermissionCreateOrConnectWithoutUserInput[]
    upsert?: UserPermissionUpsertWithWhereUniqueWithoutUserInput | UserPermissionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserPermissionCreateManyUserInputEnvelope
    set?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    disconnect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    delete?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    update?: UserPermissionUpdateWithWhereUniqueWithoutUserInput | UserPermissionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserPermissionUpdateManyWithWhereWithoutUserInput | UserPermissionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserRoleCreateNestedManyWithoutRoleInput = {
    create?: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput> | UserRoleCreateWithoutRoleInput[] | UserRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutRoleInput | UserRoleCreateOrConnectWithoutRoleInput[]
    createMany?: UserRoleCreateManyRoleInputEnvelope
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
  }

  export type RolePermissionCreateNestedManyWithoutRoleInput = {
    create?: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput> | RolePermissionCreateWithoutRoleInput[] | RolePermissionUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutRoleInput | RolePermissionCreateOrConnectWithoutRoleInput[]
    createMany?: RolePermissionCreateManyRoleInputEnvelope
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
  }

  export type UserRoleUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput> | UserRoleCreateWithoutRoleInput[] | UserRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutRoleInput | UserRoleCreateOrConnectWithoutRoleInput[]
    createMany?: UserRoleCreateManyRoleInputEnvelope
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
  }

  export type RolePermissionUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput> | RolePermissionCreateWithoutRoleInput[] | RolePermissionUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutRoleInput | RolePermissionCreateOrConnectWithoutRoleInput[]
    createMany?: RolePermissionCreateManyRoleInputEnvelope
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
  }

  export type UserRoleUpdateManyWithoutRoleNestedInput = {
    create?: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput> | UserRoleCreateWithoutRoleInput[] | UserRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutRoleInput | UserRoleCreateOrConnectWithoutRoleInput[]
    upsert?: UserRoleUpsertWithWhereUniqueWithoutRoleInput | UserRoleUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: UserRoleCreateManyRoleInputEnvelope
    set?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    disconnect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    delete?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    update?: UserRoleUpdateWithWhereUniqueWithoutRoleInput | UserRoleUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: UserRoleUpdateManyWithWhereWithoutRoleInput | UserRoleUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
  }

  export type RolePermissionUpdateManyWithoutRoleNestedInput = {
    create?: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput> | RolePermissionCreateWithoutRoleInput[] | RolePermissionUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutRoleInput | RolePermissionCreateOrConnectWithoutRoleInput[]
    upsert?: RolePermissionUpsertWithWhereUniqueWithoutRoleInput | RolePermissionUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: RolePermissionCreateManyRoleInputEnvelope
    set?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    disconnect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    delete?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    update?: RolePermissionUpdateWithWhereUniqueWithoutRoleInput | RolePermissionUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: RolePermissionUpdateManyWithWhereWithoutRoleInput | RolePermissionUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
  }

  export type UserRoleUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput> | UserRoleCreateWithoutRoleInput[] | UserRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutRoleInput | UserRoleCreateOrConnectWithoutRoleInput[]
    upsert?: UserRoleUpsertWithWhereUniqueWithoutRoleInput | UserRoleUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: UserRoleCreateManyRoleInputEnvelope
    set?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    disconnect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    delete?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    update?: UserRoleUpdateWithWhereUniqueWithoutRoleInput | UserRoleUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: UserRoleUpdateManyWithWhereWithoutRoleInput | UserRoleUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
  }

  export type RolePermissionUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput> | RolePermissionCreateWithoutRoleInput[] | RolePermissionUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutRoleInput | RolePermissionCreateOrConnectWithoutRoleInput[]
    upsert?: RolePermissionUpsertWithWhereUniqueWithoutRoleInput | RolePermissionUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: RolePermissionCreateManyRoleInputEnvelope
    set?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    disconnect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    delete?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    update?: RolePermissionUpdateWithWhereUniqueWithoutRoleInput | RolePermissionUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: RolePermissionUpdateManyWithWhereWithoutRoleInput | RolePermissionUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
  }

  export type RolePermissionCreateNestedManyWithoutPermissionInput = {
    create?: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput> | RolePermissionCreateWithoutPermissionInput[] | RolePermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutPermissionInput | RolePermissionCreateOrConnectWithoutPermissionInput[]
    createMany?: RolePermissionCreateManyPermissionInputEnvelope
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
  }

  export type UserPermissionCreateNestedManyWithoutPermissionInput = {
    create?: XOR<UserPermissionCreateWithoutPermissionInput, UserPermissionUncheckedCreateWithoutPermissionInput> | UserPermissionCreateWithoutPermissionInput[] | UserPermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutPermissionInput | UserPermissionCreateOrConnectWithoutPermissionInput[]
    createMany?: UserPermissionCreateManyPermissionInputEnvelope
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
  }

  export type RolePermissionUncheckedCreateNestedManyWithoutPermissionInput = {
    create?: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput> | RolePermissionCreateWithoutPermissionInput[] | RolePermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutPermissionInput | RolePermissionCreateOrConnectWithoutPermissionInput[]
    createMany?: RolePermissionCreateManyPermissionInputEnvelope
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
  }

  export type UserPermissionUncheckedCreateNestedManyWithoutPermissionInput = {
    create?: XOR<UserPermissionCreateWithoutPermissionInput, UserPermissionUncheckedCreateWithoutPermissionInput> | UserPermissionCreateWithoutPermissionInput[] | UserPermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutPermissionInput | UserPermissionCreateOrConnectWithoutPermissionInput[]
    createMany?: UserPermissionCreateManyPermissionInputEnvelope
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
  }

  export type RolePermissionUpdateManyWithoutPermissionNestedInput = {
    create?: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput> | RolePermissionCreateWithoutPermissionInput[] | RolePermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutPermissionInput | RolePermissionCreateOrConnectWithoutPermissionInput[]
    upsert?: RolePermissionUpsertWithWhereUniqueWithoutPermissionInput | RolePermissionUpsertWithWhereUniqueWithoutPermissionInput[]
    createMany?: RolePermissionCreateManyPermissionInputEnvelope
    set?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    disconnect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    delete?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    update?: RolePermissionUpdateWithWhereUniqueWithoutPermissionInput | RolePermissionUpdateWithWhereUniqueWithoutPermissionInput[]
    updateMany?: RolePermissionUpdateManyWithWhereWithoutPermissionInput | RolePermissionUpdateManyWithWhereWithoutPermissionInput[]
    deleteMany?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
  }

  export type UserPermissionUpdateManyWithoutPermissionNestedInput = {
    create?: XOR<UserPermissionCreateWithoutPermissionInput, UserPermissionUncheckedCreateWithoutPermissionInput> | UserPermissionCreateWithoutPermissionInput[] | UserPermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutPermissionInput | UserPermissionCreateOrConnectWithoutPermissionInput[]
    upsert?: UserPermissionUpsertWithWhereUniqueWithoutPermissionInput | UserPermissionUpsertWithWhereUniqueWithoutPermissionInput[]
    createMany?: UserPermissionCreateManyPermissionInputEnvelope
    set?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    disconnect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    delete?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    update?: UserPermissionUpdateWithWhereUniqueWithoutPermissionInput | UserPermissionUpdateWithWhereUniqueWithoutPermissionInput[]
    updateMany?: UserPermissionUpdateManyWithWhereWithoutPermissionInput | UserPermissionUpdateManyWithWhereWithoutPermissionInput[]
    deleteMany?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
  }

  export type RolePermissionUncheckedUpdateManyWithoutPermissionNestedInput = {
    create?: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput> | RolePermissionCreateWithoutPermissionInput[] | RolePermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutPermissionInput | RolePermissionCreateOrConnectWithoutPermissionInput[]
    upsert?: RolePermissionUpsertWithWhereUniqueWithoutPermissionInput | RolePermissionUpsertWithWhereUniqueWithoutPermissionInput[]
    createMany?: RolePermissionCreateManyPermissionInputEnvelope
    set?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    disconnect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    delete?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    update?: RolePermissionUpdateWithWhereUniqueWithoutPermissionInput | RolePermissionUpdateWithWhereUniqueWithoutPermissionInput[]
    updateMany?: RolePermissionUpdateManyWithWhereWithoutPermissionInput | RolePermissionUpdateManyWithWhereWithoutPermissionInput[]
    deleteMany?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
  }

  export type UserPermissionUncheckedUpdateManyWithoutPermissionNestedInput = {
    create?: XOR<UserPermissionCreateWithoutPermissionInput, UserPermissionUncheckedCreateWithoutPermissionInput> | UserPermissionCreateWithoutPermissionInput[] | UserPermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutPermissionInput | UserPermissionCreateOrConnectWithoutPermissionInput[]
    upsert?: UserPermissionUpsertWithWhereUniqueWithoutPermissionInput | UserPermissionUpsertWithWhereUniqueWithoutPermissionInput[]
    createMany?: UserPermissionCreateManyPermissionInputEnvelope
    set?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    disconnect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    delete?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    update?: UserPermissionUpdateWithWhereUniqueWithoutPermissionInput | UserPermissionUpdateWithWhereUniqueWithoutPermissionInput[]
    updateMany?: UserPermissionUpdateManyWithWhereWithoutPermissionInput | UserPermissionUpdateManyWithWhereWithoutPermissionInput[]
    deleteMany?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
  }

  export type RoleCreateNestedOneWithoutPermsInput = {
    create?: XOR<RoleCreateWithoutPermsInput, RoleUncheckedCreateWithoutPermsInput>
    connectOrCreate?: RoleCreateOrConnectWithoutPermsInput
    connect?: RoleWhereUniqueInput
  }

  export type PermissionCreateNestedOneWithoutRolesInput = {
    create?: XOR<PermissionCreateWithoutRolesInput, PermissionUncheckedCreateWithoutRolesInput>
    connectOrCreate?: PermissionCreateOrConnectWithoutRolesInput
    connect?: PermissionWhereUniqueInput
  }

  export type RoleUpdateOneRequiredWithoutPermsNestedInput = {
    create?: XOR<RoleCreateWithoutPermsInput, RoleUncheckedCreateWithoutPermsInput>
    connectOrCreate?: RoleCreateOrConnectWithoutPermsInput
    upsert?: RoleUpsertWithoutPermsInput
    connect?: RoleWhereUniqueInput
    update?: XOR<XOR<RoleUpdateToOneWithWhereWithoutPermsInput, RoleUpdateWithoutPermsInput>, RoleUncheckedUpdateWithoutPermsInput>
  }

  export type PermissionUpdateOneRequiredWithoutRolesNestedInput = {
    create?: XOR<PermissionCreateWithoutRolesInput, PermissionUncheckedCreateWithoutRolesInput>
    connectOrCreate?: PermissionCreateOrConnectWithoutRolesInput
    upsert?: PermissionUpsertWithoutRolesInput
    connect?: PermissionWhereUniqueInput
    update?: XOR<XOR<PermissionUpdateToOneWithWhereWithoutRolesInput, PermissionUpdateWithoutRolesInput>, PermissionUncheckedUpdateWithoutRolesInput>
  }

  export type UserCreateNestedOneWithoutRolesInput = {
    create?: XOR<UserCreateWithoutRolesInput, UserUncheckedCreateWithoutRolesInput>
    connectOrCreate?: UserCreateOrConnectWithoutRolesInput
    connect?: UserWhereUniqueInput
  }

  export type RoleCreateNestedOneWithoutUsersInput = {
    create?: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUsersInput
    connect?: RoleWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutRolesNestedInput = {
    create?: XOR<UserCreateWithoutRolesInput, UserUncheckedCreateWithoutRolesInput>
    connectOrCreate?: UserCreateOrConnectWithoutRolesInput
    upsert?: UserUpsertWithoutRolesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRolesInput, UserUpdateWithoutRolesInput>, UserUncheckedUpdateWithoutRolesInput>
  }

  export type RoleUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUsersInput
    upsert?: RoleUpsertWithoutUsersInput
    connect?: RoleWhereUniqueInput
    update?: XOR<XOR<RoleUpdateToOneWithWhereWithoutUsersInput, RoleUpdateWithoutUsersInput>, RoleUncheckedUpdateWithoutUsersInput>
  }

  export type UserCreateNestedOneWithoutDirectPermsInput = {
    create?: XOR<UserCreateWithoutDirectPermsInput, UserUncheckedCreateWithoutDirectPermsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDirectPermsInput
    connect?: UserWhereUniqueInput
  }

  export type PermissionCreateNestedOneWithoutUsersInput = {
    create?: XOR<PermissionCreateWithoutUsersInput, PermissionUncheckedCreateWithoutUsersInput>
    connectOrCreate?: PermissionCreateOrConnectWithoutUsersInput
    connect?: PermissionWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutDirectPermsNestedInput = {
    create?: XOR<UserCreateWithoutDirectPermsInput, UserUncheckedCreateWithoutDirectPermsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDirectPermsInput
    upsert?: UserUpsertWithoutDirectPermsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDirectPermsInput, UserUpdateWithoutDirectPermsInput>, UserUncheckedUpdateWithoutDirectPermsInput>
  }

  export type PermissionUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<PermissionCreateWithoutUsersInput, PermissionUncheckedCreateWithoutUsersInput>
    connectOrCreate?: PermissionCreateOrConnectWithoutUsersInput
    upsert?: PermissionUpsertWithoutUsersInput
    connect?: PermissionWhereUniqueInput
    update?: XOR<XOR<PermissionUpdateToOneWithWhereWithoutUsersInput, PermissionUpdateWithoutUsersInput>, PermissionUncheckedUpdateWithoutUsersInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumDifficultyNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Difficulty | EnumDifficultyFieldRefInput<$PrismaModel> | null
    in?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel> | null
    not?: NestedEnumDifficultyNullableFilter<$PrismaModel> | $Enums.Difficulty | null
  }

  export type NestedEnumQuestionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionStatus | EnumQuestionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionStatus[] | ListEnumQuestionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestionStatus[] | ListEnumQuestionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestionStatusFilter<$PrismaModel> | $Enums.QuestionStatus
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumDifficultyNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Difficulty | EnumDifficultyFieldRefInput<$PrismaModel> | null
    in?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Difficulty[] | ListEnumDifficultyFieldRefInput<$PrismaModel> | null
    not?: NestedEnumDifficultyNullableWithAggregatesFilter<$PrismaModel> | $Enums.Difficulty | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumDifficultyNullableFilter<$PrismaModel>
    _max?: NestedEnumDifficultyNullableFilter<$PrismaModel>
  }

  export type NestedEnumQuestionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionStatus | EnumQuestionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionStatus[] | ListEnumQuestionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestionStatus[] | ListEnumQuestionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestionStatusWithAggregatesFilter<$PrismaModel> | $Enums.QuestionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumQuestionStatusFilter<$PrismaModel>
    _max?: NestedEnumQuestionStatusFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumOptionKeyFilter<$PrismaModel = never> = {
    equals?: $Enums.OptionKey | EnumOptionKeyFieldRefInput<$PrismaModel>
    in?: $Enums.OptionKey[] | ListEnumOptionKeyFieldRefInput<$PrismaModel>
    notIn?: $Enums.OptionKey[] | ListEnumOptionKeyFieldRefInput<$PrismaModel>
    not?: NestedEnumOptionKeyFilter<$PrismaModel> | $Enums.OptionKey
  }

  export type NestedEnumOptionKeyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OptionKey | EnumOptionKeyFieldRefInput<$PrismaModel>
    in?: $Enums.OptionKey[] | ListEnumOptionKeyFieldRefInput<$PrismaModel>
    notIn?: $Enums.OptionKey[] | ListEnumOptionKeyFieldRefInput<$PrismaModel>
    not?: NestedEnumOptionKeyWithAggregatesFilter<$PrismaModel> | $Enums.OptionKey
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOptionKeyFilter<$PrismaModel>
    _max?: NestedEnumOptionKeyFilter<$PrismaModel>
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type ExamEditionCreateWithoutBoardInput = {
    year: number
    editionLabel: string
    notes?: string | null
    phases?: ExamPhaseCreateNestedManyWithoutEditionInput
  }

  export type ExamEditionUncheckedCreateWithoutBoardInput = {
    id?: number
    year: number
    editionLabel: string
    notes?: string | null
    phases?: ExamPhaseUncheckedCreateNestedManyWithoutEditionInput
  }

  export type ExamEditionCreateOrConnectWithoutBoardInput = {
    where: ExamEditionWhereUniqueInput
    create: XOR<ExamEditionCreateWithoutBoardInput, ExamEditionUncheckedCreateWithoutBoardInput>
  }

  export type ExamEditionCreateManyBoardInputEnvelope = {
    data: ExamEditionCreateManyBoardInput | ExamEditionCreateManyBoardInput[]
    skipDuplicates?: boolean
  }

  export type ExamEditionUpsertWithWhereUniqueWithoutBoardInput = {
    where: ExamEditionWhereUniqueInput
    update: XOR<ExamEditionUpdateWithoutBoardInput, ExamEditionUncheckedUpdateWithoutBoardInput>
    create: XOR<ExamEditionCreateWithoutBoardInput, ExamEditionUncheckedCreateWithoutBoardInput>
  }

  export type ExamEditionUpdateWithWhereUniqueWithoutBoardInput = {
    where: ExamEditionWhereUniqueInput
    data: XOR<ExamEditionUpdateWithoutBoardInput, ExamEditionUncheckedUpdateWithoutBoardInput>
  }

  export type ExamEditionUpdateManyWithWhereWithoutBoardInput = {
    where: ExamEditionScalarWhereInput
    data: XOR<ExamEditionUpdateManyMutationInput, ExamEditionUncheckedUpdateManyWithoutBoardInput>
  }

  export type ExamEditionScalarWhereInput = {
    AND?: ExamEditionScalarWhereInput | ExamEditionScalarWhereInput[]
    OR?: ExamEditionScalarWhereInput[]
    NOT?: ExamEditionScalarWhereInput | ExamEditionScalarWhereInput[]
    id?: IntFilter<"ExamEdition"> | number
    examBoardId?: IntFilter<"ExamEdition"> | number
    year?: IntFilter<"ExamEdition"> | number
    editionLabel?: StringFilter<"ExamEdition"> | string
    notes?: StringNullableFilter<"ExamEdition"> | string | null
  }

  export type ExamBoardCreateWithoutEditionsInput = {
    slug: string
    name: string
  }

  export type ExamBoardUncheckedCreateWithoutEditionsInput = {
    id?: number
    slug: string
    name: string
  }

  export type ExamBoardCreateOrConnectWithoutEditionsInput = {
    where: ExamBoardWhereUniqueInput
    create: XOR<ExamBoardCreateWithoutEditionsInput, ExamBoardUncheckedCreateWithoutEditionsInput>
  }

  export type ExamPhaseCreateWithoutEditionInput = {
    phaseNumber: number
    dayNumber?: number | null
    subjectBlock?: string | null
    questionCountExpected?: number | null
    defaultOptionCount?: number | null
    isDiscursive?: boolean
    questions?: QuestionCreateNestedManyWithoutPhaseInput
  }

  export type ExamPhaseUncheckedCreateWithoutEditionInput = {
    id?: number
    phaseNumber: number
    dayNumber?: number | null
    subjectBlock?: string | null
    questionCountExpected?: number | null
    defaultOptionCount?: number | null
    isDiscursive?: boolean
    questions?: QuestionUncheckedCreateNestedManyWithoutPhaseInput
  }

  export type ExamPhaseCreateOrConnectWithoutEditionInput = {
    where: ExamPhaseWhereUniqueInput
    create: XOR<ExamPhaseCreateWithoutEditionInput, ExamPhaseUncheckedCreateWithoutEditionInput>
  }

  export type ExamPhaseCreateManyEditionInputEnvelope = {
    data: ExamPhaseCreateManyEditionInput | ExamPhaseCreateManyEditionInput[]
    skipDuplicates?: boolean
  }

  export type ExamBoardUpsertWithoutEditionsInput = {
    update: XOR<ExamBoardUpdateWithoutEditionsInput, ExamBoardUncheckedUpdateWithoutEditionsInput>
    create: XOR<ExamBoardCreateWithoutEditionsInput, ExamBoardUncheckedCreateWithoutEditionsInput>
    where?: ExamBoardWhereInput
  }

  export type ExamBoardUpdateToOneWithWhereWithoutEditionsInput = {
    where?: ExamBoardWhereInput
    data: XOR<ExamBoardUpdateWithoutEditionsInput, ExamBoardUncheckedUpdateWithoutEditionsInput>
  }

  export type ExamBoardUpdateWithoutEditionsInput = {
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ExamBoardUncheckedUpdateWithoutEditionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    slug?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ExamPhaseUpsertWithWhereUniqueWithoutEditionInput = {
    where: ExamPhaseWhereUniqueInput
    update: XOR<ExamPhaseUpdateWithoutEditionInput, ExamPhaseUncheckedUpdateWithoutEditionInput>
    create: XOR<ExamPhaseCreateWithoutEditionInput, ExamPhaseUncheckedCreateWithoutEditionInput>
  }

  export type ExamPhaseUpdateWithWhereUniqueWithoutEditionInput = {
    where: ExamPhaseWhereUniqueInput
    data: XOR<ExamPhaseUpdateWithoutEditionInput, ExamPhaseUncheckedUpdateWithoutEditionInput>
  }

  export type ExamPhaseUpdateManyWithWhereWithoutEditionInput = {
    where: ExamPhaseScalarWhereInput
    data: XOR<ExamPhaseUpdateManyMutationInput, ExamPhaseUncheckedUpdateManyWithoutEditionInput>
  }

  export type ExamPhaseScalarWhereInput = {
    AND?: ExamPhaseScalarWhereInput | ExamPhaseScalarWhereInput[]
    OR?: ExamPhaseScalarWhereInput[]
    NOT?: ExamPhaseScalarWhereInput | ExamPhaseScalarWhereInput[]
    id?: IntFilter<"ExamPhase"> | number
    examEditionId?: IntFilter<"ExamPhase"> | number
    phaseNumber?: IntFilter<"ExamPhase"> | number
    dayNumber?: IntNullableFilter<"ExamPhase"> | number | null
    subjectBlock?: StringNullableFilter<"ExamPhase"> | string | null
    questionCountExpected?: IntNullableFilter<"ExamPhase"> | number | null
    defaultOptionCount?: IntNullableFilter<"ExamPhase"> | number | null
    isDiscursive?: BoolFilter<"ExamPhase"> | boolean
  }

  export type ExamEditionCreateWithoutPhasesInput = {
    year: number
    editionLabel: string
    notes?: string | null
    board: ExamBoardCreateNestedOneWithoutEditionsInput
  }

  export type ExamEditionUncheckedCreateWithoutPhasesInput = {
    id?: number
    examBoardId: number
    year: number
    editionLabel: string
    notes?: string | null
  }

  export type ExamEditionCreateOrConnectWithoutPhasesInput = {
    where: ExamEditionWhereUniqueInput
    create: XOR<ExamEditionCreateWithoutPhasesInput, ExamEditionUncheckedCreateWithoutPhasesInput>
  }

  export type QuestionCreateWithoutPhaseInput = {
    numberLabel: string
    isDiscursive?: boolean
    difficulty?: $Enums.Difficulty | null
    status?: $Enums.QuestionStatus
    sourcePageStart?: number | null
    sourcePageEnd?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    stimulus?: StimulusCreateNestedOneWithoutQuestionsInput
    subjects?: QuestionSubjectCreateNestedManyWithoutQuestionInput
    skills?: QuestionSkillCreateNestedManyWithoutQuestionInput
    mcq?: McqItemCreateNestedOneWithoutQuestionInput
    fr?: FrItemCreateNestedOneWithoutQuestionInput
  }

  export type QuestionUncheckedCreateWithoutPhaseInput = {
    id?: number
    stimulusId?: number | null
    numberLabel: string
    isDiscursive?: boolean
    difficulty?: $Enums.Difficulty | null
    status?: $Enums.QuestionStatus
    sourcePageStart?: number | null
    sourcePageEnd?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subjects?: QuestionSubjectUncheckedCreateNestedManyWithoutQuestionInput
    skills?: QuestionSkillUncheckedCreateNestedManyWithoutQuestionInput
    mcq?: McqItemUncheckedCreateNestedOneWithoutQuestionInput
    fr?: FrItemUncheckedCreateNestedOneWithoutQuestionInput
  }

  export type QuestionCreateOrConnectWithoutPhaseInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutPhaseInput, QuestionUncheckedCreateWithoutPhaseInput>
  }

  export type QuestionCreateManyPhaseInputEnvelope = {
    data: QuestionCreateManyPhaseInput | QuestionCreateManyPhaseInput[]
    skipDuplicates?: boolean
  }

  export type ExamEditionUpsertWithoutPhasesInput = {
    update: XOR<ExamEditionUpdateWithoutPhasesInput, ExamEditionUncheckedUpdateWithoutPhasesInput>
    create: XOR<ExamEditionCreateWithoutPhasesInput, ExamEditionUncheckedCreateWithoutPhasesInput>
    where?: ExamEditionWhereInput
  }

  export type ExamEditionUpdateToOneWithWhereWithoutPhasesInput = {
    where?: ExamEditionWhereInput
    data: XOR<ExamEditionUpdateWithoutPhasesInput, ExamEditionUncheckedUpdateWithoutPhasesInput>
  }

  export type ExamEditionUpdateWithoutPhasesInput = {
    year?: IntFieldUpdateOperationsInput | number
    editionLabel?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    board?: ExamBoardUpdateOneRequiredWithoutEditionsNestedInput
  }

  export type ExamEditionUncheckedUpdateWithoutPhasesInput = {
    id?: IntFieldUpdateOperationsInput | number
    examBoardId?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    editionLabel?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type QuestionUpsertWithWhereUniqueWithoutPhaseInput = {
    where: QuestionWhereUniqueInput
    update: XOR<QuestionUpdateWithoutPhaseInput, QuestionUncheckedUpdateWithoutPhaseInput>
    create: XOR<QuestionCreateWithoutPhaseInput, QuestionUncheckedCreateWithoutPhaseInput>
  }

  export type QuestionUpdateWithWhereUniqueWithoutPhaseInput = {
    where: QuestionWhereUniqueInput
    data: XOR<QuestionUpdateWithoutPhaseInput, QuestionUncheckedUpdateWithoutPhaseInput>
  }

  export type QuestionUpdateManyWithWhereWithoutPhaseInput = {
    where: QuestionScalarWhereInput
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyWithoutPhaseInput>
  }

  export type QuestionScalarWhereInput = {
    AND?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
    OR?: QuestionScalarWhereInput[]
    NOT?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
    id?: IntFilter<"Question"> | number
    examPhaseId?: IntFilter<"Question"> | number
    stimulusId?: IntNullableFilter<"Question"> | number | null
    numberLabel?: StringFilter<"Question"> | string
    isDiscursive?: BoolFilter<"Question"> | boolean
    difficulty?: EnumDifficultyNullableFilter<"Question"> | $Enums.Difficulty | null
    status?: EnumQuestionStatusFilter<"Question"> | $Enums.QuestionStatus
    sourcePageStart?: IntNullableFilter<"Question"> | number | null
    sourcePageEnd?: IntNullableFilter<"Question"> | number | null
    createdAt?: DateTimeFilter<"Question"> | Date | string
    updatedAt?: DateTimeFilter<"Question"> | Date | string
  }

  export type QuestionSubjectCreateWithoutSubjectInput = {
    question: QuestionCreateNestedOneWithoutSubjectsInput
  }

  export type QuestionSubjectUncheckedCreateWithoutSubjectInput = {
    questionId: number
  }

  export type QuestionSubjectCreateOrConnectWithoutSubjectInput = {
    where: QuestionSubjectWhereUniqueInput
    create: XOR<QuestionSubjectCreateWithoutSubjectInput, QuestionSubjectUncheckedCreateWithoutSubjectInput>
  }

  export type QuestionSubjectCreateManySubjectInputEnvelope = {
    data: QuestionSubjectCreateManySubjectInput | QuestionSubjectCreateManySubjectInput[]
    skipDuplicates?: boolean
  }

  export type QuestionSubjectUpsertWithWhereUniqueWithoutSubjectInput = {
    where: QuestionSubjectWhereUniqueInput
    update: XOR<QuestionSubjectUpdateWithoutSubjectInput, QuestionSubjectUncheckedUpdateWithoutSubjectInput>
    create: XOR<QuestionSubjectCreateWithoutSubjectInput, QuestionSubjectUncheckedCreateWithoutSubjectInput>
  }

  export type QuestionSubjectUpdateWithWhereUniqueWithoutSubjectInput = {
    where: QuestionSubjectWhereUniqueInput
    data: XOR<QuestionSubjectUpdateWithoutSubjectInput, QuestionSubjectUncheckedUpdateWithoutSubjectInput>
  }

  export type QuestionSubjectUpdateManyWithWhereWithoutSubjectInput = {
    where: QuestionSubjectScalarWhereInput
    data: XOR<QuestionSubjectUpdateManyMutationInput, QuestionSubjectUncheckedUpdateManyWithoutSubjectInput>
  }

  export type QuestionSubjectScalarWhereInput = {
    AND?: QuestionSubjectScalarWhereInput | QuestionSubjectScalarWhereInput[]
    OR?: QuestionSubjectScalarWhereInput[]
    NOT?: QuestionSubjectScalarWhereInput | QuestionSubjectScalarWhereInput[]
    questionId?: IntFilter<"QuestionSubject"> | number
    subjectId?: IntFilter<"QuestionSubject"> | number
  }

  export type QuestionSkillCreateWithoutSkillInput = {
    question: QuestionCreateNestedOneWithoutSkillsInput
  }

  export type QuestionSkillUncheckedCreateWithoutSkillInput = {
    questionId: number
  }

  export type QuestionSkillCreateOrConnectWithoutSkillInput = {
    where: QuestionSkillWhereUniqueInput
    create: XOR<QuestionSkillCreateWithoutSkillInput, QuestionSkillUncheckedCreateWithoutSkillInput>
  }

  export type QuestionSkillCreateManySkillInputEnvelope = {
    data: QuestionSkillCreateManySkillInput | QuestionSkillCreateManySkillInput[]
    skipDuplicates?: boolean
  }

  export type QuestionSkillUpsertWithWhereUniqueWithoutSkillInput = {
    where: QuestionSkillWhereUniqueInput
    update: XOR<QuestionSkillUpdateWithoutSkillInput, QuestionSkillUncheckedUpdateWithoutSkillInput>
    create: XOR<QuestionSkillCreateWithoutSkillInput, QuestionSkillUncheckedCreateWithoutSkillInput>
  }

  export type QuestionSkillUpdateWithWhereUniqueWithoutSkillInput = {
    where: QuestionSkillWhereUniqueInput
    data: XOR<QuestionSkillUpdateWithoutSkillInput, QuestionSkillUncheckedUpdateWithoutSkillInput>
  }

  export type QuestionSkillUpdateManyWithWhereWithoutSkillInput = {
    where: QuestionSkillScalarWhereInput
    data: XOR<QuestionSkillUpdateManyMutationInput, QuestionSkillUncheckedUpdateManyWithoutSkillInput>
  }

  export type QuestionSkillScalarWhereInput = {
    AND?: QuestionSkillScalarWhereInput | QuestionSkillScalarWhereInput[]
    OR?: QuestionSkillScalarWhereInput[]
    NOT?: QuestionSkillScalarWhereInput | QuestionSkillScalarWhereInput[]
    questionId?: IntFilter<"QuestionSkill"> | number
    skillId?: IntFilter<"QuestionSkill"> | number
  }

  export type StimulusAssetCreateWithoutStimulusInput = {
    storageKey: string
    caption?: string | null
    pageHint?: number | null
  }

  export type StimulusAssetUncheckedCreateWithoutStimulusInput = {
    id?: number
    storageKey: string
    caption?: string | null
    pageHint?: number | null
  }

  export type StimulusAssetCreateOrConnectWithoutStimulusInput = {
    where: StimulusAssetWhereUniqueInput
    create: XOR<StimulusAssetCreateWithoutStimulusInput, StimulusAssetUncheckedCreateWithoutStimulusInput>
  }

  export type StimulusAssetCreateManyStimulusInputEnvelope = {
    data: StimulusAssetCreateManyStimulusInput | StimulusAssetCreateManyStimulusInput[]
    skipDuplicates?: boolean
  }

  export type QuestionCreateWithoutStimulusInput = {
    numberLabel: string
    isDiscursive?: boolean
    difficulty?: $Enums.Difficulty | null
    status?: $Enums.QuestionStatus
    sourcePageStart?: number | null
    sourcePageEnd?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    phase: ExamPhaseCreateNestedOneWithoutQuestionsInput
    subjects?: QuestionSubjectCreateNestedManyWithoutQuestionInput
    skills?: QuestionSkillCreateNestedManyWithoutQuestionInput
    mcq?: McqItemCreateNestedOneWithoutQuestionInput
    fr?: FrItemCreateNestedOneWithoutQuestionInput
  }

  export type QuestionUncheckedCreateWithoutStimulusInput = {
    id?: number
    examPhaseId: number
    numberLabel: string
    isDiscursive?: boolean
    difficulty?: $Enums.Difficulty | null
    status?: $Enums.QuestionStatus
    sourcePageStart?: number | null
    sourcePageEnd?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subjects?: QuestionSubjectUncheckedCreateNestedManyWithoutQuestionInput
    skills?: QuestionSkillUncheckedCreateNestedManyWithoutQuestionInput
    mcq?: McqItemUncheckedCreateNestedOneWithoutQuestionInput
    fr?: FrItemUncheckedCreateNestedOneWithoutQuestionInput
  }

  export type QuestionCreateOrConnectWithoutStimulusInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutStimulusInput, QuestionUncheckedCreateWithoutStimulusInput>
  }

  export type QuestionCreateManyStimulusInputEnvelope = {
    data: QuestionCreateManyStimulusInput | QuestionCreateManyStimulusInput[]
    skipDuplicates?: boolean
  }

  export type StimulusAssetUpsertWithWhereUniqueWithoutStimulusInput = {
    where: StimulusAssetWhereUniqueInput
    update: XOR<StimulusAssetUpdateWithoutStimulusInput, StimulusAssetUncheckedUpdateWithoutStimulusInput>
    create: XOR<StimulusAssetCreateWithoutStimulusInput, StimulusAssetUncheckedCreateWithoutStimulusInput>
  }

  export type StimulusAssetUpdateWithWhereUniqueWithoutStimulusInput = {
    where: StimulusAssetWhereUniqueInput
    data: XOR<StimulusAssetUpdateWithoutStimulusInput, StimulusAssetUncheckedUpdateWithoutStimulusInput>
  }

  export type StimulusAssetUpdateManyWithWhereWithoutStimulusInput = {
    where: StimulusAssetScalarWhereInput
    data: XOR<StimulusAssetUpdateManyMutationInput, StimulusAssetUncheckedUpdateManyWithoutStimulusInput>
  }

  export type StimulusAssetScalarWhereInput = {
    AND?: StimulusAssetScalarWhereInput | StimulusAssetScalarWhereInput[]
    OR?: StimulusAssetScalarWhereInput[]
    NOT?: StimulusAssetScalarWhereInput | StimulusAssetScalarWhereInput[]
    id?: IntFilter<"StimulusAsset"> | number
    stimulusId?: IntFilter<"StimulusAsset"> | number
    storageKey?: StringFilter<"StimulusAsset"> | string
    caption?: StringNullableFilter<"StimulusAsset"> | string | null
    pageHint?: IntNullableFilter<"StimulusAsset"> | number | null
  }

  export type QuestionUpsertWithWhereUniqueWithoutStimulusInput = {
    where: QuestionWhereUniqueInput
    update: XOR<QuestionUpdateWithoutStimulusInput, QuestionUncheckedUpdateWithoutStimulusInput>
    create: XOR<QuestionCreateWithoutStimulusInput, QuestionUncheckedCreateWithoutStimulusInput>
  }

  export type QuestionUpdateWithWhereUniqueWithoutStimulusInput = {
    where: QuestionWhereUniqueInput
    data: XOR<QuestionUpdateWithoutStimulusInput, QuestionUncheckedUpdateWithoutStimulusInput>
  }

  export type QuestionUpdateManyWithWhereWithoutStimulusInput = {
    where: QuestionScalarWhereInput
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyWithoutStimulusInput>
  }

  export type StimulusCreateWithoutAssetsInput = {
    contentHtml?: string | null
    contentText?: string | null
    sourceRef?: string | null
    questions?: QuestionCreateNestedManyWithoutStimulusInput
  }

  export type StimulusUncheckedCreateWithoutAssetsInput = {
    id?: number
    contentHtml?: string | null
    contentText?: string | null
    sourceRef?: string | null
    questions?: QuestionUncheckedCreateNestedManyWithoutStimulusInput
  }

  export type StimulusCreateOrConnectWithoutAssetsInput = {
    where: StimulusWhereUniqueInput
    create: XOR<StimulusCreateWithoutAssetsInput, StimulusUncheckedCreateWithoutAssetsInput>
  }

  export type StimulusUpsertWithoutAssetsInput = {
    update: XOR<StimulusUpdateWithoutAssetsInput, StimulusUncheckedUpdateWithoutAssetsInput>
    create: XOR<StimulusCreateWithoutAssetsInput, StimulusUncheckedCreateWithoutAssetsInput>
    where?: StimulusWhereInput
  }

  export type StimulusUpdateToOneWithWhereWithoutAssetsInput = {
    where?: StimulusWhereInput
    data: XOR<StimulusUpdateWithoutAssetsInput, StimulusUncheckedUpdateWithoutAssetsInput>
  }

  export type StimulusUpdateWithoutAssetsInput = {
    contentHtml?: NullableStringFieldUpdateOperationsInput | string | null
    contentText?: NullableStringFieldUpdateOperationsInput | string | null
    sourceRef?: NullableStringFieldUpdateOperationsInput | string | null
    questions?: QuestionUpdateManyWithoutStimulusNestedInput
  }

  export type StimulusUncheckedUpdateWithoutAssetsInput = {
    id?: IntFieldUpdateOperationsInput | number
    contentHtml?: NullableStringFieldUpdateOperationsInput | string | null
    contentText?: NullableStringFieldUpdateOperationsInput | string | null
    sourceRef?: NullableStringFieldUpdateOperationsInput | string | null
    questions?: QuestionUncheckedUpdateManyWithoutStimulusNestedInput
  }

  export type ExamPhaseCreateWithoutQuestionsInput = {
    phaseNumber: number
    dayNumber?: number | null
    subjectBlock?: string | null
    questionCountExpected?: number | null
    defaultOptionCount?: number | null
    isDiscursive?: boolean
    edition: ExamEditionCreateNestedOneWithoutPhasesInput
  }

  export type ExamPhaseUncheckedCreateWithoutQuestionsInput = {
    id?: number
    examEditionId: number
    phaseNumber: number
    dayNumber?: number | null
    subjectBlock?: string | null
    questionCountExpected?: number | null
    defaultOptionCount?: number | null
    isDiscursive?: boolean
  }

  export type ExamPhaseCreateOrConnectWithoutQuestionsInput = {
    where: ExamPhaseWhereUniqueInput
    create: XOR<ExamPhaseCreateWithoutQuestionsInput, ExamPhaseUncheckedCreateWithoutQuestionsInput>
  }

  export type StimulusCreateWithoutQuestionsInput = {
    contentHtml?: string | null
    contentText?: string | null
    sourceRef?: string | null
    assets?: StimulusAssetCreateNestedManyWithoutStimulusInput
  }

  export type StimulusUncheckedCreateWithoutQuestionsInput = {
    id?: number
    contentHtml?: string | null
    contentText?: string | null
    sourceRef?: string | null
    assets?: StimulusAssetUncheckedCreateNestedManyWithoutStimulusInput
  }

  export type StimulusCreateOrConnectWithoutQuestionsInput = {
    where: StimulusWhereUniqueInput
    create: XOR<StimulusCreateWithoutQuestionsInput, StimulusUncheckedCreateWithoutQuestionsInput>
  }

  export type QuestionSubjectCreateWithoutQuestionInput = {
    subject: SubjectCreateNestedOneWithoutQuestionsInput
  }

  export type QuestionSubjectUncheckedCreateWithoutQuestionInput = {
    subjectId: number
  }

  export type QuestionSubjectCreateOrConnectWithoutQuestionInput = {
    where: QuestionSubjectWhereUniqueInput
    create: XOR<QuestionSubjectCreateWithoutQuestionInput, QuestionSubjectUncheckedCreateWithoutQuestionInput>
  }

  export type QuestionSubjectCreateManyQuestionInputEnvelope = {
    data: QuestionSubjectCreateManyQuestionInput | QuestionSubjectCreateManyQuestionInput[]
    skipDuplicates?: boolean
  }

  export type QuestionSkillCreateWithoutQuestionInput = {
    skill: SkillCreateNestedOneWithoutQuestionsInput
  }

  export type QuestionSkillUncheckedCreateWithoutQuestionInput = {
    skillId: number
  }

  export type QuestionSkillCreateOrConnectWithoutQuestionInput = {
    where: QuestionSkillWhereUniqueInput
    create: XOR<QuestionSkillCreateWithoutQuestionInput, QuestionSkillUncheckedCreateWithoutQuestionInput>
  }

  export type QuestionSkillCreateManyQuestionInputEnvelope = {
    data: QuestionSkillCreateManyQuestionInput | QuestionSkillCreateManyQuestionInput[]
    skipDuplicates?: boolean
  }

  export type McqItemCreateWithoutQuestionInput = {
    shuffleOptions?: boolean
    optionCount: number
    correctOptionKey: $Enums.OptionKey
    options?: McqOptionCreateNestedManyWithoutMcqInput
  }

  export type McqItemUncheckedCreateWithoutQuestionInput = {
    shuffleOptions?: boolean
    optionCount: number
    correctOptionKey: $Enums.OptionKey
    options?: McqOptionUncheckedCreateNestedManyWithoutMcqInput
  }

  export type McqItemCreateOrConnectWithoutQuestionInput = {
    where: McqItemWhereUniqueInput
    create: XOR<McqItemCreateWithoutQuestionInput, McqItemUncheckedCreateWithoutQuestionInput>
  }

  export type FrItemCreateWithoutQuestionInput = {
    answerGuidanceHtml?: string | null
    maxScore?: Decimal | DecimalJsLike | number | string | null
    rubrics?: FrRubricCreateNestedManyWithoutFrInput
    expectedAnswers?: FrAnswerExpectedCreateNestedManyWithoutFrItemInput
  }

  export type FrItemUncheckedCreateWithoutQuestionInput = {
    answerGuidanceHtml?: string | null
    maxScore?: Decimal | DecimalJsLike | number | string | null
    rubrics?: FrRubricUncheckedCreateNestedManyWithoutFrInput
    expectedAnswers?: FrAnswerExpectedUncheckedCreateNestedManyWithoutFrItemInput
  }

  export type FrItemCreateOrConnectWithoutQuestionInput = {
    where: FrItemWhereUniqueInput
    create: XOR<FrItemCreateWithoutQuestionInput, FrItemUncheckedCreateWithoutQuestionInput>
  }

  export type ExamPhaseUpsertWithoutQuestionsInput = {
    update: XOR<ExamPhaseUpdateWithoutQuestionsInput, ExamPhaseUncheckedUpdateWithoutQuestionsInput>
    create: XOR<ExamPhaseCreateWithoutQuestionsInput, ExamPhaseUncheckedCreateWithoutQuestionsInput>
    where?: ExamPhaseWhereInput
  }

  export type ExamPhaseUpdateToOneWithWhereWithoutQuestionsInput = {
    where?: ExamPhaseWhereInput
    data: XOR<ExamPhaseUpdateWithoutQuestionsInput, ExamPhaseUncheckedUpdateWithoutQuestionsInput>
  }

  export type ExamPhaseUpdateWithoutQuestionsInput = {
    phaseNumber?: IntFieldUpdateOperationsInput | number
    dayNumber?: NullableIntFieldUpdateOperationsInput | number | null
    subjectBlock?: NullableStringFieldUpdateOperationsInput | string | null
    questionCountExpected?: NullableIntFieldUpdateOperationsInput | number | null
    defaultOptionCount?: NullableIntFieldUpdateOperationsInput | number | null
    isDiscursive?: BoolFieldUpdateOperationsInput | boolean
    edition?: ExamEditionUpdateOneRequiredWithoutPhasesNestedInput
  }

  export type ExamPhaseUncheckedUpdateWithoutQuestionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    examEditionId?: IntFieldUpdateOperationsInput | number
    phaseNumber?: IntFieldUpdateOperationsInput | number
    dayNumber?: NullableIntFieldUpdateOperationsInput | number | null
    subjectBlock?: NullableStringFieldUpdateOperationsInput | string | null
    questionCountExpected?: NullableIntFieldUpdateOperationsInput | number | null
    defaultOptionCount?: NullableIntFieldUpdateOperationsInput | number | null
    isDiscursive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StimulusUpsertWithoutQuestionsInput = {
    update: XOR<StimulusUpdateWithoutQuestionsInput, StimulusUncheckedUpdateWithoutQuestionsInput>
    create: XOR<StimulusCreateWithoutQuestionsInput, StimulusUncheckedCreateWithoutQuestionsInput>
    where?: StimulusWhereInput
  }

  export type StimulusUpdateToOneWithWhereWithoutQuestionsInput = {
    where?: StimulusWhereInput
    data: XOR<StimulusUpdateWithoutQuestionsInput, StimulusUncheckedUpdateWithoutQuestionsInput>
  }

  export type StimulusUpdateWithoutQuestionsInput = {
    contentHtml?: NullableStringFieldUpdateOperationsInput | string | null
    contentText?: NullableStringFieldUpdateOperationsInput | string | null
    sourceRef?: NullableStringFieldUpdateOperationsInput | string | null
    assets?: StimulusAssetUpdateManyWithoutStimulusNestedInput
  }

  export type StimulusUncheckedUpdateWithoutQuestionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    contentHtml?: NullableStringFieldUpdateOperationsInput | string | null
    contentText?: NullableStringFieldUpdateOperationsInput | string | null
    sourceRef?: NullableStringFieldUpdateOperationsInput | string | null
    assets?: StimulusAssetUncheckedUpdateManyWithoutStimulusNestedInput
  }

  export type QuestionSubjectUpsertWithWhereUniqueWithoutQuestionInput = {
    where: QuestionSubjectWhereUniqueInput
    update: XOR<QuestionSubjectUpdateWithoutQuestionInput, QuestionSubjectUncheckedUpdateWithoutQuestionInput>
    create: XOR<QuestionSubjectCreateWithoutQuestionInput, QuestionSubjectUncheckedCreateWithoutQuestionInput>
  }

  export type QuestionSubjectUpdateWithWhereUniqueWithoutQuestionInput = {
    where: QuestionSubjectWhereUniqueInput
    data: XOR<QuestionSubjectUpdateWithoutQuestionInput, QuestionSubjectUncheckedUpdateWithoutQuestionInput>
  }

  export type QuestionSubjectUpdateManyWithWhereWithoutQuestionInput = {
    where: QuestionSubjectScalarWhereInput
    data: XOR<QuestionSubjectUpdateManyMutationInput, QuestionSubjectUncheckedUpdateManyWithoutQuestionInput>
  }

  export type QuestionSkillUpsertWithWhereUniqueWithoutQuestionInput = {
    where: QuestionSkillWhereUniqueInput
    update: XOR<QuestionSkillUpdateWithoutQuestionInput, QuestionSkillUncheckedUpdateWithoutQuestionInput>
    create: XOR<QuestionSkillCreateWithoutQuestionInput, QuestionSkillUncheckedCreateWithoutQuestionInput>
  }

  export type QuestionSkillUpdateWithWhereUniqueWithoutQuestionInput = {
    where: QuestionSkillWhereUniqueInput
    data: XOR<QuestionSkillUpdateWithoutQuestionInput, QuestionSkillUncheckedUpdateWithoutQuestionInput>
  }

  export type QuestionSkillUpdateManyWithWhereWithoutQuestionInput = {
    where: QuestionSkillScalarWhereInput
    data: XOR<QuestionSkillUpdateManyMutationInput, QuestionSkillUncheckedUpdateManyWithoutQuestionInput>
  }

  export type McqItemUpsertWithoutQuestionInput = {
    update: XOR<McqItemUpdateWithoutQuestionInput, McqItemUncheckedUpdateWithoutQuestionInput>
    create: XOR<McqItemCreateWithoutQuestionInput, McqItemUncheckedCreateWithoutQuestionInput>
    where?: McqItemWhereInput
  }

  export type McqItemUpdateToOneWithWhereWithoutQuestionInput = {
    where?: McqItemWhereInput
    data: XOR<McqItemUpdateWithoutQuestionInput, McqItemUncheckedUpdateWithoutQuestionInput>
  }

  export type McqItemUpdateWithoutQuestionInput = {
    shuffleOptions?: BoolFieldUpdateOperationsInput | boolean
    optionCount?: IntFieldUpdateOperationsInput | number
    correctOptionKey?: EnumOptionKeyFieldUpdateOperationsInput | $Enums.OptionKey
    options?: McqOptionUpdateManyWithoutMcqNestedInput
  }

  export type McqItemUncheckedUpdateWithoutQuestionInput = {
    shuffleOptions?: BoolFieldUpdateOperationsInput | boolean
    optionCount?: IntFieldUpdateOperationsInput | number
    correctOptionKey?: EnumOptionKeyFieldUpdateOperationsInput | $Enums.OptionKey
    options?: McqOptionUncheckedUpdateManyWithoutMcqNestedInput
  }

  export type FrItemUpsertWithoutQuestionInput = {
    update: XOR<FrItemUpdateWithoutQuestionInput, FrItemUncheckedUpdateWithoutQuestionInput>
    create: XOR<FrItemCreateWithoutQuestionInput, FrItemUncheckedCreateWithoutQuestionInput>
    where?: FrItemWhereInput
  }

  export type FrItemUpdateToOneWithWhereWithoutQuestionInput = {
    where?: FrItemWhereInput
    data: XOR<FrItemUpdateWithoutQuestionInput, FrItemUncheckedUpdateWithoutQuestionInput>
  }

  export type FrItemUpdateWithoutQuestionInput = {
    answerGuidanceHtml?: NullableStringFieldUpdateOperationsInput | string | null
    maxScore?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    rubrics?: FrRubricUpdateManyWithoutFrNestedInput
    expectedAnswers?: FrAnswerExpectedUpdateManyWithoutFrItemNestedInput
  }

  export type FrItemUncheckedUpdateWithoutQuestionInput = {
    answerGuidanceHtml?: NullableStringFieldUpdateOperationsInput | string | null
    maxScore?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    rubrics?: FrRubricUncheckedUpdateManyWithoutFrNestedInput
    expectedAnswers?: FrAnswerExpectedUncheckedUpdateManyWithoutFrItemNestedInput
  }

  export type QuestionCreateWithoutSubjectsInput = {
    numberLabel: string
    isDiscursive?: boolean
    difficulty?: $Enums.Difficulty | null
    status?: $Enums.QuestionStatus
    sourcePageStart?: number | null
    sourcePageEnd?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    phase: ExamPhaseCreateNestedOneWithoutQuestionsInput
    stimulus?: StimulusCreateNestedOneWithoutQuestionsInput
    skills?: QuestionSkillCreateNestedManyWithoutQuestionInput
    mcq?: McqItemCreateNestedOneWithoutQuestionInput
    fr?: FrItemCreateNestedOneWithoutQuestionInput
  }

  export type QuestionUncheckedCreateWithoutSubjectsInput = {
    id?: number
    examPhaseId: number
    stimulusId?: number | null
    numberLabel: string
    isDiscursive?: boolean
    difficulty?: $Enums.Difficulty | null
    status?: $Enums.QuestionStatus
    sourcePageStart?: number | null
    sourcePageEnd?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    skills?: QuestionSkillUncheckedCreateNestedManyWithoutQuestionInput
    mcq?: McqItemUncheckedCreateNestedOneWithoutQuestionInput
    fr?: FrItemUncheckedCreateNestedOneWithoutQuestionInput
  }

  export type QuestionCreateOrConnectWithoutSubjectsInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutSubjectsInput, QuestionUncheckedCreateWithoutSubjectsInput>
  }

  export type SubjectCreateWithoutQuestionsInput = {
    name: string
    slug: string
  }

  export type SubjectUncheckedCreateWithoutQuestionsInput = {
    id?: number
    name: string
    slug: string
  }

  export type SubjectCreateOrConnectWithoutQuestionsInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutQuestionsInput, SubjectUncheckedCreateWithoutQuestionsInput>
  }

  export type QuestionUpsertWithoutSubjectsInput = {
    update: XOR<QuestionUpdateWithoutSubjectsInput, QuestionUncheckedUpdateWithoutSubjectsInput>
    create: XOR<QuestionCreateWithoutSubjectsInput, QuestionUncheckedCreateWithoutSubjectsInput>
    where?: QuestionWhereInput
  }

  export type QuestionUpdateToOneWithWhereWithoutSubjectsInput = {
    where?: QuestionWhereInput
    data: XOR<QuestionUpdateWithoutSubjectsInput, QuestionUncheckedUpdateWithoutSubjectsInput>
  }

  export type QuestionUpdateWithoutSubjectsInput = {
    numberLabel?: StringFieldUpdateOperationsInput | string
    isDiscursive?: BoolFieldUpdateOperationsInput | boolean
    difficulty?: NullableEnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty | null
    status?: EnumQuestionStatusFieldUpdateOperationsInput | $Enums.QuestionStatus
    sourcePageStart?: NullableIntFieldUpdateOperationsInput | number | null
    sourcePageEnd?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phase?: ExamPhaseUpdateOneRequiredWithoutQuestionsNestedInput
    stimulus?: StimulusUpdateOneWithoutQuestionsNestedInput
    skills?: QuestionSkillUpdateManyWithoutQuestionNestedInput
    mcq?: McqItemUpdateOneWithoutQuestionNestedInput
    fr?: FrItemUpdateOneWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateWithoutSubjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    examPhaseId?: IntFieldUpdateOperationsInput | number
    stimulusId?: NullableIntFieldUpdateOperationsInput | number | null
    numberLabel?: StringFieldUpdateOperationsInput | string
    isDiscursive?: BoolFieldUpdateOperationsInput | boolean
    difficulty?: NullableEnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty | null
    status?: EnumQuestionStatusFieldUpdateOperationsInput | $Enums.QuestionStatus
    sourcePageStart?: NullableIntFieldUpdateOperationsInput | number | null
    sourcePageEnd?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skills?: QuestionSkillUncheckedUpdateManyWithoutQuestionNestedInput
    mcq?: McqItemUncheckedUpdateOneWithoutQuestionNestedInput
    fr?: FrItemUncheckedUpdateOneWithoutQuestionNestedInput
  }

  export type SubjectUpsertWithoutQuestionsInput = {
    update: XOR<SubjectUpdateWithoutQuestionsInput, SubjectUncheckedUpdateWithoutQuestionsInput>
    create: XOR<SubjectCreateWithoutQuestionsInput, SubjectUncheckedCreateWithoutQuestionsInput>
    where?: SubjectWhereInput
  }

  export type SubjectUpdateToOneWithWhereWithoutQuestionsInput = {
    where?: SubjectWhereInput
    data: XOR<SubjectUpdateWithoutQuestionsInput, SubjectUncheckedUpdateWithoutQuestionsInput>
  }

  export type SubjectUpdateWithoutQuestionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
  }

  export type SubjectUncheckedUpdateWithoutQuestionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionCreateWithoutSkillsInput = {
    numberLabel: string
    isDiscursive?: boolean
    difficulty?: $Enums.Difficulty | null
    status?: $Enums.QuestionStatus
    sourcePageStart?: number | null
    sourcePageEnd?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    phase: ExamPhaseCreateNestedOneWithoutQuestionsInput
    stimulus?: StimulusCreateNestedOneWithoutQuestionsInput
    subjects?: QuestionSubjectCreateNestedManyWithoutQuestionInput
    mcq?: McqItemCreateNestedOneWithoutQuestionInput
    fr?: FrItemCreateNestedOneWithoutQuestionInput
  }

  export type QuestionUncheckedCreateWithoutSkillsInput = {
    id?: number
    examPhaseId: number
    stimulusId?: number | null
    numberLabel: string
    isDiscursive?: boolean
    difficulty?: $Enums.Difficulty | null
    status?: $Enums.QuestionStatus
    sourcePageStart?: number | null
    sourcePageEnd?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subjects?: QuestionSubjectUncheckedCreateNestedManyWithoutQuestionInput
    mcq?: McqItemUncheckedCreateNestedOneWithoutQuestionInput
    fr?: FrItemUncheckedCreateNestedOneWithoutQuestionInput
  }

  export type QuestionCreateOrConnectWithoutSkillsInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutSkillsInput, QuestionUncheckedCreateWithoutSkillsInput>
  }

  export type SkillCreateWithoutQuestionsInput = {
    code?: string | null
    label: string
  }

  export type SkillUncheckedCreateWithoutQuestionsInput = {
    id?: number
    code?: string | null
    label: string
  }

  export type SkillCreateOrConnectWithoutQuestionsInput = {
    where: SkillWhereUniqueInput
    create: XOR<SkillCreateWithoutQuestionsInput, SkillUncheckedCreateWithoutQuestionsInput>
  }

  export type QuestionUpsertWithoutSkillsInput = {
    update: XOR<QuestionUpdateWithoutSkillsInput, QuestionUncheckedUpdateWithoutSkillsInput>
    create: XOR<QuestionCreateWithoutSkillsInput, QuestionUncheckedCreateWithoutSkillsInput>
    where?: QuestionWhereInput
  }

  export type QuestionUpdateToOneWithWhereWithoutSkillsInput = {
    where?: QuestionWhereInput
    data: XOR<QuestionUpdateWithoutSkillsInput, QuestionUncheckedUpdateWithoutSkillsInput>
  }

  export type QuestionUpdateWithoutSkillsInput = {
    numberLabel?: StringFieldUpdateOperationsInput | string
    isDiscursive?: BoolFieldUpdateOperationsInput | boolean
    difficulty?: NullableEnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty | null
    status?: EnumQuestionStatusFieldUpdateOperationsInput | $Enums.QuestionStatus
    sourcePageStart?: NullableIntFieldUpdateOperationsInput | number | null
    sourcePageEnd?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phase?: ExamPhaseUpdateOneRequiredWithoutQuestionsNestedInput
    stimulus?: StimulusUpdateOneWithoutQuestionsNestedInput
    subjects?: QuestionSubjectUpdateManyWithoutQuestionNestedInput
    mcq?: McqItemUpdateOneWithoutQuestionNestedInput
    fr?: FrItemUpdateOneWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateWithoutSkillsInput = {
    id?: IntFieldUpdateOperationsInput | number
    examPhaseId?: IntFieldUpdateOperationsInput | number
    stimulusId?: NullableIntFieldUpdateOperationsInput | number | null
    numberLabel?: StringFieldUpdateOperationsInput | string
    isDiscursive?: BoolFieldUpdateOperationsInput | boolean
    difficulty?: NullableEnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty | null
    status?: EnumQuestionStatusFieldUpdateOperationsInput | $Enums.QuestionStatus
    sourcePageStart?: NullableIntFieldUpdateOperationsInput | number | null
    sourcePageEnd?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subjects?: QuestionSubjectUncheckedUpdateManyWithoutQuestionNestedInput
    mcq?: McqItemUncheckedUpdateOneWithoutQuestionNestedInput
    fr?: FrItemUncheckedUpdateOneWithoutQuestionNestedInput
  }

  export type SkillUpsertWithoutQuestionsInput = {
    update: XOR<SkillUpdateWithoutQuestionsInput, SkillUncheckedUpdateWithoutQuestionsInput>
    create: XOR<SkillCreateWithoutQuestionsInput, SkillUncheckedCreateWithoutQuestionsInput>
    where?: SkillWhereInput
  }

  export type SkillUpdateToOneWithWhereWithoutQuestionsInput = {
    where?: SkillWhereInput
    data: XOR<SkillUpdateWithoutQuestionsInput, SkillUncheckedUpdateWithoutQuestionsInput>
  }

  export type SkillUpdateWithoutQuestionsInput = {
    code?: NullableStringFieldUpdateOperationsInput | string | null
    label?: StringFieldUpdateOperationsInput | string
  }

  export type SkillUncheckedUpdateWithoutQuestionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: NullableStringFieldUpdateOperationsInput | string | null
    label?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionCreateWithoutMcqInput = {
    numberLabel: string
    isDiscursive?: boolean
    difficulty?: $Enums.Difficulty | null
    status?: $Enums.QuestionStatus
    sourcePageStart?: number | null
    sourcePageEnd?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    phase: ExamPhaseCreateNestedOneWithoutQuestionsInput
    stimulus?: StimulusCreateNestedOneWithoutQuestionsInput
    subjects?: QuestionSubjectCreateNestedManyWithoutQuestionInput
    skills?: QuestionSkillCreateNestedManyWithoutQuestionInput
    fr?: FrItemCreateNestedOneWithoutQuestionInput
  }

  export type QuestionUncheckedCreateWithoutMcqInput = {
    id?: number
    examPhaseId: number
    stimulusId?: number | null
    numberLabel: string
    isDiscursive?: boolean
    difficulty?: $Enums.Difficulty | null
    status?: $Enums.QuestionStatus
    sourcePageStart?: number | null
    sourcePageEnd?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subjects?: QuestionSubjectUncheckedCreateNestedManyWithoutQuestionInput
    skills?: QuestionSkillUncheckedCreateNestedManyWithoutQuestionInput
    fr?: FrItemUncheckedCreateNestedOneWithoutQuestionInput
  }

  export type QuestionCreateOrConnectWithoutMcqInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutMcqInput, QuestionUncheckedCreateWithoutMcqInput>
  }

  export type McqOptionCreateWithoutMcqInput = {
    label: $Enums.OptionKey
    textHtml?: string | null
    textPlain?: string | null
  }

  export type McqOptionUncheckedCreateWithoutMcqInput = {
    id?: number
    label: $Enums.OptionKey
    textHtml?: string | null
    textPlain?: string | null
  }

  export type McqOptionCreateOrConnectWithoutMcqInput = {
    where: McqOptionWhereUniqueInput
    create: XOR<McqOptionCreateWithoutMcqInput, McqOptionUncheckedCreateWithoutMcqInput>
  }

  export type McqOptionCreateManyMcqInputEnvelope = {
    data: McqOptionCreateManyMcqInput | McqOptionCreateManyMcqInput[]
    skipDuplicates?: boolean
  }

  export type QuestionUpsertWithoutMcqInput = {
    update: XOR<QuestionUpdateWithoutMcqInput, QuestionUncheckedUpdateWithoutMcqInput>
    create: XOR<QuestionCreateWithoutMcqInput, QuestionUncheckedCreateWithoutMcqInput>
    where?: QuestionWhereInput
  }

  export type QuestionUpdateToOneWithWhereWithoutMcqInput = {
    where?: QuestionWhereInput
    data: XOR<QuestionUpdateWithoutMcqInput, QuestionUncheckedUpdateWithoutMcqInput>
  }

  export type QuestionUpdateWithoutMcqInput = {
    numberLabel?: StringFieldUpdateOperationsInput | string
    isDiscursive?: BoolFieldUpdateOperationsInput | boolean
    difficulty?: NullableEnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty | null
    status?: EnumQuestionStatusFieldUpdateOperationsInput | $Enums.QuestionStatus
    sourcePageStart?: NullableIntFieldUpdateOperationsInput | number | null
    sourcePageEnd?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phase?: ExamPhaseUpdateOneRequiredWithoutQuestionsNestedInput
    stimulus?: StimulusUpdateOneWithoutQuestionsNestedInput
    subjects?: QuestionSubjectUpdateManyWithoutQuestionNestedInput
    skills?: QuestionSkillUpdateManyWithoutQuestionNestedInput
    fr?: FrItemUpdateOneWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateWithoutMcqInput = {
    id?: IntFieldUpdateOperationsInput | number
    examPhaseId?: IntFieldUpdateOperationsInput | number
    stimulusId?: NullableIntFieldUpdateOperationsInput | number | null
    numberLabel?: StringFieldUpdateOperationsInput | string
    isDiscursive?: BoolFieldUpdateOperationsInput | boolean
    difficulty?: NullableEnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty | null
    status?: EnumQuestionStatusFieldUpdateOperationsInput | $Enums.QuestionStatus
    sourcePageStart?: NullableIntFieldUpdateOperationsInput | number | null
    sourcePageEnd?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subjects?: QuestionSubjectUncheckedUpdateManyWithoutQuestionNestedInput
    skills?: QuestionSkillUncheckedUpdateManyWithoutQuestionNestedInput
    fr?: FrItemUncheckedUpdateOneWithoutQuestionNestedInput
  }

  export type McqOptionUpsertWithWhereUniqueWithoutMcqInput = {
    where: McqOptionWhereUniqueInput
    update: XOR<McqOptionUpdateWithoutMcqInput, McqOptionUncheckedUpdateWithoutMcqInput>
    create: XOR<McqOptionCreateWithoutMcqInput, McqOptionUncheckedCreateWithoutMcqInput>
  }

  export type McqOptionUpdateWithWhereUniqueWithoutMcqInput = {
    where: McqOptionWhereUniqueInput
    data: XOR<McqOptionUpdateWithoutMcqInput, McqOptionUncheckedUpdateWithoutMcqInput>
  }

  export type McqOptionUpdateManyWithWhereWithoutMcqInput = {
    where: McqOptionScalarWhereInput
    data: XOR<McqOptionUpdateManyMutationInput, McqOptionUncheckedUpdateManyWithoutMcqInput>
  }

  export type McqOptionScalarWhereInput = {
    AND?: McqOptionScalarWhereInput | McqOptionScalarWhereInput[]
    OR?: McqOptionScalarWhereInput[]
    NOT?: McqOptionScalarWhereInput | McqOptionScalarWhereInput[]
    id?: IntFilter<"McqOption"> | number
    questionId?: IntFilter<"McqOption"> | number
    label?: EnumOptionKeyFilter<"McqOption"> | $Enums.OptionKey
    textHtml?: StringNullableFilter<"McqOption"> | string | null
    textPlain?: StringNullableFilter<"McqOption"> | string | null
  }

  export type McqItemCreateWithoutOptionsInput = {
    shuffleOptions?: boolean
    optionCount: number
    correctOptionKey: $Enums.OptionKey
    question: QuestionCreateNestedOneWithoutMcqInput
  }

  export type McqItemUncheckedCreateWithoutOptionsInput = {
    questionId: number
    shuffleOptions?: boolean
    optionCount: number
    correctOptionKey: $Enums.OptionKey
  }

  export type McqItemCreateOrConnectWithoutOptionsInput = {
    where: McqItemWhereUniqueInput
    create: XOR<McqItemCreateWithoutOptionsInput, McqItemUncheckedCreateWithoutOptionsInput>
  }

  export type McqItemUpsertWithoutOptionsInput = {
    update: XOR<McqItemUpdateWithoutOptionsInput, McqItemUncheckedUpdateWithoutOptionsInput>
    create: XOR<McqItemCreateWithoutOptionsInput, McqItemUncheckedCreateWithoutOptionsInput>
    where?: McqItemWhereInput
  }

  export type McqItemUpdateToOneWithWhereWithoutOptionsInput = {
    where?: McqItemWhereInput
    data: XOR<McqItemUpdateWithoutOptionsInput, McqItemUncheckedUpdateWithoutOptionsInput>
  }

  export type McqItemUpdateWithoutOptionsInput = {
    shuffleOptions?: BoolFieldUpdateOperationsInput | boolean
    optionCount?: IntFieldUpdateOperationsInput | number
    correctOptionKey?: EnumOptionKeyFieldUpdateOperationsInput | $Enums.OptionKey
    question?: QuestionUpdateOneRequiredWithoutMcqNestedInput
  }

  export type McqItemUncheckedUpdateWithoutOptionsInput = {
    questionId?: IntFieldUpdateOperationsInput | number
    shuffleOptions?: BoolFieldUpdateOperationsInput | boolean
    optionCount?: IntFieldUpdateOperationsInput | number
    correctOptionKey?: EnumOptionKeyFieldUpdateOperationsInput | $Enums.OptionKey
  }

  export type QuestionCreateWithoutFrInput = {
    numberLabel: string
    isDiscursive?: boolean
    difficulty?: $Enums.Difficulty | null
    status?: $Enums.QuestionStatus
    sourcePageStart?: number | null
    sourcePageEnd?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    phase: ExamPhaseCreateNestedOneWithoutQuestionsInput
    stimulus?: StimulusCreateNestedOneWithoutQuestionsInput
    subjects?: QuestionSubjectCreateNestedManyWithoutQuestionInput
    skills?: QuestionSkillCreateNestedManyWithoutQuestionInput
    mcq?: McqItemCreateNestedOneWithoutQuestionInput
  }

  export type QuestionUncheckedCreateWithoutFrInput = {
    id?: number
    examPhaseId: number
    stimulusId?: number | null
    numberLabel: string
    isDiscursive?: boolean
    difficulty?: $Enums.Difficulty | null
    status?: $Enums.QuestionStatus
    sourcePageStart?: number | null
    sourcePageEnd?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subjects?: QuestionSubjectUncheckedCreateNestedManyWithoutQuestionInput
    skills?: QuestionSkillUncheckedCreateNestedManyWithoutQuestionInput
    mcq?: McqItemUncheckedCreateNestedOneWithoutQuestionInput
  }

  export type QuestionCreateOrConnectWithoutFrInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutFrInput, QuestionUncheckedCreateWithoutFrInput>
  }

  export type FrRubricCreateWithoutFrInput = {
    criterion: string
    levelsJson: JsonNullValueInput | InputJsonValue
  }

  export type FrRubricUncheckedCreateWithoutFrInput = {
    id?: number
    criterion: string
    levelsJson: JsonNullValueInput | InputJsonValue
  }

  export type FrRubricCreateOrConnectWithoutFrInput = {
    where: FrRubricWhereUniqueInput
    create: XOR<FrRubricCreateWithoutFrInput, FrRubricUncheckedCreateWithoutFrInput>
  }

  export type FrRubricCreateManyFrInputEnvelope = {
    data: FrRubricCreateManyFrInput | FrRubricCreateManyFrInput[]
    skipDuplicates?: boolean
  }

  export type FrAnswerExpectedCreateWithoutFrItemInput = {
    label?: string | null
    answerHtml?: string | null
    maxScore?: Decimal | DecimalJsLike | number | string | null
  }

  export type FrAnswerExpectedUncheckedCreateWithoutFrItemInput = {
    id?: number
    label?: string | null
    answerHtml?: string | null
    maxScore?: Decimal | DecimalJsLike | number | string | null
  }

  export type FrAnswerExpectedCreateOrConnectWithoutFrItemInput = {
    where: FrAnswerExpectedWhereUniqueInput
    create: XOR<FrAnswerExpectedCreateWithoutFrItemInput, FrAnswerExpectedUncheckedCreateWithoutFrItemInput>
  }

  export type FrAnswerExpectedCreateManyFrItemInputEnvelope = {
    data: FrAnswerExpectedCreateManyFrItemInput | FrAnswerExpectedCreateManyFrItemInput[]
    skipDuplicates?: boolean
  }

  export type QuestionUpsertWithoutFrInput = {
    update: XOR<QuestionUpdateWithoutFrInput, QuestionUncheckedUpdateWithoutFrInput>
    create: XOR<QuestionCreateWithoutFrInput, QuestionUncheckedCreateWithoutFrInput>
    where?: QuestionWhereInput
  }

  export type QuestionUpdateToOneWithWhereWithoutFrInput = {
    where?: QuestionWhereInput
    data: XOR<QuestionUpdateWithoutFrInput, QuestionUncheckedUpdateWithoutFrInput>
  }

  export type QuestionUpdateWithoutFrInput = {
    numberLabel?: StringFieldUpdateOperationsInput | string
    isDiscursive?: BoolFieldUpdateOperationsInput | boolean
    difficulty?: NullableEnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty | null
    status?: EnumQuestionStatusFieldUpdateOperationsInput | $Enums.QuestionStatus
    sourcePageStart?: NullableIntFieldUpdateOperationsInput | number | null
    sourcePageEnd?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phase?: ExamPhaseUpdateOneRequiredWithoutQuestionsNestedInput
    stimulus?: StimulusUpdateOneWithoutQuestionsNestedInput
    subjects?: QuestionSubjectUpdateManyWithoutQuestionNestedInput
    skills?: QuestionSkillUpdateManyWithoutQuestionNestedInput
    mcq?: McqItemUpdateOneWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateWithoutFrInput = {
    id?: IntFieldUpdateOperationsInput | number
    examPhaseId?: IntFieldUpdateOperationsInput | number
    stimulusId?: NullableIntFieldUpdateOperationsInput | number | null
    numberLabel?: StringFieldUpdateOperationsInput | string
    isDiscursive?: BoolFieldUpdateOperationsInput | boolean
    difficulty?: NullableEnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty | null
    status?: EnumQuestionStatusFieldUpdateOperationsInput | $Enums.QuestionStatus
    sourcePageStart?: NullableIntFieldUpdateOperationsInput | number | null
    sourcePageEnd?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subjects?: QuestionSubjectUncheckedUpdateManyWithoutQuestionNestedInput
    skills?: QuestionSkillUncheckedUpdateManyWithoutQuestionNestedInput
    mcq?: McqItemUncheckedUpdateOneWithoutQuestionNestedInput
  }

  export type FrRubricUpsertWithWhereUniqueWithoutFrInput = {
    where: FrRubricWhereUniqueInput
    update: XOR<FrRubricUpdateWithoutFrInput, FrRubricUncheckedUpdateWithoutFrInput>
    create: XOR<FrRubricCreateWithoutFrInput, FrRubricUncheckedCreateWithoutFrInput>
  }

  export type FrRubricUpdateWithWhereUniqueWithoutFrInput = {
    where: FrRubricWhereUniqueInput
    data: XOR<FrRubricUpdateWithoutFrInput, FrRubricUncheckedUpdateWithoutFrInput>
  }

  export type FrRubricUpdateManyWithWhereWithoutFrInput = {
    where: FrRubricScalarWhereInput
    data: XOR<FrRubricUpdateManyMutationInput, FrRubricUncheckedUpdateManyWithoutFrInput>
  }

  export type FrRubricScalarWhereInput = {
    AND?: FrRubricScalarWhereInput | FrRubricScalarWhereInput[]
    OR?: FrRubricScalarWhereInput[]
    NOT?: FrRubricScalarWhereInput | FrRubricScalarWhereInput[]
    id?: IntFilter<"FrRubric"> | number
    questionId?: IntFilter<"FrRubric"> | number
    criterion?: StringFilter<"FrRubric"> | string
    levelsJson?: JsonFilter<"FrRubric">
  }

  export type FrAnswerExpectedUpsertWithWhereUniqueWithoutFrItemInput = {
    where: FrAnswerExpectedWhereUniqueInput
    update: XOR<FrAnswerExpectedUpdateWithoutFrItemInput, FrAnswerExpectedUncheckedUpdateWithoutFrItemInput>
    create: XOR<FrAnswerExpectedCreateWithoutFrItemInput, FrAnswerExpectedUncheckedCreateWithoutFrItemInput>
  }

  export type FrAnswerExpectedUpdateWithWhereUniqueWithoutFrItemInput = {
    where: FrAnswerExpectedWhereUniqueInput
    data: XOR<FrAnswerExpectedUpdateWithoutFrItemInput, FrAnswerExpectedUncheckedUpdateWithoutFrItemInput>
  }

  export type FrAnswerExpectedUpdateManyWithWhereWithoutFrItemInput = {
    where: FrAnswerExpectedScalarWhereInput
    data: XOR<FrAnswerExpectedUpdateManyMutationInput, FrAnswerExpectedUncheckedUpdateManyWithoutFrItemInput>
  }

  export type FrAnswerExpectedScalarWhereInput = {
    AND?: FrAnswerExpectedScalarWhereInput | FrAnswerExpectedScalarWhereInput[]
    OR?: FrAnswerExpectedScalarWhereInput[]
    NOT?: FrAnswerExpectedScalarWhereInput | FrAnswerExpectedScalarWhereInput[]
    id?: IntFilter<"FrAnswerExpected"> | number
    frItemId?: IntFilter<"FrAnswerExpected"> | number
    label?: StringNullableFilter<"FrAnswerExpected"> | string | null
    answerHtml?: StringNullableFilter<"FrAnswerExpected"> | string | null
    maxScore?: DecimalNullableFilter<"FrAnswerExpected"> | Decimal | DecimalJsLike | number | string | null
  }

  export type FrItemCreateWithoutExpectedAnswersInput = {
    answerGuidanceHtml?: string | null
    maxScore?: Decimal | DecimalJsLike | number | string | null
    question: QuestionCreateNestedOneWithoutFrInput
    rubrics?: FrRubricCreateNestedManyWithoutFrInput
  }

  export type FrItemUncheckedCreateWithoutExpectedAnswersInput = {
    questionId: number
    answerGuidanceHtml?: string | null
    maxScore?: Decimal | DecimalJsLike | number | string | null
    rubrics?: FrRubricUncheckedCreateNestedManyWithoutFrInput
  }

  export type FrItemCreateOrConnectWithoutExpectedAnswersInput = {
    where: FrItemWhereUniqueInput
    create: XOR<FrItemCreateWithoutExpectedAnswersInput, FrItemUncheckedCreateWithoutExpectedAnswersInput>
  }

  export type FrItemUpsertWithoutExpectedAnswersInput = {
    update: XOR<FrItemUpdateWithoutExpectedAnswersInput, FrItemUncheckedUpdateWithoutExpectedAnswersInput>
    create: XOR<FrItemCreateWithoutExpectedAnswersInput, FrItemUncheckedCreateWithoutExpectedAnswersInput>
    where?: FrItemWhereInput
  }

  export type FrItemUpdateToOneWithWhereWithoutExpectedAnswersInput = {
    where?: FrItemWhereInput
    data: XOR<FrItemUpdateWithoutExpectedAnswersInput, FrItemUncheckedUpdateWithoutExpectedAnswersInput>
  }

  export type FrItemUpdateWithoutExpectedAnswersInput = {
    answerGuidanceHtml?: NullableStringFieldUpdateOperationsInput | string | null
    maxScore?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    question?: QuestionUpdateOneRequiredWithoutFrNestedInput
    rubrics?: FrRubricUpdateManyWithoutFrNestedInput
  }

  export type FrItemUncheckedUpdateWithoutExpectedAnswersInput = {
    questionId?: IntFieldUpdateOperationsInput | number
    answerGuidanceHtml?: NullableStringFieldUpdateOperationsInput | string | null
    maxScore?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    rubrics?: FrRubricUncheckedUpdateManyWithoutFrNestedInput
  }

  export type FrItemCreateWithoutRubricsInput = {
    answerGuidanceHtml?: string | null
    maxScore?: Decimal | DecimalJsLike | number | string | null
    question: QuestionCreateNestedOneWithoutFrInput
    expectedAnswers?: FrAnswerExpectedCreateNestedManyWithoutFrItemInput
  }

  export type FrItemUncheckedCreateWithoutRubricsInput = {
    questionId: number
    answerGuidanceHtml?: string | null
    maxScore?: Decimal | DecimalJsLike | number | string | null
    expectedAnswers?: FrAnswerExpectedUncheckedCreateNestedManyWithoutFrItemInput
  }

  export type FrItemCreateOrConnectWithoutRubricsInput = {
    where: FrItemWhereUniqueInput
    create: XOR<FrItemCreateWithoutRubricsInput, FrItemUncheckedCreateWithoutRubricsInput>
  }

  export type FrItemUpsertWithoutRubricsInput = {
    update: XOR<FrItemUpdateWithoutRubricsInput, FrItemUncheckedUpdateWithoutRubricsInput>
    create: XOR<FrItemCreateWithoutRubricsInput, FrItemUncheckedCreateWithoutRubricsInput>
    where?: FrItemWhereInput
  }

  export type FrItemUpdateToOneWithWhereWithoutRubricsInput = {
    where?: FrItemWhereInput
    data: XOR<FrItemUpdateWithoutRubricsInput, FrItemUncheckedUpdateWithoutRubricsInput>
  }

  export type FrItemUpdateWithoutRubricsInput = {
    answerGuidanceHtml?: NullableStringFieldUpdateOperationsInput | string | null
    maxScore?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    question?: QuestionUpdateOneRequiredWithoutFrNestedInput
    expectedAnswers?: FrAnswerExpectedUpdateManyWithoutFrItemNestedInput
  }

  export type FrItemUncheckedUpdateWithoutRubricsInput = {
    questionId?: IntFieldUpdateOperationsInput | number
    answerGuidanceHtml?: NullableStringFieldUpdateOperationsInput | string | null
    maxScore?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    expectedAnswers?: FrAnswerExpectedUncheckedUpdateManyWithoutFrItemNestedInput
  }

  export type SessionCreateWithoutUserInput = {
    id: string
    expiresAt: Date | string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    impersonatedBy?: string | null
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id: string
    expiresAt: Date | string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    impersonatedBy?: string | null
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AccountCreateWithoutUserInput = {
    id: string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id: string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserRoleCreateWithoutUserInput = {
    role: RoleCreateNestedOneWithoutUsersInput
  }

  export type UserRoleUncheckedCreateWithoutUserInput = {
    roleId: string
  }

  export type UserRoleCreateOrConnectWithoutUserInput = {
    where: UserRoleWhereUniqueInput
    create: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput>
  }

  export type UserRoleCreateManyUserInputEnvelope = {
    data: UserRoleCreateManyUserInput | UserRoleCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserPermissionCreateWithoutUserInput = {
    granted?: boolean
    permission: PermissionCreateNestedOneWithoutUsersInput
  }

  export type UserPermissionUncheckedCreateWithoutUserInput = {
    permissionId: string
    granted?: boolean
  }

  export type UserPermissionCreateOrConnectWithoutUserInput = {
    where: UserPermissionWhereUniqueInput
    create: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput>
  }

  export type UserPermissionCreateManyUserInputEnvelope = {
    data: UserPermissionCreateManyUserInput | UserPermissionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    token?: StringFilter<"Session"> | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    ipAddress?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    userId?: StringFilter<"Session"> | string
    impersonatedBy?: StringNullableFilter<"Session"> | string | null
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    id?: StringFilter<"Account"> | string
    accountId?: StringFilter<"Account"> | string
    providerId?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    accessToken?: StringNullableFilter<"Account"> | string | null
    refreshToken?: StringNullableFilter<"Account"> | string | null
    idToken?: StringNullableFilter<"Account"> | string | null
    accessTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    password?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
  }

  export type UserRoleUpsertWithWhereUniqueWithoutUserInput = {
    where: UserRoleWhereUniqueInput
    update: XOR<UserRoleUpdateWithoutUserInput, UserRoleUncheckedUpdateWithoutUserInput>
    create: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput>
  }

  export type UserRoleUpdateWithWhereUniqueWithoutUserInput = {
    where: UserRoleWhereUniqueInput
    data: XOR<UserRoleUpdateWithoutUserInput, UserRoleUncheckedUpdateWithoutUserInput>
  }

  export type UserRoleUpdateManyWithWhereWithoutUserInput = {
    where: UserRoleScalarWhereInput
    data: XOR<UserRoleUpdateManyMutationInput, UserRoleUncheckedUpdateManyWithoutUserInput>
  }

  export type UserRoleScalarWhereInput = {
    AND?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
    OR?: UserRoleScalarWhereInput[]
    NOT?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
    userId?: StringFilter<"UserRole"> | string
    roleId?: StringFilter<"UserRole"> | string
  }

  export type UserPermissionUpsertWithWhereUniqueWithoutUserInput = {
    where: UserPermissionWhereUniqueInput
    update: XOR<UserPermissionUpdateWithoutUserInput, UserPermissionUncheckedUpdateWithoutUserInput>
    create: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput>
  }

  export type UserPermissionUpdateWithWhereUniqueWithoutUserInput = {
    where: UserPermissionWhereUniqueInput
    data: XOR<UserPermissionUpdateWithoutUserInput, UserPermissionUncheckedUpdateWithoutUserInput>
  }

  export type UserPermissionUpdateManyWithWhereWithoutUserInput = {
    where: UserPermissionScalarWhereInput
    data: XOR<UserPermissionUpdateManyMutationInput, UserPermissionUncheckedUpdateManyWithoutUserInput>
  }

  export type UserPermissionScalarWhereInput = {
    AND?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
    OR?: UserPermissionScalarWhereInput[]
    NOT?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
    userId?: StringFilter<"UserPermission"> | string
    permissionId?: StringFilter<"UserPermission"> | string
    granted?: BoolFilter<"UserPermission"> | boolean
  }

  export type UserCreateWithoutSessionsInput = {
    id: string
    name: string
    email: string
    emailVerified?: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: string | null
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    directPerms?: UserPermissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id: string
    name: string
    email: string
    emailVerified?: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: string | null
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    directPerms?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    directPerms?: UserPermissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    directPerms?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutAccountsInput = {
    id: string
    name: string
    email: string
    emailVerified?: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: string | null
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
    sessions?: SessionCreateNestedManyWithoutUserInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    directPerms?: UserPermissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id: string
    name: string
    email: string
    emailVerified?: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: string | null
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    directPerms?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUpdateManyWithoutUserNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    directPerms?: UserPermissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    directPerms?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserRoleCreateWithoutRoleInput = {
    user: UserCreateNestedOneWithoutRolesInput
  }

  export type UserRoleUncheckedCreateWithoutRoleInput = {
    userId: string
  }

  export type UserRoleCreateOrConnectWithoutRoleInput = {
    where: UserRoleWhereUniqueInput
    create: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput>
  }

  export type UserRoleCreateManyRoleInputEnvelope = {
    data: UserRoleCreateManyRoleInput | UserRoleCreateManyRoleInput[]
    skipDuplicates?: boolean
  }

  export type RolePermissionCreateWithoutRoleInput = {
    granted?: boolean
    permission: PermissionCreateNestedOneWithoutRolesInput
  }

  export type RolePermissionUncheckedCreateWithoutRoleInput = {
    permissionId: string
    granted?: boolean
  }

  export type RolePermissionCreateOrConnectWithoutRoleInput = {
    where: RolePermissionWhereUniqueInput
    create: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput>
  }

  export type RolePermissionCreateManyRoleInputEnvelope = {
    data: RolePermissionCreateManyRoleInput | RolePermissionCreateManyRoleInput[]
    skipDuplicates?: boolean
  }

  export type UserRoleUpsertWithWhereUniqueWithoutRoleInput = {
    where: UserRoleWhereUniqueInput
    update: XOR<UserRoleUpdateWithoutRoleInput, UserRoleUncheckedUpdateWithoutRoleInput>
    create: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput>
  }

  export type UserRoleUpdateWithWhereUniqueWithoutRoleInput = {
    where: UserRoleWhereUniqueInput
    data: XOR<UserRoleUpdateWithoutRoleInput, UserRoleUncheckedUpdateWithoutRoleInput>
  }

  export type UserRoleUpdateManyWithWhereWithoutRoleInput = {
    where: UserRoleScalarWhereInput
    data: XOR<UserRoleUpdateManyMutationInput, UserRoleUncheckedUpdateManyWithoutRoleInput>
  }

  export type RolePermissionUpsertWithWhereUniqueWithoutRoleInput = {
    where: RolePermissionWhereUniqueInput
    update: XOR<RolePermissionUpdateWithoutRoleInput, RolePermissionUncheckedUpdateWithoutRoleInput>
    create: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput>
  }

  export type RolePermissionUpdateWithWhereUniqueWithoutRoleInput = {
    where: RolePermissionWhereUniqueInput
    data: XOR<RolePermissionUpdateWithoutRoleInput, RolePermissionUncheckedUpdateWithoutRoleInput>
  }

  export type RolePermissionUpdateManyWithWhereWithoutRoleInput = {
    where: RolePermissionScalarWhereInput
    data: XOR<RolePermissionUpdateManyMutationInput, RolePermissionUncheckedUpdateManyWithoutRoleInput>
  }

  export type RolePermissionScalarWhereInput = {
    AND?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
    OR?: RolePermissionScalarWhereInput[]
    NOT?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
    roleId?: StringFilter<"RolePermission"> | string
    permissionId?: StringFilter<"RolePermission"> | string
    granted?: BoolFilter<"RolePermission"> | boolean
  }

  export type RolePermissionCreateWithoutPermissionInput = {
    granted?: boolean
    role: RoleCreateNestedOneWithoutPermsInput
  }

  export type RolePermissionUncheckedCreateWithoutPermissionInput = {
    roleId: string
    granted?: boolean
  }

  export type RolePermissionCreateOrConnectWithoutPermissionInput = {
    where: RolePermissionWhereUniqueInput
    create: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput>
  }

  export type RolePermissionCreateManyPermissionInputEnvelope = {
    data: RolePermissionCreateManyPermissionInput | RolePermissionCreateManyPermissionInput[]
    skipDuplicates?: boolean
  }

  export type UserPermissionCreateWithoutPermissionInput = {
    granted?: boolean
    user: UserCreateNestedOneWithoutDirectPermsInput
  }

  export type UserPermissionUncheckedCreateWithoutPermissionInput = {
    userId: string
    granted?: boolean
  }

  export type UserPermissionCreateOrConnectWithoutPermissionInput = {
    where: UserPermissionWhereUniqueInput
    create: XOR<UserPermissionCreateWithoutPermissionInput, UserPermissionUncheckedCreateWithoutPermissionInput>
  }

  export type UserPermissionCreateManyPermissionInputEnvelope = {
    data: UserPermissionCreateManyPermissionInput | UserPermissionCreateManyPermissionInput[]
    skipDuplicates?: boolean
  }

  export type RolePermissionUpsertWithWhereUniqueWithoutPermissionInput = {
    where: RolePermissionWhereUniqueInput
    update: XOR<RolePermissionUpdateWithoutPermissionInput, RolePermissionUncheckedUpdateWithoutPermissionInput>
    create: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput>
  }

  export type RolePermissionUpdateWithWhereUniqueWithoutPermissionInput = {
    where: RolePermissionWhereUniqueInput
    data: XOR<RolePermissionUpdateWithoutPermissionInput, RolePermissionUncheckedUpdateWithoutPermissionInput>
  }

  export type RolePermissionUpdateManyWithWhereWithoutPermissionInput = {
    where: RolePermissionScalarWhereInput
    data: XOR<RolePermissionUpdateManyMutationInput, RolePermissionUncheckedUpdateManyWithoutPermissionInput>
  }

  export type UserPermissionUpsertWithWhereUniqueWithoutPermissionInput = {
    where: UserPermissionWhereUniqueInput
    update: XOR<UserPermissionUpdateWithoutPermissionInput, UserPermissionUncheckedUpdateWithoutPermissionInput>
    create: XOR<UserPermissionCreateWithoutPermissionInput, UserPermissionUncheckedCreateWithoutPermissionInput>
  }

  export type UserPermissionUpdateWithWhereUniqueWithoutPermissionInput = {
    where: UserPermissionWhereUniqueInput
    data: XOR<UserPermissionUpdateWithoutPermissionInput, UserPermissionUncheckedUpdateWithoutPermissionInput>
  }

  export type UserPermissionUpdateManyWithWhereWithoutPermissionInput = {
    where: UserPermissionScalarWhereInput
    data: XOR<UserPermissionUpdateManyMutationInput, UserPermissionUncheckedUpdateManyWithoutPermissionInput>
  }

  export type RoleCreateWithoutPermsInput = {
    id?: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserRoleCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateWithoutPermsInput = {
    id?: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserRoleUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleCreateOrConnectWithoutPermsInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutPermsInput, RoleUncheckedCreateWithoutPermsInput>
  }

  export type PermissionCreateWithoutRolesInput = {
    id?: string
    resource: string
    action: string
    key: string
    isActive?: boolean
    users?: UserPermissionCreateNestedManyWithoutPermissionInput
  }

  export type PermissionUncheckedCreateWithoutRolesInput = {
    id?: string
    resource: string
    action: string
    key: string
    isActive?: boolean
    users?: UserPermissionUncheckedCreateNestedManyWithoutPermissionInput
  }

  export type PermissionCreateOrConnectWithoutRolesInput = {
    where: PermissionWhereUniqueInput
    create: XOR<PermissionCreateWithoutRolesInput, PermissionUncheckedCreateWithoutRolesInput>
  }

  export type RoleUpsertWithoutPermsInput = {
    update: XOR<RoleUpdateWithoutPermsInput, RoleUncheckedUpdateWithoutPermsInput>
    create: XOR<RoleCreateWithoutPermsInput, RoleUncheckedCreateWithoutPermsInput>
    where?: RoleWhereInput
  }

  export type RoleUpdateToOneWithWhereWithoutPermsInput = {
    where?: RoleWhereInput
    data: XOR<RoleUpdateWithoutPermsInput, RoleUncheckedUpdateWithoutPermsInput>
  }

  export type RoleUpdateWithoutPermsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserRoleUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateWithoutPermsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserRoleUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type PermissionUpsertWithoutRolesInput = {
    update: XOR<PermissionUpdateWithoutRolesInput, PermissionUncheckedUpdateWithoutRolesInput>
    create: XOR<PermissionCreateWithoutRolesInput, PermissionUncheckedCreateWithoutRolesInput>
    where?: PermissionWhereInput
  }

  export type PermissionUpdateToOneWithWhereWithoutRolesInput = {
    where?: PermissionWhereInput
    data: XOR<PermissionUpdateWithoutRolesInput, PermissionUncheckedUpdateWithoutRolesInput>
  }

  export type PermissionUpdateWithoutRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    users?: UserPermissionUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionUncheckedUpdateWithoutRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    users?: UserPermissionUncheckedUpdateManyWithoutPermissionNestedInput
  }

  export type UserCreateWithoutRolesInput = {
    id: string
    name: string
    email: string
    emailVerified?: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: string | null
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
    sessions?: SessionCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    directPerms?: UserPermissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRolesInput = {
    id: string
    name: string
    email: string
    emailVerified?: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: string | null
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    directPerms?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRolesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRolesInput, UserUncheckedCreateWithoutRolesInput>
  }

  export type RoleCreateWithoutUsersInput = {
    id?: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    perms?: RolePermissionCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    perms?: RolePermissionUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleCreateOrConnectWithoutUsersInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
  }

  export type UserUpsertWithoutRolesInput = {
    update: XOR<UserUpdateWithoutRolesInput, UserUncheckedUpdateWithoutRolesInput>
    create: XOR<UserCreateWithoutRolesInput, UserUncheckedCreateWithoutRolesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRolesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRolesInput, UserUncheckedUpdateWithoutRolesInput>
  }

  export type UserUpdateWithoutRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    directPerms?: UserPermissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    directPerms?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RoleUpsertWithoutUsersInput = {
    update: XOR<RoleUpdateWithoutUsersInput, RoleUncheckedUpdateWithoutUsersInput>
    create: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
    where?: RoleWhereInput
  }

  export type RoleUpdateToOneWithWhereWithoutUsersInput = {
    where?: RoleWhereInput
    data: XOR<RoleUpdateWithoutUsersInput, RoleUncheckedUpdateWithoutUsersInput>
  }

  export type RoleUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    perms?: RolePermissionUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    perms?: RolePermissionUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type UserCreateWithoutDirectPermsInput = {
    id: string
    name: string
    email: string
    emailVerified?: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: string | null
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
    sessions?: SessionCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDirectPermsInput = {
    id: string
    name: string
    email: string
    emailVerified?: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    role?: string | null
    banned?: boolean | null
    banReason?: string | null
    banExpires?: Date | string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDirectPermsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDirectPermsInput, UserUncheckedCreateWithoutDirectPermsInput>
  }

  export type PermissionCreateWithoutUsersInput = {
    id?: string
    resource: string
    action: string
    key: string
    isActive?: boolean
    roles?: RolePermissionCreateNestedManyWithoutPermissionInput
  }

  export type PermissionUncheckedCreateWithoutUsersInput = {
    id?: string
    resource: string
    action: string
    key: string
    isActive?: boolean
    roles?: RolePermissionUncheckedCreateNestedManyWithoutPermissionInput
  }

  export type PermissionCreateOrConnectWithoutUsersInput = {
    where: PermissionWhereUniqueInput
    create: XOR<PermissionCreateWithoutUsersInput, PermissionUncheckedCreateWithoutUsersInput>
  }

  export type UserUpsertWithoutDirectPermsInput = {
    update: XOR<UserUpdateWithoutDirectPermsInput, UserUncheckedUpdateWithoutDirectPermsInput>
    create: XOR<UserCreateWithoutDirectPermsInput, UserUncheckedCreateWithoutDirectPermsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDirectPermsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDirectPermsInput, UserUncheckedUpdateWithoutDirectPermsInput>
  }

  export type UserUpdateWithoutDirectPermsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDirectPermsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: NullableStringFieldUpdateOperationsInput | string | null
    banned?: NullableBoolFieldUpdateOperationsInput | boolean | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    banExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PermissionUpsertWithoutUsersInput = {
    update: XOR<PermissionUpdateWithoutUsersInput, PermissionUncheckedUpdateWithoutUsersInput>
    create: XOR<PermissionCreateWithoutUsersInput, PermissionUncheckedCreateWithoutUsersInput>
    where?: PermissionWhereInput
  }

  export type PermissionUpdateToOneWithWhereWithoutUsersInput = {
    where?: PermissionWhereInput
    data: XOR<PermissionUpdateWithoutUsersInput, PermissionUncheckedUpdateWithoutUsersInput>
  }

  export type PermissionUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    roles?: RolePermissionUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    roles?: RolePermissionUncheckedUpdateManyWithoutPermissionNestedInput
  }

  export type ExamEditionCreateManyBoardInput = {
    id?: number
    year: number
    editionLabel: string
    notes?: string | null
  }

  export type ExamEditionUpdateWithoutBoardInput = {
    year?: IntFieldUpdateOperationsInput | number
    editionLabel?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    phases?: ExamPhaseUpdateManyWithoutEditionNestedInput
  }

  export type ExamEditionUncheckedUpdateWithoutBoardInput = {
    id?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    editionLabel?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    phases?: ExamPhaseUncheckedUpdateManyWithoutEditionNestedInput
  }

  export type ExamEditionUncheckedUpdateManyWithoutBoardInput = {
    id?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    editionLabel?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ExamPhaseCreateManyEditionInput = {
    id?: number
    phaseNumber: number
    dayNumber?: number | null
    subjectBlock?: string | null
    questionCountExpected?: number | null
    defaultOptionCount?: number | null
    isDiscursive?: boolean
  }

  export type ExamPhaseUpdateWithoutEditionInput = {
    phaseNumber?: IntFieldUpdateOperationsInput | number
    dayNumber?: NullableIntFieldUpdateOperationsInput | number | null
    subjectBlock?: NullableStringFieldUpdateOperationsInput | string | null
    questionCountExpected?: NullableIntFieldUpdateOperationsInput | number | null
    defaultOptionCount?: NullableIntFieldUpdateOperationsInput | number | null
    isDiscursive?: BoolFieldUpdateOperationsInput | boolean
    questions?: QuestionUpdateManyWithoutPhaseNestedInput
  }

  export type ExamPhaseUncheckedUpdateWithoutEditionInput = {
    id?: IntFieldUpdateOperationsInput | number
    phaseNumber?: IntFieldUpdateOperationsInput | number
    dayNumber?: NullableIntFieldUpdateOperationsInput | number | null
    subjectBlock?: NullableStringFieldUpdateOperationsInput | string | null
    questionCountExpected?: NullableIntFieldUpdateOperationsInput | number | null
    defaultOptionCount?: NullableIntFieldUpdateOperationsInput | number | null
    isDiscursive?: BoolFieldUpdateOperationsInput | boolean
    questions?: QuestionUncheckedUpdateManyWithoutPhaseNestedInput
  }

  export type ExamPhaseUncheckedUpdateManyWithoutEditionInput = {
    id?: IntFieldUpdateOperationsInput | number
    phaseNumber?: IntFieldUpdateOperationsInput | number
    dayNumber?: NullableIntFieldUpdateOperationsInput | number | null
    subjectBlock?: NullableStringFieldUpdateOperationsInput | string | null
    questionCountExpected?: NullableIntFieldUpdateOperationsInput | number | null
    defaultOptionCount?: NullableIntFieldUpdateOperationsInput | number | null
    isDiscursive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type QuestionCreateManyPhaseInput = {
    id?: number
    stimulusId?: number | null
    numberLabel: string
    isDiscursive?: boolean
    difficulty?: $Enums.Difficulty | null
    status?: $Enums.QuestionStatus
    sourcePageStart?: number | null
    sourcePageEnd?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionUpdateWithoutPhaseInput = {
    numberLabel?: StringFieldUpdateOperationsInput | string
    isDiscursive?: BoolFieldUpdateOperationsInput | boolean
    difficulty?: NullableEnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty | null
    status?: EnumQuestionStatusFieldUpdateOperationsInput | $Enums.QuestionStatus
    sourcePageStart?: NullableIntFieldUpdateOperationsInput | number | null
    sourcePageEnd?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stimulus?: StimulusUpdateOneWithoutQuestionsNestedInput
    subjects?: QuestionSubjectUpdateManyWithoutQuestionNestedInput
    skills?: QuestionSkillUpdateManyWithoutQuestionNestedInput
    mcq?: McqItemUpdateOneWithoutQuestionNestedInput
    fr?: FrItemUpdateOneWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateWithoutPhaseInput = {
    id?: IntFieldUpdateOperationsInput | number
    stimulusId?: NullableIntFieldUpdateOperationsInput | number | null
    numberLabel?: StringFieldUpdateOperationsInput | string
    isDiscursive?: BoolFieldUpdateOperationsInput | boolean
    difficulty?: NullableEnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty | null
    status?: EnumQuestionStatusFieldUpdateOperationsInput | $Enums.QuestionStatus
    sourcePageStart?: NullableIntFieldUpdateOperationsInput | number | null
    sourcePageEnd?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subjects?: QuestionSubjectUncheckedUpdateManyWithoutQuestionNestedInput
    skills?: QuestionSkillUncheckedUpdateManyWithoutQuestionNestedInput
    mcq?: McqItemUncheckedUpdateOneWithoutQuestionNestedInput
    fr?: FrItemUncheckedUpdateOneWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateManyWithoutPhaseInput = {
    id?: IntFieldUpdateOperationsInput | number
    stimulusId?: NullableIntFieldUpdateOperationsInput | number | null
    numberLabel?: StringFieldUpdateOperationsInput | string
    isDiscursive?: BoolFieldUpdateOperationsInput | boolean
    difficulty?: NullableEnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty | null
    status?: EnumQuestionStatusFieldUpdateOperationsInput | $Enums.QuestionStatus
    sourcePageStart?: NullableIntFieldUpdateOperationsInput | number | null
    sourcePageEnd?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionSubjectCreateManySubjectInput = {
    questionId: number
  }

  export type QuestionSubjectUpdateWithoutSubjectInput = {
    question?: QuestionUpdateOneRequiredWithoutSubjectsNestedInput
  }

  export type QuestionSubjectUncheckedUpdateWithoutSubjectInput = {
    questionId?: IntFieldUpdateOperationsInput | number
  }

  export type QuestionSubjectUncheckedUpdateManyWithoutSubjectInput = {
    questionId?: IntFieldUpdateOperationsInput | number
  }

  export type QuestionSkillCreateManySkillInput = {
    questionId: number
  }

  export type QuestionSkillUpdateWithoutSkillInput = {
    question?: QuestionUpdateOneRequiredWithoutSkillsNestedInput
  }

  export type QuestionSkillUncheckedUpdateWithoutSkillInput = {
    questionId?: IntFieldUpdateOperationsInput | number
  }

  export type QuestionSkillUncheckedUpdateManyWithoutSkillInput = {
    questionId?: IntFieldUpdateOperationsInput | number
  }

  export type StimulusAssetCreateManyStimulusInput = {
    id?: number
    storageKey: string
    caption?: string | null
    pageHint?: number | null
  }

  export type QuestionCreateManyStimulusInput = {
    id?: number
    examPhaseId: number
    numberLabel: string
    isDiscursive?: boolean
    difficulty?: $Enums.Difficulty | null
    status?: $Enums.QuestionStatus
    sourcePageStart?: number | null
    sourcePageEnd?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StimulusAssetUpdateWithoutStimulusInput = {
    storageKey?: StringFieldUpdateOperationsInput | string
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    pageHint?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type StimulusAssetUncheckedUpdateWithoutStimulusInput = {
    id?: IntFieldUpdateOperationsInput | number
    storageKey?: StringFieldUpdateOperationsInput | string
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    pageHint?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type StimulusAssetUncheckedUpdateManyWithoutStimulusInput = {
    id?: IntFieldUpdateOperationsInput | number
    storageKey?: StringFieldUpdateOperationsInput | string
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    pageHint?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type QuestionUpdateWithoutStimulusInput = {
    numberLabel?: StringFieldUpdateOperationsInput | string
    isDiscursive?: BoolFieldUpdateOperationsInput | boolean
    difficulty?: NullableEnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty | null
    status?: EnumQuestionStatusFieldUpdateOperationsInput | $Enums.QuestionStatus
    sourcePageStart?: NullableIntFieldUpdateOperationsInput | number | null
    sourcePageEnd?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phase?: ExamPhaseUpdateOneRequiredWithoutQuestionsNestedInput
    subjects?: QuestionSubjectUpdateManyWithoutQuestionNestedInput
    skills?: QuestionSkillUpdateManyWithoutQuestionNestedInput
    mcq?: McqItemUpdateOneWithoutQuestionNestedInput
    fr?: FrItemUpdateOneWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateWithoutStimulusInput = {
    id?: IntFieldUpdateOperationsInput | number
    examPhaseId?: IntFieldUpdateOperationsInput | number
    numberLabel?: StringFieldUpdateOperationsInput | string
    isDiscursive?: BoolFieldUpdateOperationsInput | boolean
    difficulty?: NullableEnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty | null
    status?: EnumQuestionStatusFieldUpdateOperationsInput | $Enums.QuestionStatus
    sourcePageStart?: NullableIntFieldUpdateOperationsInput | number | null
    sourcePageEnd?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subjects?: QuestionSubjectUncheckedUpdateManyWithoutQuestionNestedInput
    skills?: QuestionSkillUncheckedUpdateManyWithoutQuestionNestedInput
    mcq?: McqItemUncheckedUpdateOneWithoutQuestionNestedInput
    fr?: FrItemUncheckedUpdateOneWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateManyWithoutStimulusInput = {
    id?: IntFieldUpdateOperationsInput | number
    examPhaseId?: IntFieldUpdateOperationsInput | number
    numberLabel?: StringFieldUpdateOperationsInput | string
    isDiscursive?: BoolFieldUpdateOperationsInput | boolean
    difficulty?: NullableEnumDifficultyFieldUpdateOperationsInput | $Enums.Difficulty | null
    status?: EnumQuestionStatusFieldUpdateOperationsInput | $Enums.QuestionStatus
    sourcePageStart?: NullableIntFieldUpdateOperationsInput | number | null
    sourcePageEnd?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionSubjectCreateManyQuestionInput = {
    subjectId: number
  }

  export type QuestionSkillCreateManyQuestionInput = {
    skillId: number
  }

  export type QuestionSubjectUpdateWithoutQuestionInput = {
    subject?: SubjectUpdateOneRequiredWithoutQuestionsNestedInput
  }

  export type QuestionSubjectUncheckedUpdateWithoutQuestionInput = {
    subjectId?: IntFieldUpdateOperationsInput | number
  }

  export type QuestionSubjectUncheckedUpdateManyWithoutQuestionInput = {
    subjectId?: IntFieldUpdateOperationsInput | number
  }

  export type QuestionSkillUpdateWithoutQuestionInput = {
    skill?: SkillUpdateOneRequiredWithoutQuestionsNestedInput
  }

  export type QuestionSkillUncheckedUpdateWithoutQuestionInput = {
    skillId?: IntFieldUpdateOperationsInput | number
  }

  export type QuestionSkillUncheckedUpdateManyWithoutQuestionInput = {
    skillId?: IntFieldUpdateOperationsInput | number
  }

  export type McqOptionCreateManyMcqInput = {
    id?: number
    label: $Enums.OptionKey
    textHtml?: string | null
    textPlain?: string | null
  }

  export type McqOptionUpdateWithoutMcqInput = {
    label?: EnumOptionKeyFieldUpdateOperationsInput | $Enums.OptionKey
    textHtml?: NullableStringFieldUpdateOperationsInput | string | null
    textPlain?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type McqOptionUncheckedUpdateWithoutMcqInput = {
    id?: IntFieldUpdateOperationsInput | number
    label?: EnumOptionKeyFieldUpdateOperationsInput | $Enums.OptionKey
    textHtml?: NullableStringFieldUpdateOperationsInput | string | null
    textPlain?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type McqOptionUncheckedUpdateManyWithoutMcqInput = {
    id?: IntFieldUpdateOperationsInput | number
    label?: EnumOptionKeyFieldUpdateOperationsInput | $Enums.OptionKey
    textHtml?: NullableStringFieldUpdateOperationsInput | string | null
    textPlain?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FrRubricCreateManyFrInput = {
    id?: number
    criterion: string
    levelsJson: JsonNullValueInput | InputJsonValue
  }

  export type FrAnswerExpectedCreateManyFrItemInput = {
    id?: number
    label?: string | null
    answerHtml?: string | null
    maxScore?: Decimal | DecimalJsLike | number | string | null
  }

  export type FrRubricUpdateWithoutFrInput = {
    criterion?: StringFieldUpdateOperationsInput | string
    levelsJson?: JsonNullValueInput | InputJsonValue
  }

  export type FrRubricUncheckedUpdateWithoutFrInput = {
    id?: IntFieldUpdateOperationsInput | number
    criterion?: StringFieldUpdateOperationsInput | string
    levelsJson?: JsonNullValueInput | InputJsonValue
  }

  export type FrRubricUncheckedUpdateManyWithoutFrInput = {
    id?: IntFieldUpdateOperationsInput | number
    criterion?: StringFieldUpdateOperationsInput | string
    levelsJson?: JsonNullValueInput | InputJsonValue
  }

  export type FrAnswerExpectedUpdateWithoutFrItemInput = {
    label?: NullableStringFieldUpdateOperationsInput | string | null
    answerHtml?: NullableStringFieldUpdateOperationsInput | string | null
    maxScore?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type FrAnswerExpectedUncheckedUpdateWithoutFrItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    label?: NullableStringFieldUpdateOperationsInput | string | null
    answerHtml?: NullableStringFieldUpdateOperationsInput | string | null
    maxScore?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type FrAnswerExpectedUncheckedUpdateManyWithoutFrItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    label?: NullableStringFieldUpdateOperationsInput | string | null
    answerHtml?: NullableStringFieldUpdateOperationsInput | string | null
    maxScore?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type SessionCreateManyUserInput = {
    id: string
    expiresAt: Date | string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    impersonatedBy?: string | null
  }

  export type AccountCreateManyUserInput = {
    id: string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserRoleCreateManyUserInput = {
    roleId: string
  }

  export type UserPermissionCreateManyUserInput = {
    permissionId: string
    granted?: boolean
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    impersonatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    impersonatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    impersonatedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRoleUpdateWithoutUserInput = {
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserRoleUncheckedUpdateWithoutUserInput = {
    roleId?: StringFieldUpdateOperationsInput | string
  }

  export type UserRoleUncheckedUpdateManyWithoutUserInput = {
    roleId?: StringFieldUpdateOperationsInput | string
  }

  export type UserPermissionUpdateWithoutUserInput = {
    granted?: BoolFieldUpdateOperationsInput | boolean
    permission?: PermissionUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserPermissionUncheckedUpdateWithoutUserInput = {
    permissionId?: StringFieldUpdateOperationsInput | string
    granted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserPermissionUncheckedUpdateManyWithoutUserInput = {
    permissionId?: StringFieldUpdateOperationsInput | string
    granted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserRoleCreateManyRoleInput = {
    userId: string
  }

  export type RolePermissionCreateManyRoleInput = {
    permissionId: string
    granted?: boolean
  }

  export type UserRoleUpdateWithoutRoleInput = {
    user?: UserUpdateOneRequiredWithoutRolesNestedInput
  }

  export type UserRoleUncheckedUpdateWithoutRoleInput = {
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserRoleUncheckedUpdateManyWithoutRoleInput = {
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type RolePermissionUpdateWithoutRoleInput = {
    granted?: BoolFieldUpdateOperationsInput | boolean
    permission?: PermissionUpdateOneRequiredWithoutRolesNestedInput
  }

  export type RolePermissionUncheckedUpdateWithoutRoleInput = {
    permissionId?: StringFieldUpdateOperationsInput | string
    granted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RolePermissionUncheckedUpdateManyWithoutRoleInput = {
    permissionId?: StringFieldUpdateOperationsInput | string
    granted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RolePermissionCreateManyPermissionInput = {
    roleId: string
    granted?: boolean
  }

  export type UserPermissionCreateManyPermissionInput = {
    userId: string
    granted?: boolean
  }

  export type RolePermissionUpdateWithoutPermissionInput = {
    granted?: BoolFieldUpdateOperationsInput | boolean
    role?: RoleUpdateOneRequiredWithoutPermsNestedInput
  }

  export type RolePermissionUncheckedUpdateWithoutPermissionInput = {
    roleId?: StringFieldUpdateOperationsInput | string
    granted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RolePermissionUncheckedUpdateManyWithoutPermissionInput = {
    roleId?: StringFieldUpdateOperationsInput | string
    granted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserPermissionUpdateWithoutPermissionInput = {
    granted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutDirectPermsNestedInput
  }

  export type UserPermissionUncheckedUpdateWithoutPermissionInput = {
    userId?: StringFieldUpdateOperationsInput | string
    granted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserPermissionUncheckedUpdateManyWithoutPermissionInput = {
    userId?: StringFieldUpdateOperationsInput | string
    granted?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}